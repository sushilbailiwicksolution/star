var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AplController.html",[0,0.886,1,2.973]],["body/controllers/AplController.html",[0,1.286,1,3.237,2,1.065,3,0.089,4,0.076,5,0.076,6,2.407,7,0.451,8,1.749,9,3.237,10,1.749,11,5.614,12,0.154,13,0.965,14,3.232,15,1.734,16,1.34,17,1.455,18,1.926,19,1.257,20,0.965,21,0.965,22,0.729,23,5.606,24,0.934,25,0.016,26,1.975,27,4.225,28,5.003,29,3.14,30,1.834,31,1.402,32,2.444,33,1.834,34,0.378,35,2.783,36,2.444,37,3.828,38,2.397,39,1.436,40,0.73,41,0.281,42,0.453,43,1.674,44,1.652,45,1.571,46,2.16,47,2.397,48,3.053,49,2.783,50,3.194,51,0.781,52,1.916,53,1.285,54,2.16,55,1.853,56,1.834,57,2.783,58,1.411,59,1.647,60,1.749,61,0.729,62,1.455,63,1.224,64,2.444,65,1.224,66,2.783,67,1.455,68,1.207,69,0.729,70,0.689,71,2.16,72,2.181,73,2.783,74,1.236,75,1.926,76,3.237,77,0.935,78,2.16,79,2.226,80,2.783,81,2.2,82,1.463,83,0.212,84,1.749,85,1.224,86,0.729,87,1.092,88,1.746,89,1.167,90,0.456,91,2.85,92,2.997,93,1.224,94,1.114,95,0.671,96,0.197,97,0.729,98,1.507,99,1.507,100,2.407,101,1.167,102,1.425,103,3.65,104,2.783,105,1.114,106,1.167,107,1.167,108,2.783,109,2.783,110,0.089,111,0.04,112,0.729,113,0.699,114,0.477,115,2.783,116,0.699,117,1.114,118,1.834,119,3.647,120,5.954,121,2.748,122,1.675,123,1.834,124,1.224,125,1.114,126,2.407,127,1.114,128,3.608,129,2.407,130,2.407,131,1.387,132,2.2,133,2.407,134,1.224,135,1.285,136,2.407,137,1.425,138,1.425,139,2.407,140,1.224,141,1.224,142,2.407,143,1.224,144,1.224,145,2.407,146,0.008,147,0.008]],["title/entities/AplEntity.html",[148,0.333,149,2.516]],["body/entities/AplEntity.html",[3,0.152,4,0.131,5,0.131,7,0.289,11,5.343,12,0.265,24,1.049,25,0.016,34,0.425,41,0.355,42,0.563,51,1.137,70,0.669,83,0.213,96,0.338,105,2.674,110,0.152,111,0.069,146,0.012,147,0.012,148,0.58,149,3.989,150,1.153,151,4.136,152,1.293,153,1.917,154,1.591,155,4.714,156,6.074,157,3.721,158,0.865,159,6.676,160,3.616,161,5.775,162,4.985,163,4.136,164,6.074,165,6.074,166,4.782,167,4.258,168,3.108,169,4.782,170,1.997,171,4.985,172,7.024,173,4.782,174,4.782,175,1.36,176,3.491,177,4.782,178,2.131,179,1.677,180,1.752,181,1.677]],["title/entities/AplItemEntity.html",[148,0.333,162,2.719]],["body/entities/AplItemEntity.html",[3,0.131,4,0.112,5,0.112,7,0.248,11,4.9,12,0.228,20,0.95,21,0.95,24,1.128,25,0.016,31,1.38,34,0.457,41,0.382,42,0.602,70,0.832,83,0.198,96,0.29,110,0.131,111,0.059,146,0.011,147,0.011,148,0.539,149,4.349,150,0.99,152,1.17,153,1.5,158,0.783,162,3.902,167,4.526,168,3.303,170,2.021,175,1.167,178,1.929,179,1.44,180,1.504,181,1.44,182,3.55,183,6.905,184,6.2,185,6.2,186,6.2,187,6.2,188,6.2,189,2.483,190,5.363,191,6.2,192,6.2,193,2.223,194,5.498,195,2.978,196,2.726,197,2.306,198,2.306,199,4.104,200,5.498,201,4.104,202,4.104,203,3.902,204,4.104,205,4.104,206,4.104,207,4.104,208,4.104,209,4.104,210,4.104,211,4.104,212,1.994,213,2.816,214,4.104,215,3.185,216,2.223]],["title/injectables/AplService.html",[103,2.516,217,0.815]],["body/injectables/AplService.html",[3,0.104,4,0.089,5,0.089,7,0.197,11,5.175,12,0.18,13,1.386,15,1.755,16,1.128,17,1.569,19,1.176,20,1.082,21,1.082,22,1.225,23,5.889,25,0.016,34,0.412,39,1.53,40,0.778,41,0.321,42,0.482,43,1.758,44,1.687,45,1.832,51,0.876,55,1.775,58,1.412,59,1.959,61,0.852,62,1.225,67,0.852,68,0.784,69,1.225,70,0.782,74,1.775,77,1.572,82,1.641,83,0.226,86,0.852,87,1.569,88,1.825,90,0.533,95,0.784,96,0.331,97,0.852,100,2.814,103,3.933,110,0.104,111,0.047,112,1.662,113,1.505,114,1.167,116,1.505,122,0.817,125,2.194,127,2.194,131,1.466,146,0.009,147,0.009,149,2.136,154,1.225,158,0.666,217,0.995,218,1.245,219,2.814,220,4.678,221,5.181,222,2.057,223,1.43,224,2.994,225,2.634,226,2.906,227,4.678,228,2.865,229,3.253,230,3.253,231,2.057,232,3.253,233,3.253,234,3.631,235,3.253,236,2.865,237,4.678,238,1.093,239,1.141,240,4.678,241,2.057,242,1.43,243,1.245,244,1.364,245,1.43,246,1.43,247,3.253,248,3.253,249,1.502,250,1.502,251,2.525,252,1.93,253,2.057,254,1.502,255,1.43,256,2.057,257,1.666,258,1.666,259,1.43,260,1.364,261,2.057,262,1.43,263,1.43,264,1.43,265,1.502,266,2.057,267,1.43,268,1.43,269,1.43,270,1.43,271,1.43,272,1.43]],["title/modules/AppConfigModule.html",[273,1.534,274,2.516]],["body/modules/AppConfigModule.html",[3,0.162,4,0.139,5,0.139,25,0.016,83,0.235,90,0.831,110,0.162,111,0.091,146,0.013,147,0.013,273,2.524,274,5.103,275,2.462,276,3.228,277,4.385,278,4.385,279,4.385,280,5.189,281,4.72,282,3.86,283,3.105,284,3.105,285,5.069,286,4.138,287,4.472,288,3.105,289,3.329,290,3.597,291,3.105,292,4.866,293,3.597,294,2.913,295,3.597,296,3.597,297,3.597,298,3.597,299,5.069,300,5.069,301,5.069,302,5.069,303,5.069,304,5.069,305,4.385,306,4.385,307,5.069,308,5.069,309,5.069,310,5.069,311,5.069,312,5.069,313,5.069,314,5.069,315,5.069,316,5.069,317,3.934,318,3.934,319,3.934]],["title/injectables/AppConfigService.html",[217,0.815,280,2.516]],["body/injectables/AppConfigService.html",[3,0.159,4,0.137,5,0.137,7,0.302,12,0.277,25,0.016,34,0.453,39,1.205,40,0.919,41,0.253,42,0.38,70,0.551,83,0.199,90,0.819,110,0.159,111,0.098,116,1.57,117,2.002,131,1.63,146,0.013,147,0.013,170,2.03,217,1.329,218,1.914,280,4.102,281,4.656,291,3.061,317,5.702,318,4.848,319,4.848,320,4.324,321,6.246,322,7.347,323,6.246,324,4.835,325,6.813,326,4.998,327,4.998,328,4.998,329,4.998,330,4.998,331,4.998,332,4.998,333,4.998,334,4.998,335,4.998,336,4.998,337,4.998,338,4.998,339,4.998,340,4.998,341,4.998,342,4.998]],["title/controllers/AppController.html",[0,0.886,343,2.719]],["body/controllers/AppController.html",[0,1.685,2,2.027,3,0.169,4,0.145,5,0.145,7,0.32,12,0.294,13,1.497,24,0.791,25,0.016,34,0.32,44,1.497,83,0.232,89,2.22,90,0.867,98,3.505,99,2.867,110,0.169,111,0.101,113,1.33,116,1.626,117,2.12,119,3.242,131,1.175,146,0.013,147,0.013,239,2.27,343,4.593,344,4.579,345,5.598,346,4.575,347,6.299,348,5.293,349,5.293,350,5.598,351,7.47,352,4.579,353,5.293,354,5.293,355,5.293]],["title/modules/AppModule.html",[273,1.534,356,2.719]],["body/modules/AppModule.html",[2,2.27,3,0.147,4,0.126,5,0.126,7,0.278,13,1.065,25,0.016,34,0.278,37,2.821,39,1.11,40,0.565,41,0.233,42,0.35,44,1.065,83,0.244,90,0.755,95,1.11,107,2.487,110,0.147,111,0.085,146,0.012,147,0.012,238,1.548,273,2.87,274,4.818,275,2.237,276,3.038,282,3.632,283,2.821,284,2.821,286,3.894,294,3.408,317,3.574,324,3.268,343,4.655,346,4.494,352,3.983,356,5.536,357,3.983,358,3.983,359,3.983,360,4.818,361,4.605,362,4.605,363,5.93,364,6.926,365,4.605,366,4.605,367,4.605,368,6.559,369,4.605,370,4.605,371,3.983,372,3.574,373,5.93,374,4.605,375,4.605,376,4.605,377,4.605,378,5.93,379,4.605,380,4.605,381,3.983,382,5.93,383,4.605,384,5.93,385,4.605,386,3.983,387,3.268,388,4.605,389,4.605,390,4.605,391,4.605,392,4.605,393,4.605]],["title/injectables/AppService.html",[217,0.815,346,2.347]],["body/injectables/AppService.html",[3,0.173,4,0.148,5,0.148,7,0.327,12,0.3,13,1.518,25,0.016,34,0.327,40,0.922,44,1.768,83,0.209,90,0.887,110,0.173,111,0.102,131,1.201,146,0.013,147,0.013,170,1.866,217,1.396,218,2.072,346,4.018,347,6.348,394,4.682,395,7.64,396,5.413,397,7.059,398,6.561,399,5.413,400,5.413,401,4.682,402,5.413]],["title/controllers/AssetController.html",[0,0.886,403,2.973]],["body/controllers/AssetController.html",[0,1.172,2,1.088,3,0.091,4,0.078,5,0.078,7,0.455,8,1.776,10,1.776,12,0.158,13,0.98,14,3.266,15,1.748,16,1.354,17,1.47,19,1.273,20,0.98,21,0.98,22,0.744,24,0.941,25,0.016,29,3.187,30,1.863,31,1.424,32,2.469,33,1.863,34,0.381,36,1.863,39,1.448,40,0.736,41,0.304,42,0.457,43,1.617,44,1.659,45,1.583,47,2.434,48,3.114,51,0.793,52,1.939,55,2.126,56,1.249,58,1.306,59,1.664,61,0.744,62,1.47,63,1.249,64,2.469,65,1.249,67,1.47,68,1.221,69,0.744,70,0.662,72,1.856,74,1.255,75,1.956,76,3.287,79,2.249,81,1.863,82,1.486,83,0.214,84,1.191,85,1.249,86,0.744,87,1.109,88,1.709,89,1.191,90,0.465,91,2.949,92,3.068,93,1.249,94,1.138,95,0.685,96,0.201,97,0.744,101,1.191,102,1.455,105,1.138,106,1.191,107,1.191,110,0.091,111,0.041,112,0.744,113,0.714,114,1.03,116,0.714,117,1.138,118,1.863,121,2.869,122,1.723,123,1.863,124,1.249,131,1.448,132,2.469,134,1.863,140,1.249,141,1.249,143,1.249,144,1.249,146,0.009,147,0.009,154,1.109,160,1.539,403,3.287,404,2.457,405,5.114,406,4.236,407,6.525,408,1.539,409,5.065,410,2.841,411,1.455,412,2.841,413,4.381,414,2.841,415,1.455,416,2.841,417,2.841,418,2.782,419,2.841,420,1.455,421,2.841,422,1.74,423,2.205,424,2.841,425,4.236,426,1.455,427,1.455,428,2.841,429,3.985,430,2.841,431,2.841,432,1.455,433,2.841,434,2.841,435,2.841,436,4.236,437,2.782,438,2.841,439,2.841,440,4.236,441,2.841,442,2.457,443,2.457,444,2.841,445,2.841,446,2.841]],["title/entities/AssetEntity.html",[148,0.333,447,2.202]],["body/entities/AssetEntity.html",[3,0.095,4,0.082,5,0.082,7,0.348,12,0.166,24,1.161,25,0.016,34,0.47,40,0.705,41,0.393,42,0.611,51,0.823,70,0.813,83,0.14,96,0.211,110,0.095,111,0.043,146,0.009,147,0.009,148,0.5,150,0.72,152,0.935,153,1.57,154,1.151,155,3.411,157,2.692,158,0.626,160,2.825,161,4.512,167,4.598,168,3.342,170,2.249,171,2.119,175,1.25,178,1.542,179,1.047,181,1.047,196,2.82,198,1.843,203,3.119,405,4.354,447,2.526,448,2.582,449,5.216,450,5.216,451,5.216,452,5.216,453,5.216,454,5.216,455,5.216,456,5.216,457,5.216,458,5.216,459,5.216,460,5.216,461,5.216,462,5.216,463,5.216,464,5.216,465,5.216,466,5.216,467,5.216,468,5.216,469,5.216,470,2.985,471,2.985,472,2.985,473,2.985,474,2.985,475,2.985,476,2.985,477,2.985,478,2.985,479,2.985,480,2.985,481,1.196,482,2.526,483,2.985,484,2.985,485,2.985,486,2.985,487,3.119,488,4.083,489,4.083,490,4.083,491,4.083,492,2.985,493,2.985,494,2.985,495,2.985,496,2.985,497,2.985,498,2.985,499,2.985,500,2.985,501,2.985,502,3.119]],["title/injectables/AssetService.html",[217,0.815,429,2.719]],["body/injectables/AssetService.html",[3,0.098,4,0.085,5,0.085,7,0.272,12,0.171,13,1.352,15,1.768,16,1.086,17,1.53,19,1.131,20,1.352,21,1.041,22,1.179,25,0.016,34,0.415,37,2.757,39,1.565,40,0.796,41,0.328,42,0.493,43,1.656,44,1.703,45,1.833,50,2.587,51,1.215,55,1.923,58,1.39,59,1.923,61,0.808,62,1.179,67,0.808,68,0.744,69,1.179,70,0.772,74,1.334,82,1.579,83,0.227,86,0.808,87,1.53,88,1.798,90,0.506,95,0.744,96,0.318,97,0.808,110,0.098,111,0.077,112,1.627,113,1.469,114,1.148,116,1.469,122,0.775,125,2.34,127,2.129,131,1.487,146,0.009,147,0.009,152,0.958,154,1.179,158,0.641,160,1.671,217,0.958,218,1.181,221,3.894,222,1.979,223,1.356,224,2.946,225,2.569,226,2.853,231,1.979,238,1.037,239,1.082,241,1.979,242,1.356,243,1.181,244,1.294,245,1.356,246,1.356,249,1.424,252,1.883,253,1.979,254,1.424,255,1.356,256,1.979,259,1.356,260,1.294,261,1.979,262,1.356,263,1.356,264,1.356,265,1.424,266,1.979,267,1.356,268,1.356,269,1.356,270,1.356,271,1.356,272,1.356,405,4.835,413,5.055,418,3.837,422,2.757,429,4.147,447,1.773,503,2.669,504,4.502,505,4.502,506,4.502,507,5.199,508,3.085,509,3.085,510,3.085,511,3.085,512,3.085,513,3.494,514,3.085,515,3.085,516,4.502,517,2.394,518,2.669,519,1.499,520,1.499,521,3.085,522,3.085,523,1.671,524,1.58,525,2.394,526,1.499,527,3.085,528,3.085,529,3.085]],["title/controllers/CustomerController.html",[0,0.886,530,2.973]],["body/controllers/CustomerController.html",[0,1.309,2,1.105,3,0.092,4,0.079,5,0.079,7,0.453,8,2.826,9,3.327,10,1.798,12,0.16,13,0.992,14,3.252,15,1.744,16,1.365,17,1.482,18,1.979,19,1.285,20,0.992,21,1.183,22,0.756,24,0.946,25,0.016,26,2.048,27,2.048,29,3.164,30,1.885,31,1.441,32,2.488,33,1.885,34,0.383,36,1.885,38,2.463,39,1.458,40,0.741,41,0.286,42,0.46,43,1.528,44,1.665,45,1.592,48,3.08,52,1.958,53,1.333,55,2.076,56,1.885,58,1.311,59,1.27,61,0.756,62,1.482,63,1.269,64,2.488,65,1.269,67,1.482,68,1.233,69,0.756,70,0.563,72,2.215,74,2.076,75,3.235,79,2.266,81,1.885,83,0.219,84,1.798,85,1.269,86,0.756,87,1.123,88,1.718,89,1.21,90,0.473,91,2.884,92,3.027,93,1.269,94,1.156,95,0.696,96,0.204,97,0.756,98,1.563,99,1.563,101,1.21,102,1.478,105,1.156,106,1.21,107,1.21,110,0.092,111,0.042,112,0.756,113,0.725,114,0.495,116,0.725,117,1.156,118,1.885,119,1.768,121,2.786,122,1.693,123,1.885,124,1.269,131,1.406,132,2.248,134,1.269,135,1.333,140,1.269,141,1.269,143,1.269,144,1.269,146,0.009,147,0.009,411,1.478,415,1.478,418,5.097,420,1.478,422,1.768,423,2.24,426,1.478,427,1.478,432,1.478,530,3.327,531,2.497,532,3.968,533,5.674,534,5.113,535,2.886,536,2.886,537,4.287,538,4.287,539,2.886,540,2.886,541,2.886,542,2.886,543,4.287,544,3.327,545,2.497,546,4.016,547,2.886,548,2.886,549,2.886,550,2.886,551,2.886,552,2.886,553,2.886,554,2.886,555,2.886,556,2.886]],["title/entities/CustomerEntity.html",[148,0.333,557,2.516]],["body/entities/CustomerEntity.html",[3,0.158,4,0.136,5,0.136,7,0.299,12,0.274,16,1.496,24,0.739,25,0.016,34,0.452,40,0.831,41,0.378,42,0.599,51,1.162,83,0.198,96,0.35,110,0.158,111,0.071,146,0.012,147,0.012,148,0.589,150,1.193,152,1.321,153,1.693,158,0.884,170,2.24,175,1.407,178,2.177,179,1.735,180,1.812,181,1.735,196,2.729,198,2.603,418,4.908,481,2.485,482,3.566,532,3.839,557,4.075,558,4.279,559,5.866,560,6.781,561,5.263,562,6.781,563,6.781,564,4.947,565,4.947,566,4.947,567,4.947,568,4.947,569,4.947]],["title/injectables/CustomerService.html",[217,0.815,546,2.719]],["body/injectables/CustomerService.html",[3,0.105,4,0.09,5,0.09,7,0.198,12,0.182,13,1.391,15,1.757,16,1.134,17,1.574,19,1.182,20,1.391,21,1.088,22,1.232,25,0.016,34,0.413,39,1.535,40,0.78,41,0.322,42,0.484,43,1.684,44,1.69,45,1.835,51,1.125,55,1.782,58,1.367,59,1.782,61,0.859,62,1.232,67,0.859,68,0.791,69,1.232,70,0.752,74,1.394,82,1.65,83,0.23,86,0.859,87,1.574,88,1.787,90,0.537,95,0.791,96,0.333,97,0.859,110,0.105,111,0.079,112,1.667,113,1.511,114,1.17,116,1.511,122,0.824,125,2.408,127,2.204,131,1.47,146,0.009,147,0.009,152,1.001,154,1.232,158,0.67,217,1.001,218,1.255,222,2.069,223,1.442,224,3.001,225,2.644,226,2.913,228,2.882,231,2.069,238,1.102,239,1.15,241,2.069,242,1.442,243,1.255,244,1.375,245,1.442,246,1.442,249,1.514,250,1.514,252,1.937,253,2.069,254,1.514,255,1.442,256,2.069,259,1.442,260,1.375,261,2.069,262,1.442,263,1.442,264,1.442,265,1.514,266,2.069,267,1.442,268,1.442,269,1.442,270,1.442,271,1.442,272,1.442,418,4.796,422,2.882,519,1.593,520,1.593,523,1.776,524,1.68,525,2.545,526,1.593,532,3.651,533,5.903,545,2.836,546,4.267,557,2.153,570,2.836,571,4.705,572,3.279,573,3.279,574,3.279,575,3.279,576,3.279,577,4.07,578,4.705,579,2.836,580,3.279]],["title/controllers/EventDetailController.html",[0,0.886,581,2.973]],["body/controllers/EventDetailController.html",[0,1.166,2,1.078,3,0.09,4,0.077,5,0.077,7,0.451,8,1.765,12,0.156,13,0.974,14,3.238,15,1.737,16,1.514,17,1.464,18,1.943,19,1.266,20,0.974,21,0.974,22,0.737,24,0.938,25,0.016,26,1.998,27,4.246,29,3.147,30,1.85,31,1.414,32,2.458,33,1.85,34,0.38,36,1.85,39,1.443,40,0.734,41,0.283,42,0.455,43,1.613,44,1.656,45,1.578,46,2.185,47,2.418,48,3.062,52,1.929,53,1.3,54,2.185,55,2.064,56,1.85,58,1.379,61,0.737,62,1.464,63,1.238,64,2.458,65,1.238,67,1.464,68,1.215,69,0.737,70,0.692,71,2.185,72,2.192,74,1.247,75,1.943,77,0.946,78,2.185,79,2.239,81,1.238,82,1.476,83,0.218,84,1.765,85,1.238,86,0.737,87,1.102,88,1.752,89,1.181,90,0.461,91,2.861,92,3.007,93,1.238,94,1.128,95,0.679,96,0.199,97,0.737,98,1.525,99,1.525,101,1.181,102,1.442,103,3.309,105,1.128,106,1.181,107,1.181,110,0.09,111,0.041,112,0.737,113,0.708,114,0.864,116,0.708,117,1.128,118,1.85,119,3.665,121,2.76,122,1.681,123,1.85,124,1.238,125,1.128,126,2.435,127,1.128,128,3.64,129,2.435,130,2.435,131,1.393,132,2.215,133,2.435,134,1.238,135,1.3,136,2.435,137,1.442,138,1.442,139,2.435,140,1.238,141,1.238,142,2.435,143,1.238,144,1.238,145,2.435,146,0.008,147,0.008,544,4.339,581,3.266,582,2.435,583,5.557,584,5.628,585,5.039,586,5.858,587,2.816,588,2.816,589,2.816,590,2.816,591,2.816,592,2.816,593,2.435,594,1.725,595,2.435,596,2.986,597,2.816,598,2.816,599,2.816,600,5.983]],["title/injectables/EventDetailService.html",[217,0.815,596,2.719]],["body/injectables/EventDetailService.html",[3,0.104,4,0.09,5,0.09,7,0.198,12,0.182,13,1.389,15,1.756,16,1.133,17,1.573,19,1.18,20,1.389,21,1.087,22,1.23,25,0.016,34,0.412,39,1.534,40,0.78,41,0.322,42,0.484,43,1.645,44,1.689,45,1.835,51,0.879,55,1.78,58,1.413,59,1.962,60,2.519,61,0.857,62,1.23,67,0.857,68,0.789,69,1.23,70,0.783,74,1.392,77,1.579,82,1.648,83,0.227,86,0.857,87,1.573,88,1.827,90,0.536,95,0.789,96,0.332,97,0.857,110,0.104,111,0.086,112,1.666,113,1.509,114,1.09,116,1.509,122,0.822,125,2.201,127,2.201,131,1.469,146,0.009,147,0.009,152,1,154,1.23,158,0.669,217,1,218,1.252,222,2.065,223,1.438,224,2.999,225,2.641,226,2.911,231,2.065,238,1.1,239,1.148,241,2.065,242,1.438,243,1.252,244,1.372,245,1.438,246,1.438,249,1.511,250,1.511,251,2.539,252,1.935,253,2.065,254,1.511,255,1.438,256,2.065,257,1.676,258,1.676,259,1.438,260,1.372,261,2.065,262,1.438,263,1.438,264,1.438,265,1.511,266,2.065,267,1.438,268,1.438,269,1.438,270,1.438,271,1.438,272,1.438,544,3.645,583,5.043,584,5.899,586,2.539,593,2.83,594,2.004,595,2.83,596,3.9,601,2.83,602,4.697,603,4.697,604,3.271,605,4.697,606,3.271,607,4.697,608,3.271,609,3.271,610,3.271,611,4.697,612,3.271]],["title/entities/EventDetailsEntity.html",[148,0.333,594,2.347]],["body/entities/EventDetailsEntity.html",[3,0.124,4,0.106,5,0.106,7,0.235,12,0.215,24,1.044,25,0.016,31,1.305,34,0.465,40,0.739,41,0.393,42,0.606,70,0.77,83,0.206,96,0.275,110,0.124,111,0.056,146,0.011,147,0.011,148,0.524,150,0.936,152,1.127,153,1.445,158,0.754,168,2.221,170,2.209,175,1.714,176,2.231,178,1.858,179,1.362,180,1.422,181,1.362,196,2.328,197,2.221,198,2.715,238,1.78,481,2.121,482,3.043,487,3.758,488,4.594,489,4.594,490,4.594,491,4.594,502,3.758,594,3.243,613,3.358,614,6.775,615,6.026,616,5.213,617,6.026,618,6.026,619,6.026,620,6.026,621,6.026,622,5.213,623,6.026,624,5.213,625,6.026,626,6.026,627,5.213,628,3.882,629,3.882,630,3.882,631,4.277,632,5.295,633,4.58,634,2.712,635,3.882,636,3.882,637,3.882,638,3.882,639,3.882,640,5.258,641,2.712,642,3.965,643,3.882,644,3.882,645,2.712,646,4.11,647,3.882,648,3.882,649,3.882,650,3.882,651,3.358,652,3.882,653,3.358]],["title/entities/EventParamDetailsEntity.html",[148,0.333,631,2.719]],["body/entities/EventParamDetailsEntity.html",[3,0.152,4,0.131,5,0.131,7,0.289,12,0.265,20,1.106,21,1.106,24,0.907,25,0.016,31,1.607,34,0.425,41,0.367,42,0.579,70,0.669,83,0.224,96,0.338,110,0.152,111,0.069,146,0.012,147,0.012,148,0.58,150,1.153,152,1.293,153,1.658,158,0.865,170,1.727,175,1.727,178,2.131,179,1.677,180,1.752,181,1.677,193,2.59,195,3.29,196,3.088,197,2.547,198,2.547,212,2.323,213,3.111,215,3.711,216,2.59,238,2.042,583,4.311,594,3.721,622,5.775,631,4.985,633,5.775,640,5.627,641,2.449,642,4.302,651,4.136,653,4.136,654,4.136,655,6.676,656,6.074,657,6.676,658,6.676,659,6.074,660,4.136,661,6.074,662,4.782,663,4.782,664,4.782,665,4.782,666,4.782]],["title/entities/FlighLocationEntity.html",[148,0.333,667,2.719]],["body/entities/FlighLocationEntity.html",[3,0.102,4,0.087,5,0.087,7,0.193,12,0.177,20,0.737,21,0.737,24,1.055,25,0.016,34,0.472,40,0.664,41,0.401,42,0.612,51,0.862,68,1.305,70,0.864,83,0.173,96,0.225,110,0.102,111,0.046,114,0.79,146,0.009,147,0.009,148,0.47,150,0.768,152,0.98,153,1.257,154,1.206,158,0.656,167,2.647,168,3.077,170,2.038,175,1.866,178,1.616,179,1.117,180,1.167,181,1.117,193,1.725,195,2.495,196,2.608,197,1.932,198,3.077,212,1.547,213,2.36,215,2.471,216,1.725,487,3.269,488,4.209,489,4.209,490,4.209,491,4.209,502,3.269,616,4.682,627,4.682,641,3.224,645,3.672,646,5.563,660,2.754,667,3.269,668,2.754,669,5.931,670,4.607,671,5.412,672,5.412,673,5.412,674,5.412,675,5.412,676,5.412,677,5.412,678,4.682,679,5.412,680,5.412,681,5.412,682,5.412,683,5.412,684,5.412,685,5.412,686,5.412,687,5.412,688,5.412,689,5.412,690,3.184,691,3.184,692,3.184,693,3.184,694,3.184,695,3.184,696,3.184,697,3.184,698,4.209,699,4.607,700,4.607,701,4.607,702,3.184,703,3.184,704,3.184,705,3.184,706,3.184,707,3.184,708,3.184,709,3.184,710,3.184,711,3.184,712,3.184,713,3.184,714,3.184,715,3.184,716,3.184,717,3.184,718,3.184,719,3.184]],["title/entities/FlighPlanEntity.html",[148,0.333,698,2.719]],["body/entities/FlighPlanEntity.html",[3,0.155,4,0.133,5,0.133,7,0.294,12,0.27,24,1.056,25,0.016,34,0.427,41,0.369,42,0.566,83,0.214,96,0.344,110,0.155,111,0.07,146,0.012,147,0.012,148,0.585,150,1.173,152,1.306,153,1.675,158,0.874,163,4.206,170,2.01,175,1.746,176,3.528,178,2.154,179,1.706,180,1.781,181,1.706,196,3.272,198,3.121,481,2.83,624,5.82,641,2.491,645,3.145,646,4.765,667,5.015,678,5.311,698,4.357,720,4.206,721,6.139,722,6.728,723,6.728,724,6.728,725,3.828,726,4.863,727,6.139,728,6.139,729,4.863,730,4.863,731,4.863,732,4.863,733,4.863]],["title/entities/GeoObjectEntity.html",[148,0.333,734,2.719]],["body/entities/GeoObjectEntity.html",[3,0.154,4,0.133,5,0.133,7,0.293,12,0.269,24,0.915,25,0.016,34,0.45,41,0.39,42,0.591,70,0.675,83,0.214,96,0.343,101,2.817,110,0.154,111,0.07,114,1.05,146,0.012,147,0.012,148,0.584,150,1.169,152,1.304,153,1.672,154,1.604,158,0.873,170,2.173,175,1.378,178,2.149,179,1.7,180,1.775,181,1.7,197,2.569,481,2.453,634,3.138,725,3.318,734,4.348,735,4.192,736,7.28,737,4.023,738,5.811,739,6.718,740,6.718,741,4.78,742,6.718,743,4.846,744,4.846,745,4.846,746,6.126,747,4.846,748,4.846,749,4.846,750,2.968,751,4.846]],["title/entities/GeofenceAssetEntity.html",[148,0.333,752,2.516]],["body/entities/GeofenceAssetEntity.html",[3,0.152,4,0.131,5,0.131,7,0.289,12,0.265,24,1.083,25,0.016,34,0.438,40,0.585,41,0.367,42,0.589,58,1.249,70,0.773,83,0.213,96,0.338,110,0.152,111,0.069,146,0.012,147,0.012,148,0.61,150,1.151,152,1.291,153,1.656,158,0.864,175,1.358,193,2.586,212,2.319,213,3.108,216,2.586,405,4.38,447,2.743,645,3.596,750,2.924,752,3.985,753,4.129,754,7.247,755,5.77,756,4.086,757,4.086,758,3.802,759,3.717,760,4.774,761,5.249,762,4.774,763,4.306,764,6.068,765,4.774,766,3.985,767,3.985,768,4.774,769,4.086,770,4.774,771,3.985,772,3.985,773,4.774,774,3.135,775,3.135,776,4.129,777,3.705,778,4.774]],["title/controllers/GeofenceController.html",[0,0.886,779,2.973]],["body/controllers/GeofenceController.html",[0,1.309,2,1.105,3,0.092,4,0.079,5,0.079,7,0.453,8,1.798,12,0.16,13,0.992,14,3.252,15,1.744,16,1.528,17,1.482,18,1.979,19,1.285,20,0.992,21,1.309,22,0.756,24,0.946,25,0.016,29,3.164,30,1.885,31,1.441,32,2.488,33,1.885,34,0.383,36,1.885,39,1.458,40,0.741,41,0.286,42,0.46,43,1.689,44,1.665,45,1.592,48,3.08,52,1.958,53,1.333,55,2.133,56,1.885,58,1.403,61,0.756,62,1.482,63,1.269,64,2.488,65,1.269,67,1.482,68,1.233,69,0.756,70,0.698,72,2.215,74,1.27,75,1.979,77,0.97,79,2.266,81,1.269,83,0.215,84,1.798,85,1.269,86,0.756,87,1.123,88,1.765,89,1.21,90,0.473,91,2.884,92,3.027,93,1.269,94,1.156,95,0.696,96,0.204,97,0.756,105,1.156,106,1.21,107,1.21,110,0.092,111,0.042,112,0.756,113,0.725,114,1.036,116,0.725,117,1.156,118,1.885,121,2.786,122,1.693,123,1.885,124,1.269,131,1.406,132,2.248,134,1.269,135,1.333,137,1.478,138,1.478,140,1.269,141,1.269,143,1.269,144,1.269,146,0.009,147,0.009,189,2.266,408,1.563,411,1.478,415,1.478,420,1.478,426,1.478,427,1.478,432,1.478,758,1.563,779,3.327,780,2.497,781,5.097,782,5.674,783,4.287,784,2.886,785,2.886,786,4.667,787,2.886,788,2.886,789,2.886,790,1.768,791,2.24,792,2.886,793,1.478,794,1.478,795,1.478,796,1.478,797,1.478,798,1.478,799,2.497,800,2.497,801,4.016,802,2.886,803,2.886,804,2.886,805,2.886,806,2.886,807,2.886,808,2.886,809,2.886,810,2.886]],["title/entities/GeofenceEntity.html",[148,0.333,758,2.075]],["body/entities/GeofenceEntity.html",[3,0.096,4,0.083,5,0.083,7,0.389,12,0.168,24,1.138,25,0.016,31,1.49,34,0.461,40,0.88,41,0.387,42,0.605,51,0.83,52,1.156,70,0.826,83,0.205,96,0.214,110,0.096,111,0.043,114,0.76,146,0.009,147,0.009,148,0.456,150,0.728,152,0.943,153,1.209,154,1.161,158,0.631,160,2.844,167,2.547,168,2.97,170,2.065,171,4.105,175,1.493,176,1.736,178,1.555,179,1.059,180,1.106,181,1.059,189,1.775,195,3.133,196,2.544,197,2.701,198,2.426,238,2.164,239,1.555,405,2.91,481,1.775,482,2.547,487,3.145,488,4.105,489,4.105,490,4.105,491,4.105,502,3.145,634,2.27,641,2.963,642,4.181,737,2.91,738,4.542,752,3.448,758,2.401,763,5.431,781,4.045,811,2.612,812,4.432,813,4.542,814,5.251,815,5.251,816,5.251,817,5.251,818,5.251,819,5.251,820,5.251,821,3.834,822,5.251,823,5.251,824,5.251,825,5.251,826,5.251,827,4.432,828,3.02,829,3.834,830,3.02,831,3.02,832,5.004,833,4.432,834,3.02,835,3.834,836,3.834,837,3.02,838,4.432,839,3.02,840,4.432,841,3.02,842,4.432,843,3.02,844,4.432,845,3.02,846,4.432,847,3.02,848,4.432,849,3.02,850,3.02,851,3.448,852,4.432,853,3.02,854,5.004,855,3.02,856,5.004,857,4.432,858,5.785,859,3.02,860,4.432,861,3.02,862,4.432,863,3.02,864,4.432,865,3.02,866,4.432,867,3.02,868,3.02,869,3.02,870,3.02,871,3.02,872,3.02,873,3.02,874,3.02,875,3.02]],["title/entities/GeofenceNotificationEntity.html",[148,0.333,851,2.516]],["body/entities/GeofenceNotificationEntity.html",[3,0.15,4,0.129,5,0.129,7,0.284,12,0.261,24,1.077,25,0.016,34,0.436,40,0.576,41,0.365,42,0.587,58,1.239,70,0.769,83,0.191,96,0.332,110,0.15,111,0.068,114,1.029,146,0.012,147,0.012,148,0.606,150,1.132,152,1.278,154,1.572,158,0.855,175,1.335,189,3.07,193,2.543,197,1.969,212,2.281,213,3.076,216,2.543,577,5.194,634,3.076,645,3.574,756,4.055,757,4.055,758,3.779,759,3.678,761,5.194,763,4.261,766,3.943,767,3.943,769,4.055,771,3.943,772,3.943,774,3.083,775,3.083,777,3.644,781,4.843,851,3.943,876,4.062,877,5.726,878,4.696,879,4.696,880,6.005,881,3.644,882,4.696,883,4.66,884,4.696,885,4.696,886,4.696]],["title/injectables/GeofenceService.html",[217,0.815,801,2.719]],["body/injectables/GeofenceService.html",[3,0.084,4,0.072,5,0.072,7,0.16,12,0.147,13,0.929,15,1.698,16,1.306,17,1.418,19,1.009,20,1.253,21,0.929,22,1.051,25,0.017,34,0.385,37,2.458,39,1.404,40,0.714,41,0.295,42,0.443,43,1.583,44,1.611,45,1.75,50,3.113,51,0.751,58,1.435,59,1.817,60,2.271,61,0.692,62,1.051,67,0.692,68,0.638,69,1.051,70,0.74,77,1.349,82,1.408,83,0.237,86,0.692,87,1.418,88,1.824,90,0.433,95,0.638,96,0.284,97,0.692,101,1.109,102,1.354,110,0.084,111,0.078,112,1.719,113,1.361,114,0.998,116,1.361,122,1.361,125,2.332,127,2.332,131,1.414,146,0.008,147,0.008,152,0.854,158,0.572,189,2.332,217,0.854,218,1.012,222,1.765,223,1.163,224,3.227,225,2.382,226,2.695,228,2.458,231,1.765,238,0.889,239,0.928,241,1.765,242,1.163,243,1.012,244,1.109,245,1.163,246,1.163,250,1.221,252,1.563,253,1.765,255,1.163,256,1.163,257,1.354,258,1.354,259,1.163,260,1.109,261,1.765,262,1.163,263,1.163,264,1.163,265,1.221,266,1.765,267,1.163,268,1.163,269,1.163,270,1.163,271,2.133,272,1.163,447,1.52,518,2.287,519,1.285,520,1.285,524,2.056,526,1.285,557,1.736,579,2.287,737,2.636,752,1.736,755,3.472,758,2.174,781,4.82,782,5.51,799,2.287,800,2.287,801,2.848,851,1.736,877,3.472,887,2.287,888,5.416,889,5.416,890,4.685,891,4.014,892,2.636,893,2.644,894,2.644,895,2.636,896,2.644,897,2.644,898,2.644,899,4.014,900,1.52,901,2.052,902,1.52,903,2.052,904,2.644,905,1.432,906,2.052,907,2.644,908,2.644,909,2.287,910,2.287,911,2.052,912,4.014,913,5.416,914,5.416,915,5.416,916,5.416,917,4.014,918,2.644,919,2.644,920,4.014,921,4.014,922,4.014,923,4.014,924,4.014,925,4.014,926,4.014,927,4.014,928,4.014,929,4.014,930,4.014,931,4.014,932,4.014,933,4.014,934,4.014,935,4.014,936,2.644,937,2.644,938,2.644,939,2.644,940,2.644,941,2.644,942,2.644,943,2.644]],["title/controllers/GroupController.html",[0,0.886,944,2.973]],["body/controllers/GroupController.html",[0,1.185,2,1.108,3,0.092,4,0.079,5,0.079,7,0.453,8,1.802,10,1.802,12,0.161,13,0.994,14,3.254,15,1.744,16,1.529,17,1.484,18,1.984,19,1.287,20,0.994,21,1.311,22,0.758,24,0.947,25,0.016,26,2.055,27,4.297,29,3.166,30,1.889,31,1.444,32,2.492,33,1.889,34,0.384,36,1.889,39,1.46,40,0.742,41,0.287,42,0.46,43,1.69,44,1.666,45,1.594,46,2.247,48,3.082,52,1.961,53,1.337,54,2.247,55,2.134,56,1.889,58,1.404,59,1.68,61,0.758,62,1.484,63,1.273,64,2.492,65,1.273,67,1.484,68,1.235,69,0.758,70,0.699,71,2.247,72,2.218,74,1.273,75,1.984,77,0.973,78,2.247,79,2.27,81,1.273,83,0.215,84,1.802,85,1.273,86,0.758,87,1.125,88,1.766,89,1.214,90,0.474,91,2.887,92,3.029,93,1.273,94,1.159,95,0.698,96,0.205,97,0.758,98,1.568,99,1.568,101,1.214,102,1.483,105,1.159,106,1.214,107,1.214,110,0.092,111,0.042,112,0.758,113,0.728,114,0.878,116,0.728,117,1.159,118,1.889,119,3.708,121,2.789,122,1.695,123,1.889,124,1.273,131,1.407,132,2.252,134,1.273,135,1.337,137,1.483,138,1.483,140,1.273,141,1.273,143,1.273,144,1.273,146,0.009,147,0.009,944,3.334,945,2.504,946,6.056,947,5.68,948,5.123,949,2.895,950,2.895,951,2.895,952,2.895,953,2.895,954,2.895,955,2.504,956,4.022,957,2.895,958,2.895,959,2.895,960,2.895,961,6.054,962,2.895,963,2.895,964,2.895,965,2.895,966,2.895,967,2.895]],["title/entities/GroupEntity.html",[148,0.333,968,2.719]],["body/entities/GroupEntity.html",[3,0.172,4,0.147,5,0.147,7,0.326,12,0.299,24,0.804,25,0.016,34,0.326,40,0.863,41,0.272,42,0.497,83,0.208,96,0.381,110,0.172,111,0.078,114,1.121,146,0.013,147,0.013,148,0.612,150,1.298,152,1.391,153,1.784,154,1.712,158,0.931,170,1.859,175,1.531,178,2.294,179,1.888,180,1.972,181,1.888,196,2.875,198,2.742,481,2.618,482,3.757,793,2.757,794,2.757,795,2.757,796,2.757,797,2.757,798,2.757,946,5.922,968,4.64,969,4.656,970,5.383,971,5.383]],["title/injectables/GroupService.html",[217,0.815,956,2.719]],["body/injectables/GroupService.html",[3,0.103,4,0.088,5,0.088,7,0.195,12,0.178,13,1.379,15,1.752,16,1.119,17,1.56,19,1.166,20,1.379,21,1.073,22,1.215,25,0.016,34,0.41,39,1.524,40,0.775,41,0.32,42,0.48,43,1.732,44,1.683,45,1.828,50,3.425,51,1.116,58,1.418,59,1.951,60,2.499,61,0.842,62,1.215,67,0.842,68,0.776,69,1.215,70,0.78,74,1.375,77,1.56,82,1.628,83,0.229,86,0.842,87,1.56,88,1.819,90,0.527,95,0.776,96,0.328,97,0.842,110,0.103,111,0.078,112,1.655,113,1.497,114,1.213,116,1.497,122,0.808,125,2.18,127,2.18,131,1.461,146,0.009,147,0.009,152,0.987,154,1.215,158,0.661,217,0.987,218,1.231,222,2.04,223,1.414,224,2.984,225,2.62,226,2.894,231,2.04,238,1.081,239,1.128,241,2.04,242,1.414,243,1.231,244,1.349,245,1.414,246,1.414,249,1.485,250,1.485,251,2.496,252,1.92,253,2.04,254,1.485,255,1.414,256,2.04,257,1.648,258,1.648,259,1.414,260,1.349,261,2.04,262,1.414,263,1.414,264,1.414,265,1.485,266,2.04,267,1.414,268,1.414,269,1.414,270,1.414,271,1.414,272,1.414,519,1.562,520,1.562,526,1.562,892,3.047,895,3.913,946,5.266,947,5.87,955,2.782,956,4.93,968,2.283,972,2.782,973,4.64,974,3.216,975,3.216,976,3.216,977,3.216,978,3.216,979,4.64,980,3.216,981,3.216]],["title/modules/HttpConfigModule.html",[273,1.534,982,2.719]],["body/modules/HttpConfigModule.html",[3,0.169,4,0.145,5,0.145,25,0.016,83,0.238,90,0.867,110,0.169,111,0.076,146,0.013,147,0.013,152,1.126,273,2.592,275,2.571,276,3.315,281,4.759,282,3.964,283,3.242,284,3.242,286,3.476,287,4.593,288,3.242,289,3.476,290,3.757,291,3.242,292,4.961,293,3.757,294,3.042,295,3.757,296,3.757,297,3.757,298,3.757,982,5.393,983,4.579,984,4.579,985,6.72,986,5.293,987,5.293,988,5.293,989,5.293,990,5.293,991,4.579,992,5.293,993,5.293]],["title/controllers/LandmarkController.html",[0,0.886,994,2.973]],["body/controllers/LandmarkController.html",[0,1.187,2,1.112,3,0.093,4,0.08,5,0.08,7,0.454,8,2.38,10,1.806,12,0.161,13,0.996,14,3.255,15,1.745,16,1.369,17,1.486,18,1.988,19,1.29,20,0.996,21,0.996,22,0.76,24,0.949,25,0.016,29,3.168,30,1.893,31,1.447,32,2.496,33,1.893,34,0.384,36,1.893,38,2.475,39,1.462,40,0.743,41,0.287,42,0.461,43,1.692,44,1.667,45,1.596,47,2.475,48,3.085,52,1.965,53,1.341,55,2.079,56,1.893,58,1.386,59,1.276,60,1.806,61,0.76,62,1.486,63,1.277,64,2.496,65,1.277,67,1.486,68,1.237,69,0.76,70,0.7,72,2.221,75,1.988,77,0.976,79,2.273,81,1.277,82,1.51,83,0.22,84,1.806,85,1.277,86,0.76,87,1.128,88,1.768,89,1.218,90,0.476,91,2.89,92,3.032,93,1.277,94,1.163,95,0.7,96,0.205,97,0.76,98,1.573,99,1.573,101,1.218,102,1.487,105,1.163,106,1.218,107,1.218,110,0.093,111,0.042,112,0.76,113,0.73,114,0.88,116,0.73,117,1.163,118,1.893,121,2.792,122,1.696,123,1.893,124,1.277,131,1.409,132,2.256,134,1.277,135,1.341,137,1.487,138,1.487,140,1.277,141,1.277,143,1.277,144,1.277,146,0.009,147,0.009,408,1.573,411,1.487,415,1.487,420,1.487,426,1.487,427,1.487,432,1.487,741,5.101,790,1.779,793,1.487,794,1.487,795,1.487,796,1.487,797,1.487,798,1.487,994,3.342,995,2.512,996,4.439,997,5.685,998,5.132,999,2.904,1000,2.904,1001,2.904,1002,2.904,1003,2.904,1004,2.904,1005,2.512,1006,4.028,1007,2.904,1008,2.904,1009,2.904,1010,2.904,1011,2.904,1012,2.904,1013,2.904,1014,2.904,1015,2.904]],["title/entities/LandmarkEntity.html",[101,1.607,148,0.333]],["body/entities/LandmarkEntity.html",[3,0.145,4,0.124,5,0.124,7,0.275,12,0.252,24,1.066,25,0.016,34,0.431,40,0.845,41,0.349,42,0.584,51,1.1,52,1.738,58,1.1,83,0.22,96,0.321,101,2.464,110,0.145,111,0.065,146,0.012,147,0.012,148,0.566,150,1.095,152,1.25,153,1.603,154,1.539,158,0.837,168,2.889,170,1.959,175,1.291,178,2.061,179,1.592,180,1.663,181,1.592,195,3.182,197,2.889,198,2.464,212,2.854,213,2.325,216,2.459,252,2.099,481,2.759,634,3.01,641,3.01,725,3.182,734,4.623,741,4.885,750,3.599,813,5.635,835,5.082,836,5.082,900,3.959,1016,3.927,1017,7.135,1018,6.514,1019,4.54,1020,5.875,1021,4.56,1022,5.875,1023,5.875,1024,4.54,1025,3.927,1026,5.875,1027,4.54,1028,5.875,1029,4.54,1030,4.54,1031,4.54,1032,4.54]],["title/injectables/LandmarkService.html",[217,0.815,1006,2.719]],["body/injectables/LandmarkService.html",[3,0.097,4,0.084,5,0.084,7,0.374,10,1.872,12,0.169,13,1.344,15,1.738,16,1.401,17,1.522,19,1.122,20,1.033,21,1.033,22,1.169,25,0.016,34,0.404,39,1.491,40,0.758,41,0.313,42,0.47,43,1.735,44,1.664,45,1.808,51,1.362,55,1.722,58,1.445,59,2.029,60,2.87,61,0.798,62,1.169,67,0.798,68,0.735,69,1.169,70,0.769,74,1.323,77,1.5,82,2.038,83,0.226,86,0.798,87,1.522,88,1.792,90,0.5,95,0.735,96,0.316,97,0.798,101,1.279,102,1.562,110,0.097,111,0.044,112,1.62,113,1.46,114,1.144,116,1.46,122,0.766,125,2.114,127,2.114,131,1.434,146,0.009,147,0.009,158,0.636,217,0.95,218,1.167,222,1.963,223,1.341,224,2.935,225,2.555,226,2.841,231,1.963,234,3.464,236,3.559,238,1.025,239,1.07,241,1.963,242,1.341,243,1.167,244,1.279,245,1.341,246,1.341,249,1.408,250,1.408,252,1.993,253,1.963,254,1.408,255,1.341,256,1.963,257,1.562,258,1.562,259,1.341,260,1.279,261,1.963,262,1.341,263,1.341,264,1.341,265,1.408,266,1.963,267,1.341,268,1.341,269,1.341,270,1.341,271,1.341,272,1.341,519,1.481,520,1.481,523,1.651,524,1.562,526,1.481,737,2.931,741,4.933,892,2.931,910,2.637,996,5.027,997,5.774,1005,2.637,1006,4.124,1033,2.637,1034,2.931,1035,4.463,1036,3.049,1037,2.734,1038,3.464,1039,3.167,1040,3.049,1041,3.861,1042,3.049,1043,3.049,1044,3.049,1045,4.463,1046,2.002,1047,2.734]],["title/controllers/LayerController.html",[0,0.886,1048,2.973]],["body/controllers/LayerController.html",[0,0.998,2,1.114,3,0.093,4,0.08,5,0.08,7,0.454,8,2.832,10,1.808,12,0.161,13,0.998,14,3.257,15,1.746,16,1.37,17,1.488,18,1.991,19,1.291,20,0.998,21,1.314,22,0.762,24,0.949,25,0.016,29,3.169,30,1.896,31,1.449,32,2.498,33,1.896,34,0.384,36,1.896,38,2.478,39,1.463,40,0.744,41,0.287,42,0.461,43,1.629,44,1.667,45,1.597,47,2.478,48,3.086,52,1.967,53,1.344,55,2.08,56,1.896,58,1.363,61,0.762,62,1.488,63,1.279,64,2.498,65,1.279,67,1.488,68,1.239,69,0.762,70,0.7,72,1.882,74,1.278,75,1.991,77,0.978,79,2.275,81,1.279,83,0.215,84,1.808,85,1.279,86,0.762,87,1.129,88,1.769,89,1.22,90,0.477,91,2.892,92,3.033,93,1.279,94,1.165,95,0.702,96,0.206,97,0.762,105,1.165,106,1.22,107,1.22,110,0.093,111,0.074,112,0.762,113,0.731,114,0.499,116,0.731,117,1.165,118,1.896,121,2.794,122,1.697,123,1.896,124,1.279,131,1.41,132,2.259,134,1.279,135,1.344,137,1.49,138,1.49,140,1.279,141,1.279,143,1.279,144,1.279,146,0.009,147,0.009,228,1.782,252,2.509,408,1.576,411,1.49,415,1.49,420,1.49,426,1.49,427,1.49,432,1.49,507,5.104,517,2.258,790,1.782,793,1.49,794,1.49,795,1.49,796,1.49,797,1.49,798,1.49,900,1.672,901,2.258,1048,4.409,1049,2.517,1050,4.312,1051,2.91,1052,2.91,1053,2.91,1054,4.312,1055,2.91,1056,2.91,1057,2.91,1058,3.73,1059,2.91,1060,3.48,1061,2.91,1062,3.73,1063,2.91,1064,2.91,1065,2.258,1066,2.258,1067,2.258,1068,2.258,1069,2.258,1070,2.258]],["title/entities/LayerEntity.html",[148,0.333,900,2.202]],["body/entities/LayerEntity.html",[3,0.141,4,0.121,5,0.121,7,0.268,12,0.246,24,1.12,25,0.016,34,0.454,40,0.789,41,0.379,42,0.595,51,1.082,68,1.552,70,0.752,83,0.205,96,0.313,110,0.141,111,0.064,146,0.012,147,0.012,148,0.559,150,1.068,152,1.23,153,1.577,154,1.514,158,0.823,160,3.486,167,3.322,168,2.424,170,2.176,175,1.83,176,2.544,178,2.028,179,1.553,180,1.622,181,1.553,197,2.424,252,2.339,481,3.064,559,5.568,634,2.961,725,4.062,758,3.486,777,3.436,781,4.648,900,3.322,1062,3.83,1071,3.83,1072,6.436,1073,6.436,1074,6.436,1075,5.781,1076,4.427,1077,4.427,1078,4.427,1079,4.427,1080,5.781,1081,4.427,1082,4.427,1083,4.427,1084,4.427]],["title/injectables/LayerService.html",[217,0.815,1060,2.347]],["body/injectables/LayerService.html",[3,0.095,4,0.082,5,0.082,7,0.371,10,2.416,12,0.166,13,1.333,15,1.733,16,1.26,17,1.509,19,1.107,20,1.019,21,1.485,22,1.154,25,0.016,34,0.401,39,1.48,40,0.753,41,0.311,42,0.467,43,1.807,44,1.658,45,1.801,50,3.311,51,1.357,58,1.447,59,1.903,60,2.416,61,0.784,62,1.154,67,0.784,68,0.722,69,1.154,70,0.766,72,2.111,74,1.306,77,1.481,82,2.021,83,0.225,86,0.784,87,1.509,88,1.783,90,0.491,95,0.722,96,0.312,97,0.784,110,0.095,111,0.043,112,1.608,113,1.448,114,1.167,116,1.448,122,0.753,125,2.093,127,2.093,131,1.425,146,0.009,147,0.009,154,1.154,157,2.698,158,0.627,217,0.937,218,1.147,222,1.937,223,1.317,224,2.919,225,2.533,226,2.823,231,1.937,236,3.933,238,1.007,239,1.051,241,1.937,242,1.317,243,1.147,244,1.256,245,1.317,246,1.317,249,1.383,250,1.383,252,2.497,253,1.937,254,1.383,255,1.317,256,1.937,257,1.534,258,1.534,259,1.317,260,1.256,261,1.937,262,1.317,263,2.298,264,1.317,265,1.383,266,1.937,267,1.317,268,1.317,269,1.317,270,1.317,271,1.317,272,1.317,387,3.126,507,5.151,517,2.324,519,1.455,520,1.455,523,1.622,524,1.534,526,1.455,895,2.893,900,1.721,901,2.324,909,2.591,1034,2.893,1037,2.698,1046,2.893,1047,3.2,1060,3.933,1085,2.591,1086,4.405,1087,2.995,1088,2.995,1089,2.995,1090,4.405,1091,2.995,1092,2.995,1093,4.405,1094,2.995]],["title/modules/MySqlConfigModule.html",[273,1.534,1095,2.516]],["body/modules/MySqlConfigModule.html",[3,0.166,4,0.142,5,0.142,25,0.016,51,0.973,83,0.237,90,0.852,110,0.166,111,0.092,146,0.013,147,0.013,273,2.563,275,2.525,276,3.278,281,4.743,282,3.92,283,3.183,284,3.183,286,3.413,287,4.542,288,3.183,289,3.413,290,3.689,291,3.183,292,4.921,293,3.689,294,2.987,295,3.689,296,3.689,297,3.689,298,3.689,1095,4.968,1096,4.496,1097,4.496,1098,6.009,1099,5.197,1100,5.197,1101,5.197,1102,5.197,1103,5.197,1104,5.197,1105,5.197,1106,5.197,1107,5.197,1108,5.197,1109,5.197,1110,4.496,1111,5.536,1112,4.496,1113,4.496,1114,3.689]],["title/modules/MysqlDatabaseProviderModule.html",[273,1.534,1115,2.973]],["body/modules/MysqlDatabaseProviderModule.html",[3,0.168,4,0.144,5,0.144,15,1.22,25,0.016,41,0.267,51,1.209,83,0.238,90,0.864,96,0.457,110,0.168,111,0.1,146,0.013,147,0.013,150,1.272,243,2.019,273,2.913,275,2.562,294,3.711,324,3.743,1095,4.24,1098,5.645,1113,4.562,1114,3.743,1115,5.417,1116,5.274,1117,4.562,1118,5.586,1119,5.586,1120,4.562,1121,5.274,1122,5.274,1123,4.562,1124,4.562,1125,4.562,1126,4.562,1127,5.274,1128,5.274,1129,3.463,1130,5.274,1131,3.463,1132,5.274,1133,5.274,1134,4.562,1135,5.274,1136,4.562,1137,5.274,1138,4.562,1139,4.562,1140,4.562]],["title/controllers/NewLayerController.html",[0,0.886,1141,2.973]],["body/controllers/NewLayerController.html",[0,1.184,2,1.107,3,0.092,4,0.079,5,0.079,7,0.453,8,2.376,10,1.8,12,0.16,13,0.993,14,3.253,15,1.744,16,1.366,17,1.483,18,1.982,19,1.287,20,0.993,21,0.993,22,0.757,24,0.947,25,0.016,29,3.165,30,1.888,31,1.443,32,2.491,33,1.888,34,0.383,36,1.888,38,2.467,39,1.459,40,0.742,41,0.287,42,0.46,43,1.69,44,1.665,45,1.593,47,2.467,48,3.082,52,1.96,53,1.335,55,2.077,56,1.888,58,1.385,59,1.272,60,1.8,61,0.757,62,1.483,63,1.272,64,2.491,65,1.272,67,1.483,68,1.234,69,0.757,70,0.698,72,2.217,75,1.982,77,0.972,79,2.269,81,1.272,82,1.506,83,0.22,84,1.8,85,1.272,86,0.757,87,1.124,88,1.766,89,1.213,90,0.474,91,2.886,92,3.028,93,1.272,94,1.158,95,0.697,96,0.205,97,0.757,98,1.566,99,1.566,105,1.158,106,1.213,107,1.213,110,0.092,111,0.042,112,0.757,113,0.727,114,1.037,116,0.727,117,1.158,118,1.888,121,2.788,122,1.694,123,1.888,124,1.272,131,1.407,132,2.251,134,1.272,135,1.335,137,1.481,138,1.481,140,1.272,141,1.272,143,1.272,144,1.272,146,0.009,147,0.009,252,1.825,408,1.566,411,1.481,415,1.481,420,1.481,426,1.481,427,1.481,432,1.481,790,1.771,793,1.481,794,1.481,795,1.481,796,1.481,797,1.481,798,1.481,1141,3.332,1142,2.502,1143,3.713,1144,4.31,1145,2.892,1146,2.892,1147,6.026,1148,4.293,1149,2.892,1150,2.892,1151,2.892,1152,2.892,1153,2.892,1154,1.771,1155,2.502,1156,2.502,1157,3.047,1158,2.892,1159,2.892,1160,2.892,1161,2.892,1162,2.892,1163,2.892,1164,2.892,1165,2.892,1166,2.892]],["title/classes/NewLayerCreateDto.html",[111,0.055,1144,2.516]],["body/classes/NewLayerCreateDto.html",[3,0.144,4,0.124,5,0.124,7,0.274,12,0.251,24,1.091,25,0.016,34,0.442,41,0.376,42,0.592,43,1.415,58,1.289,70,0.717,74,1.929,83,0.219,94,1.815,110,0.187,111,0.103,114,1.116,146,0.012,147,0.012,153,1.237,158,0.836,168,2.461,170,1.669,203,4.165,252,2.097,265,2.093,288,2.776,645,3.527,756,3.987,757,3.987,1144,3.854,1167,4.532,1168,3.921,1169,5.631,1170,5.631,1171,4.532,1172,4.532,1173,7.782,1174,4.532,1175,5.869,1176,4.532,1177,6.509,1178,5.869,1179,4.532,1180,4.532,1181,4.532,1182,4.532,1183,4.532,1184,7.306,1185,3.921,1186,6.509,1187,3.921,1188,4.532,1189,4.532,1190,4.532,1191,4.532]],["title/entities/NewLayerDataEntity.html",[148,0.333,1192,2.719]],["body/entities/NewLayerDataEntity.html",[3,0.162,4,0.139,5,0.139,12,0.281,24,1.072,25,0.016,34,0.434,40,0.621,41,0.363,42,0.586,58,1.284,70,0.694,83,0.219,96,0.359,110,0.162,111,0.073,146,0.013,147,0.013,148,0.548,150,1.222,158,0.898,175,1.441,193,2.745,212,2.462,213,3.228,239,2.405,447,2.913,645,3.674,750,3.105,756,4.2,757,4.2,759,3.86,766,4.138,767,4.138,769,4.2,771,4.138,772,4.138,774,3.329,775,3.329,776,4.385,1154,4.394,1192,4.472,1193,4.385,1194,5.069,1195,5.069,1196,5.069,1197,6.301,1198,5.069,1199,5.069,1200,5.069]],["title/entities/NewLayerEntity.html",[148,0.333,1154,2.347]],["body/entities/NewLayerEntity.html",[3,0.161,4,0.138,5,0.138,7,0.305,12,0.28,24,1.022,25,0.016,34,0.414,41,0.346,42,0.571,43,1.65,51,1.176,83,0.218,96,0.357,110,0.161,111,0.073,114,1.077,146,0.013,147,0.013,148,0.595,150,1.216,152,1.336,153,1.714,154,1.645,158,0.895,168,3.003,170,1.786,175,1.945,176,2.898,178,2.203,179,1.769,180,1.847,181,1.769,195,3.402,197,2.634,203,4.457,239,1.769,252,2.024,481,2.515,725,3.402,741,4.701,1147,3.913,1154,3.847,1169,5.917,1170,5.917,1192,4.855,1201,4.362,1202,5.042,1203,5.042,1204,5.042,1205,5.042,1206,5.042,1207,5.042]],["title/injectables/NewLayerService.html",[217,0.815,1157,2.719]],["body/injectables/NewLayerService.html",[3,0.097,4,0.084,5,0.084,7,0.374,10,1.872,12,0.169,13,1.344,15,1.738,16,1.401,17,1.522,19,1.122,20,1.033,21,1.033,22,1.169,25,0.016,34,0.404,39,1.491,40,0.758,41,0.313,42,0.47,43,1.735,44,1.664,45,1.808,51,1.362,55,1.722,58,1.445,59,2.029,60,2.87,61,0.798,62,1.169,67,0.798,68,0.735,69,1.169,70,0.769,74,1.323,77,1.5,82,2.038,83,0.226,86,0.798,87,1.522,88,1.792,90,0.5,95,0.735,96,0.316,97,0.798,110,0.097,111,0.044,112,1.62,113,1.46,114,1.144,116,1.46,122,0.766,125,2.114,127,2.114,131,1.434,146,0.009,147,0.009,158,0.636,217,0.95,218,1.167,222,1.963,223,1.341,224,2.935,225,2.555,226,2.841,231,1.963,234,3.464,236,3.559,238,1.025,239,1.07,241,1.963,242,1.341,243,1.167,244,1.279,245,1.341,246,1.341,249,1.408,250,1.408,252,1.993,253,1.963,254,1.408,255,1.341,256,1.963,257,1.562,258,1.562,259,1.341,260,1.279,261,1.963,262,1.341,263,1.341,264,1.341,265,1.408,266,1.963,267,1.341,268,1.341,269,1.341,270,1.341,271,1.341,272,1.341,519,1.481,520,1.481,523,1.651,524,1.562,526,1.481,737,2.931,892,2.931,1034,2.931,1037,2.734,1038,3.464,1039,3.167,1041,3.861,1046,2.002,1047,2.734,1143,5.027,1144,4.383,1147,5.831,1154,1.867,1155,2.637,1156,2.637,1157,4.124,1208,2.637,1209,4.463,1210,3.049,1211,3.049,1212,3.049,1213,3.049,1214,3.049,1215,4.463,1216,3.049]],["title/controllers/NotificationController.html",[0,0.886,1217,2.973]],["body/controllers/NotificationController.html",[0,1.307,2,1.102,3,0.092,4,0.079,5,0.079,7,0.453,8,1.794,10,1.794,12,0.16,13,0.989,14,3.25,15,1.743,16,1.526,17,1.48,18,1.975,19,1.283,20,0.989,21,0.989,22,0.754,24,0.945,25,0.016,29,3.162,30,1.881,31,1.437,32,2.485,33,1.881,34,0.383,36,1.881,39,1.456,40,0.74,41,0.286,42,0.459,43,1.623,44,1.664,45,1.59,48,3.078,52,1.954,53,1.329,55,2.075,56,1.881,58,1.384,61,0.754,62,1.48,63,1.265,64,2.485,65,1.265,67,1.48,68,1.231,69,0.754,70,0.697,72,2.212,74,1.268,75,1.975,77,0.967,79,2.534,81,1.265,83,0.219,84,1.794,85,1.265,86,0.754,87,1.12,88,1.763,89,1.207,90,0.472,91,2.881,92,3.024,93,1.265,94,1.152,95,0.694,96,0.204,97,0.754,105,1.152,106,1.207,107,1.207,110,0.092,111,0.041,112,0.754,113,0.723,114,0.875,116,0.723,117,1.152,118,1.881,121,2.783,122,1.692,123,1.881,124,1.265,131,1.404,132,2.244,134,1.265,135,1.329,137,1.474,138,1.474,140,1.265,141,1.265,143,1.265,144,1.265,146,0.009,147,0.009,189,3.116,252,1.378,408,1.559,411,1.474,415,1.474,420,1.474,426,1.474,427,1.474,432,1.474,786,4.816,790,1.763,791,3.319,793,1.474,794,1.474,795,1.474,796,1.474,797,1.474,798,1.474,905,1.559,906,2.233,1060,2.62,1065,2.233,1066,2.233,1067,2.233,1068,2.233,1069,2.233,1070,2.233,1217,3.319,1218,2.489,1219,5.668,1220,2.878,1221,2.878,1222,2.878,1223,4.277,1224,2.878,1225,2.878,1226,2.878,1227,2.878,1228,2.489,1229,1.559,1230,2.042,1231,3.035,1232,2.878,1233,2.489,1234,2.878]],["title/entities/NotificationEmailEntity.html",[148,0.333,1235,2.516]],["body/entities/NotificationEmailEntity.html",[3,0.152,4,0.131,5,0.131,7,0.289,12,0.265,24,1.083,25,0.016,34,0.438,41,0.367,42,0.589,58,1.249,70,0.668,83,0.193,96,0.338,110,0.152,111,0.069,146,0.012,147,0.012,148,0.58,150,1.151,152,1.291,153,1.656,158,0.864,170,1.726,175,1.358,180,1.749,189,3.014,193,2.586,197,2.002,212,2.319,213,3.108,216,2.586,481,2.43,561,5.84,634,3.108,645,3.596,725,3.287,756,4.086,757,4.086,759,3.717,766,3.985,767,3.985,769,4.086,771,3.985,772,3.985,774,3.135,775,3.135,881,3.705,883,4.709,905,3.802,1235,3.985,1236,4.129,1237,4.774,1238,4.774,1239,4.774,1240,5.249,1241,4.774,1242,4.774,1243,4.129,1244,4.774]],["title/entities/NotificationEntity.html",[148,0.333,905,2.075]],["body/entities/NotificationEntity.html",[3,0.121,4,0.104,5,0.104,7,0.23,12,0.211,24,1.083,25,0.016,31,1.277,34,0.438,40,0.888,41,0.383,42,0.589,51,0.977,70,0.575,83,0.221,96,0.269,110,0.121,111,0.055,146,0.01,147,0.01,148,0.558,150,0.916,152,1.11,153,1.424,154,1.367,158,0.743,160,3.228,168,3.12,170,1.824,171,2.697,175,1.912,176,2.184,178,1.83,179,1.333,181,1.333,189,2.945,195,3.925,196,3.054,197,3.039,198,2.913,212,2.895,238,1.754,481,1.522,634,3.286,641,1.946,642,3.929,725,2.826,750,2.328,763,3.703,793,1.946,794,1.946,795,1.946,796,1.946,797,1.946,798,1.946,829,4.514,905,2.826,1021,4.05,1229,3.982,1235,3.913,1245,3.287,1246,5.218,1247,5.96,1248,5.155,1249,5.155,1250,6.724,1251,4.229,1252,3.8,1253,5.218,1254,3.8,1255,6.415,1256,5.218,1257,3.8,1258,3.8,1259,5.218,1260,3.8,1261,3.8,1262,5.816,1263,3.8,1264,4.229,1265,5.218,1266,3.8,1267,3.8,1268,3.8,1269,3.8,1270,3.8,1271,3.8]],["title/injectables/NotificationService.html",[217,0.815,1231,2.719]],["body/injectables/NotificationService.html",[3,0.086,4,0.074,5,0.074,7,0.355,12,0.15,13,1.267,15,1.704,16,0.984,17,1.434,19,1.235,20,0.944,21,1.267,22,1.068,25,0.016,34,0.388,37,2.499,39,1.417,40,0.721,41,0.297,42,0.447,43,1.73,44,1.62,45,1.759,50,2.344,51,1.29,55,1.209,58,1.443,59,2.042,60,2.975,61,0.707,62,1.068,67,0.707,68,0.651,69,1.068,70,0.745,72,1.494,74,1.623,76,4.25,77,1.371,82,1.921,83,0.229,86,0.707,87,1.434,88,1.833,90,0.443,95,0.651,96,0.289,97,0.707,110,0.086,111,0.039,112,1.73,113,1.376,114,1.1,116,1.376,122,1.025,125,2.57,127,2.646,131,1.372,146,0.008,147,0.008,154,1.068,157,2.499,158,0.581,189,3.078,217,0.868,218,1.034,222,1.794,223,1.188,224,3.239,225,2.408,226,2.718,228,2.499,231,1.794,236,3.354,238,0.908,239,0.948,241,1.794,242,1.188,243,1.034,244,1.133,245,1.188,246,1.188,249,1.247,250,1.247,252,1.764,253,1.794,254,1.247,255,1.188,256,1.794,257,1.384,258,1.384,259,1.188,260,1.133,261,1.794,262,1.188,263,2.822,264,1.188,265,1.247,266,1.794,267,1.188,268,1.188,269,1.188,270,1.188,271,1.188,272,1.188,387,3.886,519,1.312,520,1.312,523,1.463,524,2.09,526,1.312,890,4.736,902,1.553,903,2.097,905,1.463,906,2.097,911,2.097,1034,2.679,1037,3.354,1046,2.679,1047,3.01,1219,5.551,1228,2.337,1229,1.463,1230,1.917,1231,3.886,1235,1.774,1248,3.529,1249,3.529,1272,2.337,1273,5.476,1274,5.476,1275,4.079,1276,2.702,1277,4.25,1278,4.079,1279,2.702,1280,2.702,1281,3.529,1282,2.702,1283,2.702,1284,4.079,1285,4.079,1286,2.702,1287,2.702,1288,2.337,1289,2.702,1290,2.702,1291,4.079,1292,2.702,1293,2.702,1294,2.702,1295,2.702,1296,2.702]],["title/controllers/NotificationTemplateController.html",[0,0.886,1297,2.973]],["body/controllers/NotificationTemplateController.html",[0,1.299,2,1.088,3,0.091,4,0.078,5,0.078,7,0.452,8,1.776,9,3.287,10,1.776,12,0.158,13,0.98,14,3.243,15,1.739,16,1.519,17,1.47,18,1.956,19,1.273,20,0.98,21,0.98,22,0.744,24,0.941,25,0.016,29,3.153,30,1.863,31,1.424,32,2.469,33,1.863,34,0.381,36,1.863,39,1.448,40,0.736,41,0.284,42,0.457,43,1.617,44,1.659,45,1.583,47,2.434,48,3.068,52,1.939,53,1.312,55,2.068,56,1.863,58,1.381,59,1.255,61,0.744,62,1.47,63,1.249,64,2.469,65,1.249,67,1.47,68,1.221,69,0.744,70,0.694,72,2.2,74,1.255,77,0.955,79,2.522,81,1.249,83,0.219,84,1.776,85,1.249,86,0.744,87,1.109,88,1.756,89,1.191,90,0.465,91,2.869,92,3.014,93,1.249,94,1.138,95,0.685,96,0.201,97,0.744,98,1.539,99,1.539,105,1.138,106,1.191,107,1.191,110,0.091,111,0.041,112,0.744,113,0.714,114,0.487,116,0.714,117,1.138,118,1.863,121,2.769,122,1.685,123,1.863,124,1.249,131,1.398,132,2.227,134,1.249,135,1.312,137,1.455,138,1.455,140,1.249,141,1.249,143,1.249,144,1.249,146,0.009,147,0.009,189,3.133,408,1.539,411,1.455,415,1.455,420,1.455,426,1.455,427,1.455,432,1.455,786,5.06,790,1.74,791,3.931,793,1.455,794,1.455,795,1.455,796,1.455,797,1.455,798,1.455,1060,2.595,1065,2.205,1066,2.205,1067,2.205,1068,2.205,1069,2.205,1070,2.205,1229,1.539,1230,2.016,1233,2.457,1297,4.358,1298,2.457,1299,5.644,1300,2.841,1301,2.841,1302,2.841,1303,2.841,1304,2.841,1305,2.841,1306,2.457,1307,3.006,1308,2.841,1309,2.841]],["title/entities/NotificationTemplateEntity.html",[148,0.333,1229,2.075]],["body/entities/NotificationTemplateEntity.html",[3,0.16,4,0.138,5,0.138,7,0.304,12,0.279,24,1.02,25,0.016,34,0.413,40,0.837,41,0.346,42,0.57,51,1.173,83,0.2,84,2.864,96,0.355,110,0.16,111,0.072,146,0.013,147,0.013,148,0.594,150,1.212,152,1.334,153,1.71,154,1.641,158,0.893,170,2.134,175,1.429,178,2.198,179,1.763,180,1.841,181,1.763,189,3.005,196,3.299,198,3.147,481,2.864,641,3.21,725,3.873,786,4.696,1229,3.394,1310,4.346,1311,6.83,1312,6.267,1313,5.025,1314,5.025,1315,5.025,1316,5.025]],["title/injectables/NotificationTemplateService.html",[217,0.815,1307,2.719]],["body/injectables/NotificationTemplateService.html",[3,0.091,4,0.078,5,0.078,7,0.364,8,1.78,12,0.158,13,0.982,15,1.74,16,1.356,17,1.473,19,1.687,20,1.301,21,1.301,22,1.112,25,0.016,34,0.406,39,1.52,40,0.773,41,0.319,42,0.479,43,1.779,44,1.66,45,1.803,50,3.232,51,1.37,55,1.667,58,1.438,59,2.17,60,2.815,61,1.112,62,1.473,67,0.746,68,1.356,69,1.112,70,0.756,72,1.555,74,1.258,77,1.427,79,1.7,82,1.973,83,0.223,86,0.746,87,1.473,88,1.758,90,0.467,95,0.687,96,0.3,97,0.746,110,0.091,111,0.081,112,1.575,113,1.413,114,1.215,116,1.413,122,0.716,125,2.032,127,2.032,131,1.399,146,0.009,147,0.009,157,3.444,158,0.605,189,3.096,217,0.903,218,1.091,222,1.867,223,1.253,224,2.872,225,2.473,226,2.772,231,1.867,238,0.958,239,0.999,241,1.867,242,1.253,243,1.091,244,1.195,245,1.253,246,1.253,249,1.316,250,1.316,252,1.812,253,1.867,254,1.316,255,1.253,256,1.867,257,1.459,258,1.459,259,1.253,260,1.195,261,1.867,262,1.253,263,2.231,264,1.253,266,1.867,267,1.253,268,1.253,269,1.253,270,1.253,271,1.253,272,1.253,513,3.295,519,1.384,520,1.384,523,1.543,524,1.459,526,1.384,786,3.332,895,3.692,1037,2.6,1039,3.013,1046,1.871,1047,1.745,1229,1.543,1230,2.022,1277,3.295,1288,2.464,1299,5.65,1306,2.464,1307,3.013,1317,2.464,1318,4.245,1319,4.245,1320,4.245,1321,2.849,1322,2.849,1323,2.849,1324,2.849,1325,4.245,1326,2.849,1327,5.623,1328,2.849,1329,4.245]],["title/entities/NotificationUserEntity.html",[148,0.333,1264,2.719]],["body/entities/NotificationUserEntity.html",[3,0.147,4,0.127,5,0.127,7,0.279,12,0.256,24,1.072,25,0.016,34,0.434,40,0.729,41,0.363,42,0.586,51,1.112,58,1.343,70,0.655,83,0.209,96,0.327,110,0.147,111,0.067,146,0.012,147,0.012,148,0.603,150,1.114,152,1.265,153,1.622,154,1.556,158,0.846,168,1.937,189,3.061,193,2.502,195,3.218,197,1.937,212,2.887,213,3.044,216,2.502,437,4.314,634,3.044,645,3.552,750,3.64,756,4.024,757,4.024,759,3.64,766,3.902,767,3.902,769,4.024,771,3.902,772,3.902,774,3.034,775,3.034,881,3.586,883,4.612,902,3.985,905,3.756,1021,3.586,1025,3.996,1240,5.14,1243,3.996,1264,4.217,1330,3.996,1331,4.62,1332,4.62,1333,4.62,1334,4.62,1335,4.62,1336,4.62,1337,4.62]],["title/modules/PostgresDatabaseProviderModule.html",[273,1.534,360,2.516]],["body/modules/PostgresDatabaseProviderModule.html",[3,0.167,4,0.143,5,0.143,7,0.316,15,1.209,25,0.016,41,0.264,51,1.301,83,0.237,90,0.856,96,0.37,110,0.167,111,0.1,146,0.013,147,0.013,150,1.26,243,2.001,273,2.904,275,2.539,294,3.69,324,3.709,360,4.564,1114,3.709,1117,5.554,1118,5.554,1119,5.554,1120,4.52,1123,4.52,1124,4.52,1125,4.52,1126,4.52,1129,3.432,1131,3.432,1134,4.52,1136,4.52,1138,4.52,1139,4.52,1140,4.52,1338,5.226,1339,4.216,1340,5.226,1341,5.395,1342,5.226,1343,5.226,1344,5.554,1345,5.226,1346,5.226,1347,5.226,1348,5.226,1349,5.226,1350,5.226,1351,5.226,1352,5.226]],["title/modules/PostgresSQLConfigModule.html",[273,1.534,1339,2.516]],["body/modules/PostgresSQLConfigModule.html",[3,0.165,4,0.142,5,0.142,25,0.016,51,0.971,83,0.237,90,0.85,110,0.165,111,0.092,146,0.013,147,0.013,273,2.56,275,2.52,276,3.274,281,4.741,282,3.915,283,3.178,284,3.178,286,3.407,287,4.537,288,3.178,289,3.407,290,3.682,291,3.178,292,4.917,293,3.682,294,2.982,295,3.682,296,3.682,297,3.682,298,3.682,1110,4.488,1111,5.53,1112,4.488,1114,3.682,1339,4.966,1341,6.007,1344,4.488,1353,4.488,1354,4.488,1355,5.188,1356,5.188,1357,5.188,1358,5.188,1359,5.188,1360,5.188,1361,5.188,1362,5.188,1363,5.188,1364,5.188,1365,5.188,1366,5.188]],["title/controllers/UserController.html",[0,0.886,1367,2.973]],["body/controllers/UserController.html",[0,0.911,2,0.987,3,0.082,4,0.071,5,0.071,7,0.453,8,2.73,10,1.651,12,0.143,13,0.911,14,3.257,15,1.741,16,1.289,17,1.4,18,1.818,19,1.2,20,0.911,21,1.237,22,0.675,24,0.973,25,0.016,29,3.187,30,1.731,31,1.323,32,2.35,33,1.731,34,0.394,36,1.731,38,2.262,39,1.523,40,0.774,41,0.329,42,0.48,43,1.57,44,1.69,45,1.525,48,3.125,51,1.001,52,2.047,53,1.19,55,2.166,56,1.731,58,1.249,59,1.584,60,1.651,61,0.675,62,1.4,63,1.133,64,2.35,65,1.133,67,1.4,68,1.152,69,0.675,70,0.634,72,1.75,74,1.584,75,2.468,79,2.141,81,1.731,83,0.217,84,1.081,85,1.133,86,0.675,87,1.031,88,1.705,89,1.081,90,0.422,91,2.863,92,2.993,93,1.133,94,1.032,95,0.622,96,0.182,97,0.675,101,1.081,102,1.32,105,1.032,106,1.081,107,1.081,110,0.082,111,0.069,112,0.675,113,0.648,114,0.987,117,1.032,118,1.731,119,1.579,121,2.776,122,1.677,123,1.731,124,1.133,131,1.445,132,2.35,134,1.133,135,1.19,140,1.133,141,1.133,143,1.133,144,1.133,146,0.008,147,0.008,154,1.031,408,1.396,411,1.32,415,1.32,420,1.32,422,1.579,423,2.001,426,1.32,427,1.32,432,1.32,437,5.076,442,2.23,443,2.23,1058,3.405,1251,4.481,1367,4.149,1368,2.23,1369,3.937,1370,3.405,1371,5.462,1372,4.776,1373,2.578,1374,2.578,1375,2.578,1376,2.578,1377,3.794,1378,3.937,1379,2.578,1380,3.405,1381,2.578,1382,2.578,1383,4.468,1384,2.578,1385,2.578,1386,2.578,1387,2.578,1388,5.462,1389,2.578,1390,4.149,1391,2.578,1392,2.578,1393,2.001,1394,2.23,1395,2.23,1396,3.389,1397,2.578,1398,2.578,1399,2.578,1400,2.578,1401,2.578,1402,2.578,1403,2.578,1404,2.578,1405,2.578,1406,2.578,1407,2.578,1408,2.578,1409,2.578,1410,2.578,1411,2.578,1412,2.578,1413,2.578,1414,2.578,1415,2.578,1416,2.578]],["title/entities/UserEntity.html",[148,0.333,902,2.202]],["body/entities/UserEntity.html",[3,0.146,4,0.125,5,0.125,7,0.276,12,0.253,24,1.068,25,0.016,31,1.535,34,0.432,41,0.37,42,0.585,51,1.104,59,1.749,70,0.65,83,0.208,96,0.323,110,0.146,111,0.066,146,0.012,147,0.012,148,0.568,150,1.102,152,1.255,153,1.884,154,1.545,158,0.84,160,3.539,167,3.39,168,2.474,170,2.082,175,1.964,178,2.07,179,1.603,180,1.674,181,1.603,196,3.219,198,3.071,238,1.983,481,2.932,482,4.208,641,2.34,642,4.23,793,2.34,794,2.34,795,2.34,796,2.34,797,2.34,798,2.34,902,3.39,1129,4.291,1131,4.291,1251,5.074,1377,5.074,1383,5.071,1393,3.546,1417,3.952,1418,6.534,1419,4.568,1420,4.568,1421,4.568,1422,4.568,1423,4.568,1424,4.568]],["title/entities/UserLogin.html",[148,0.333,1425,2.973]],["body/entities/UserLogin.html",[3,0.16,4,0.138,5,0.138,7,0.304,12,0.279,15,1.162,24,1.02,25,0.016,34,0.413,41,0.346,45,1.263,51,1.173,58,1.279,70,0.752,83,0.16,96,0.355,110,0.16,111,0.072,114,1.171,131,1.115,146,0.013,147,0.013,148,0.622,150,1.212,152,1.334,153,1.71,154,1.641,158,0.893,170,2.134,175,2.164,260,2.107,372,3.9,759,3.078,769,4.183,1129,4.485,1131,4.485,1390,5.824,1425,4.864,1426,4.346,1427,5.025,1428,5.025,1429,5.025,1430,5.025,1431,5.025,1432,5.025,1433,5.025,1434,5.025,1435,5.025,1436,5.025]],["title/injectables/UserService.html",[217,0.815,1396,2.719]],["body/injectables/UserService.html",[3,0.076,4,0.066,5,0.066,7,0.372,12,0.133,13,1.19,15,1.746,16,1.422,17,1.347,19,1.598,20,1.19,21,1.19,22,0.975,25,0.016,34,0.404,37,3.151,38,2.139,39,1.533,40,0.78,41,0.344,42,0.483,43,1.533,44,1.693,45,1.778,51,1.37,52,0.918,55,2.046,58,1.387,59,1.885,60,2.157,61,0.975,62,1.544,67,0.628,68,0.898,69,0.975,70,0.701,72,1.364,79,2.06,82,1.805,83,0.22,86,0.628,87,1.347,88,1.78,90,0.393,95,0.578,96,0.263,97,0.628,110,0.076,111,0.074,112,1.459,113,1.293,114,1.183,116,1.293,122,1.4,125,2.464,127,2.231,131,1.411,146,0.007,147,0.007,153,1.016,157,2.28,158,0.53,217,0.792,218,0.918,222,1.637,223,1.054,224,2.705,225,2.262,226,2.592,228,2.28,231,1.637,236,1.468,238,0.806,239,0.841,241,2.006,242,1.054,243,0.918,244,1.005,245,1.054,246,1.054,249,1.107,250,1.719,252,1.657,253,1.637,254,1.107,255,1.054,256,1.637,259,1.054,260,1.005,261,2.262,262,1.637,263,2.592,264,1.054,266,1.637,267,1.054,268,1.054,269,1.054,270,1.054,271,1.054,272,1.054,345,3.22,387,2.641,422,2.28,437,5.163,513,1.86,519,1.164,520,1.164,523,1.298,524,1.907,525,1.86,526,1.164,586,2.889,895,3.871,902,1.377,903,1.86,911,1.86,991,3.22,1034,2.444,1037,3.151,1039,3.651,1047,1.468,1129,1.574,1131,2.444,1251,3.651,1277,2.889,1281,5.501,1370,4.45,1371,5.879,1377,3.651,1380,4.45,1383,4.575,1388,4.45,1390,4.575,1393,1.86,1394,2.073,1395,2.073,1396,3.238,1437,2.073,1438,3.722,1439,3.722,1440,3.722,1441,2.397,1442,3.722,1443,3.722,1444,2.397,1445,3.722,1446,3.722,1447,2.397,1448,2.397,1449,3.722,1450,2.397,1451,2.397,1452,3.722,1453,3.22,1454,2.397,1455,3.722,1456,2.397,1457,3.722,1458,3.722,1459,3.722,1460,3.722,1461,2.397,1462,2.397,1463,2.397,1464,2.397,1465,2.397,1466,2.397,1467,2.397,1468,2.397,1469,2.397,1470,2.397,1471,2.397]],["title/coverage.html",[1472,4.539]],["body/coverage.html",[0,1.759,1,2.895,5,0.102,6,3.227,25,0.016,41,0.189,101,1.565,103,2.45,111,0.054,114,0.64,146,0.01,147,0.01,148,0.687,149,2.45,151,3.227,155,2.895,162,2.648,182,3.227,217,1.628,219,3.227,280,2.45,320,3.227,343,2.648,344,3.227,346,2.285,394,3.227,403,2.895,404,3.227,429,2.648,447,2.144,448,3.227,482,4.626,503,3.227,530,2.895,531,3.227,546,2.648,557,2.45,558,3.227,570,3.227,581,2.895,582,3.227,594,2.285,596,2.648,601,3.227,613,3.227,631,2.648,654,3.227,667,2.648,668,3.227,698,2.648,720,3.227,734,2.648,735,3.227,752,2.45,753,3.227,758,2.021,779,2.895,780,3.227,801,2.648,811,3.227,851,2.45,876,3.227,887,3.227,900,2.144,902,2.144,905,2.021,944,2.895,945,3.227,956,2.648,968,2.648,969,3.227,972,3.227,994,2.895,995,3.227,1006,2.648,1016,3.227,1033,3.227,1048,2.895,1049,3.227,1060,2.285,1071,3.227,1085,3.227,1141,2.895,1142,3.227,1144,2.45,1154,2.285,1157,2.648,1168,3.227,1192,2.648,1193,3.227,1201,3.227,1208,3.227,1217,2.895,1218,3.227,1229,2.021,1231,2.648,1235,2.45,1236,3.227,1245,3.227,1264,2.648,1272,3.227,1297,2.895,1298,3.227,1307,2.648,1310,3.227,1317,3.227,1330,3.227,1367,2.895,1368,3.227,1396,2.648,1417,3.227,1425,2.895,1426,3.227,1437,3.227,1472,3.227,1473,3.227,1474,3.731,1475,3.731,1476,5.153,1477,3.731,1478,3.731,1479,7.487,1480,3.731,1481,5.153,1482,3.731,1483,7.884,1484,3.731,1485,7.323,1486,7.323,1487,5.153,1488,5.153,1489,3.731,1490,3.731,1491,3.731]],["title/dependencies.html",[276,2.363,1492,2.759]],["body/dependencies.html",[19,1.287,25,0.016,90,0.84,94,2.052,95,1.235,96,0.449,111,0.091,146,0.013,147,0.013,243,1.961,276,2.624,288,3.138,289,3.364,291,3.138,371,4.432,372,4.923,1185,4.432,1187,4.432,1493,5.123,1494,5.123,1495,5.123,1496,6.89,1497,5.123,1498,5.123,1499,5.123,1500,5.123,1501,5.123,1502,5.487,1503,5.123,1504,5.123,1505,5.123,1506,5.123,1507,6.343,1508,5.123,1509,5.123,1510,5.123,1511,5.123,1512,5.123,1513,5.123,1514,5.123,1515,5.123,1516,5.123,1517,5.123,1518,6.343,1519,5.123,1520,6.343,1521,5.123,1522,5.123,1523,5.123,1524,5.123,1525,6.89,1526,5.123,1527,5.123,1528,5.123,1529,5.123,1530,5.123,1531,5.123,1532,5.123,1533,5.123,1534,5.123,1535,5.123,1536,5.123,1537,5.123,1538,5.123,1539,5.123,1540,5.123,1541,5.123,1542,5.123]],["title/miscellaneous/enumerations.html",[1543,2.759,1544,3.99]],["body/miscellaneous/enumerations.html",[12,0.268,25,0.016,41,0.368,122,1.212,146,0.012,147,0.012,152,1.426,189,1.931,190,5.282,239,2.823,244,2.561,350,5.282,437,4.401,561,4.739,583,3.422,640,4.739,642,4.675,821,4.171,832,5.282,854,5.282,856,5.282,892,4.401,1262,5.282,1377,4.334,1453,5.282,1543,4.171,1544,4.171,1545,6.107,1546,4.822,1547,4.822,1548,4.822,1549,4.822,1550,4.822,1551,6.107,1552,4.822,1553,4.822,1554,4.822,1555,4.822,1556,4.822,1557,4.822,1558,7.045,1559,7.045,1560,6.107,1561,4.822,1562,6.107,1563,4.822,1564,6.107,1565,4.822,1566,4.822,1567,6.107,1568,6.107,1569,6.107,1570,4.822,1571,4.822,1572,6.107,1573,6.107,1574,6.107,1575,4.822]],["title/index.html",[12,0.177,1576,3.19,1577,3.19]],["body/index.html",[4,0.105,16,0.921,25,0.014,114,0.898,146,0.011,147,0.011,276,1.957,305,3.305,306,5.169,318,5.53,319,4.065,381,3.305,386,3.305,401,3.305,1038,5.4,1473,3.305,1502,3.305,1578,5.976,1579,3.82,1580,5.976,1581,7.883,1582,3.82,1583,3.82,1584,3.82,1585,7.256,1586,3.82,1587,3.82,1588,5.976,1589,5.976,1590,3.82,1591,5.237,1592,6.736,1593,5.237,1594,3.82,1595,5.237,1596,3.82,1597,6.958,1598,3.82,1599,3.82,1600,3.82,1601,6.736,1602,3.82,1603,6.43,1604,3.82,1605,5.237,1606,3.82,1607,3.82,1608,6.958,1609,6.958,1610,7.125,1611,3.82,1612,3.82,1613,5.237,1614,3.82,1615,3.82,1616,3.82,1617,3.82,1618,3.82,1619,3.82,1620,3.82,1621,3.82,1622,3.82,1623,3.82,1624,7.125,1625,5.237,1626,7.447,1627,5.976,1628,3.82,1629,5.976,1630,5.237,1631,3.82,1632,3.82,1633,5.237,1634,3.82,1635,3.82,1636,3.82,1637,3.82,1638,3.82,1639,3.82,1640,5.237,1641,3.82,1642,3.82,1643,3.82,1644,3.82,1645,5.976,1646,3.82,1647,5.976,1648,3.82,1649,3.82,1650,5.237,1651,3.82,1652,3.82,1653,3.82,1654,3.82,1655,3.82,1656,3.82,1657,3.82,1658,5.976,1659,6.958,1660,6.43,1661,5.237,1662,3.82,1663,3.82,1664,5.237,1665,6.958,1666,3.82,1667,3.82,1668,3.82,1669,3.82,1670,4.53,1671,3.82,1672,3.82,1673,3.82,1674,3.82,1675,5.237,1676,5.237,1677,5.976,1678,6.43,1679,5.237,1680,3.82,1681,3.82,1682,3.82,1683,3.82,1684,3.82,1685,3.82,1686,3.82,1687,3.82,1688,3.82,1689,3.82,1690,3.82,1691,3.82,1692,5.237,1693,3.82,1694,3.82,1695,3.82,1696,3.82,1697,3.82,1698,3.82,1699,3.82,1700,3.82,1701,3.82,1702,3.82,1703,3.82,1704,3.82,1705,3.82,1706,3.82,1707,3.82,1708,3.82,1709,3.82,1710,3.82,1711,3.82,1712,3.82,1713,3.82,1714,3.82,1715,3.82]],["title/modules.html",[275,2.549]],["body/modules.html",[25,0.014,146,0.014,147,0.014,274,3.861,275,2.856,356,4.172,360,3.861,982,4.172,1095,3.861,1115,4.563,1339,3.861,1670,5.961,1716,7.686,1717,7.686,1718,7.686,1719,7.858,1720,6.892]],["title/overview.html",[1721,4.539]],["body/overview.html",[2,1.972,25,0.016,106,2.16,111,0.074,146,0.013,147,0.013,150,1.242,218,1.972,274,5.024,275,2.502,276,3.26,277,4.456,278,4.456,279,4.456,280,5.024,281,4.803,282,3.898,283,3.155,284,3.155,346,4.23,356,5.486,357,4.456,358,4.456,359,4.456,360,4.535,982,5.119,983,4.456,984,4.456,985,6.24,1095,4.737,1096,4.456,1097,4.456,1098,5.599,1339,4.737,1341,5.599,1353,4.456,1354,4.456,1721,4.456,1722,5.151,1723,5.151,1724,5.151,1725,5.151]],["title/properties.html",[158,0.657,1492,2.759]],["body/properties.html",[25,0.015,105,2.492,146,0.014,147,0.014,158,0.886,1726,6.223,1727,6.223,1728,6.223]]],"invertedIndex":[["",{"_index":25,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":1481,"title":{},"body":{"coverage.html":{}}}],["0.0.0",{"_index":1726,"title":{},"body":{"properties.html":{}}}],["0.0.6",{"_index":1495,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1535,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1515,"title":{},"body":{"dependencies.html":{}}}],["0.2.44",{"_index":1542,"title":{},"body":{"dependencies.html":{}}}],["0.40.0",{"_index":1517,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1514,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1526,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1484,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1482,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":106,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["1.0.0",{"_index":1530,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":1497,"title":{},"body":{"dependencies.html":{}}}],["1.3.0",{"_index":1513,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1483,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1478,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1689,"title":{},"body":{"index.html":{}}}],["10/11",{"_index":1490,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":482,"title":{},"body":{"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GroupEntity.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["128",{"_index":172,"title":{},"body":{"entities/AplEntity.html":{}}}],["13",{"_index":1723,"title":{},"body":{"overview.html":{}}}],["14",{"_index":1725,"title":{},"body":{"overview.html":{}}}],["16",{"_index":1028,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["17.1.1",{"_index":1493,"title":{},"body":{"dependencies.html":{}}}],["17.6.0",{"_index":1521,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":491,"title":{},"body":{"entities/AssetEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceEntity.html":{}}}],["2.0.0",{"_index":1541,"title":{},"body":{"dependencies.html":{}}}],["2.2.2",{"_index":1503,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":1523,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1476,"title":{},"body":{"coverage.html":{}}}],["23",{"_index":1724,"title":{},"body":{"overview.html":{}}}],["3",{"_index":858,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["3.1.0",{"_index":1510,"title":{},"body":{"dependencies.html":{}}}],["3.1.3",{"_index":1524,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":1528,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":1539,"title":{},"body":{"dependencies.html":{}}}],["4.5.0",{"_index":1519,"title":{},"body":{"dependencies.html":{}}}],["403",{"_index":29,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["5.0.0",{"_index":1507,"title":{},"body":{"dependencies.html":{}}}],["5.2.0",{"_index":1504,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1477,"title":{},"body":{"coverage.html":{}}}],["512",{"_index":1075,"title":{},"body":{"entities/LayerEntity.html":{}}}],["6",{"_index":489,"title":{},"body":{"entities/AssetEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceEntity.html":{}}}],["64",{"_index":725,"title":{},"body":{"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NewLayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{}}}],["7",{"_index":1722,"title":{},"body":{"overview.html":{}}}],["7.0.0",{"_index":1537,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1479,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":1486,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":1496,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":1505,"title":{},"body":{"dependencies.html":{}}}],["8.8.0",{"_index":1532,"title":{},"body":{"dependencies.html":{}}}],["8/9",{"_index":1488,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":1485,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":1487,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":1500,"title":{},"body":{"dependencies.html":{}}}],["9/9",{"_index":1480,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1489,"title":{},"body":{"coverage.html":{}}}],["_",{"_index":519,"title":{},"body":{"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["_.omit(data",{"_index":526,"title":{},"body":{"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["_.omit(o",{"_index":916,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["_.result(data,'id',0",{"_index":525,"title":{},"body":{"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/UserService.html":{}}}],["a.geofence_id",{"_index":932,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["above",{"_index":1630,"title":{},"body":{"index.html":{}}}],["accessors",{"_index":323,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["account",{"_index":1380,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["accounttype",{"_index":1383,"title":{},"body":{"controllers/UserController.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["active",{"_index":1572,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actualarrivaltime",{"_index":671,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["actualdeparturetime",{"_index":672,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["add",{"_index":1593,"title":{},"body":{"index.html":{}}}],["adding",{"_index":1587,"title":{},"body":{"index.html":{}}}],["address",{"_index":559,"title":{},"body":{"entities/CustomerEntity.html":{},"entities/LayerEntity.html":{}}}],["advanced",{"_index":1706,"title":{},"body":{"index.html":{}}}],["advantage",{"_index":1699,"title":{},"body":{"index.html":{}}}],["affected",{"_index":1664,"title":{},"body":{"index.html":{}}}],["affected:e2e",{"_index":1668,"title":{},"body":{"index.html":{}}}],["affected:test",{"_index":1663,"title":{},"body":{"index.html":{}}}],["age",{"_index":1434,"title":{},"body":{"entities/UserLogin.html":{}}}],["aircraftid",{"_index":615,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["aircraftmodel",{"_index":673,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["alias",{"_index":449,"title":{},"body":{"entities/AssetEntity.html":{}}}],["all_groups",{"_index":971,"title":{},"body":{"entities/GroupEntity.html":{}}}],["alongside",{"_index":1704,"title":{},"body":{"index.html":{}}}],["alpha.3",{"_index":1508,"title":{},"body":{"dependencies.html":{}}}],["altitude",{"_index":616,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{}}}],["angular",{"_index":1616,"title":{},"body":{"index.html":{}}}],["api",{"_index":74,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"classes/NewLayerCreateDto.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{}}}],["apioperation",{"_index":91,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary:'for",{"_index":1411,"title":{},"body":{"controllers/UserController.html":{}}}],["apiproperty",{"_index":1184,"title":{},"body":{"classes/NewLayerCreateDto.html":{}}}],["apiresponse",{"_index":92,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["apiresponse({status",{"_index":1145,"title":{},"body":{"controllers/NewLayerController.html":{}}}],["apiresponse({status:403",{"_index":1413,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags",{"_index":93,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["apitags('apl",{"_index":109,"title":{},"body":{"controllers/AplController.html":{}}}],["apitags('assets",{"_index":431,"title":{},"body":{"controllers/AssetController.html":{}}}],["apitags('customer",{"_index":548,"title":{},"body":{"controllers/CustomerController.html":{}}}],["apitags('event",{"_index":598,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["apitags('geofence",{"_index":803,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["apitags('groups",{"_index":959,"title":{},"body":{"controllers/GroupController.html":{}}}],["apitags('landmarks",{"_index":1008,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["apitags('layers",{"_index":1063,"title":{},"body":{"controllers/LayerController.html":{}}}],["apitags('newlayer",{"_index":1159,"title":{},"body":{"controllers/NewLayerController.html":{}}}],["apitags('notification",{"_index":1233,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["apitags('users",{"_index":1398,"title":{},"body":{"controllers/UserController.html":{}}}],["apl",{"_index":11,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{}}}],["apl'})@apiresponse({status",{"_index":28,"title":{},"body":{"controllers/AplController.html":{}}}],["apl.aplitems",{"_index":194,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apl.entity",{"_index":214,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apl.item.entity",{"_index":177,"title":{},"body":{"entities/AplEntity.html":{}}}],["apl_id",{"_index":200,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apl_items",{"_index":183,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["aplcontroller",{"_index":1,"title":{"controllers/AplController.html":{}},"body":{"controllers/AplController.html":{},"coverage.html":{}}}],["apldto",{"_index":23,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{}}}],["aplentity",{"_index":149,"title":{"entities/AplEntity.html":{}},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"coverage.html":{}}}],["aplitementity",{"_index":162,"title":{"entities/AplItemEntity.html":{}},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"coverage.html":{}}}],["aplitems",{"_index":159,"title":{},"body":{"entities/AplEntity.html":{}}}],["aplservice",{"_index":103,"title":{"injectables/AplService.html":{}},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/EventDetailController.html":{},"coverage.html":{}}}],["app",{"_index":318,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"index.html":{}}}],["app.controller",{"_index":374,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":352,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.test",{"_index":311,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["app_env",{"_index":302,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["app_name",{"_index":299,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["app_port",{"_index":312,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["app_url",{"_index":309,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["appconfigmodule",{"_index":274,"title":{"modules/AppConfigModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appconfigservice",{"_index":280,"title":{"injectables/AppConfigService.html":{}},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"coverage.html":{},"overview.html":{}}}],["appcontroller",{"_index":343,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1625,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1597,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":356,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps/.../confirmenum.ts",{"_index":1546,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/.../event.severity.enum.ts",{"_index":1547,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/.../notification.type.enum.ts",{"_index":1548,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/.../notify.enum.ts",{"_index":1549,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/.../packet.type.enum.ts",{"_index":1550,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/.../severity.enum.ts",{"_index":1552,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/.../status.enum.ts",{"_index":1553,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/.../user.type.enum.ts",{"_index":1554,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/starnavigationapi/src/app/app.controller.ts",{"_index":344,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/app.controller.ts:20",{"_index":349,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/starnavigationapi/src/app/app.module.ts",{"_index":361,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/starnavigationapi/src/app/app.module.ts:34",{"_index":365,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/starnavigationapi/src/app/app.service.ts",{"_index":394,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/app.service.ts:13",{"_index":396,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/starnavigationapi/src/app/config/app/config.module.ts",{"_index":285,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["apps/starnavigationapi/src/app/config/app/configuration.service.ts",{"_index":320,"title":{},"body":{"injectables/AppConfigService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/config/app/configuration.service.ts:12",{"_index":329,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["apps/starnavigationapi/src/app/config/app/configuration.service.ts:15",{"_index":331,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["apps/starnavigationapi/src/app/config/app/configuration.service.ts:18",{"_index":333,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["apps/starnavigationapi/src/app/config/app/configuration.service.ts:21",{"_index":335,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["apps/starnavigationapi/src/app/config/app/configuration.service.ts:24",{"_index":337,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["apps/starnavigationapi/src/app/config/app/configuration.service.ts:9",{"_index":327,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["apps/starnavigationapi/src/app/config/database/mysql/config.module.ts",{"_index":1099,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["apps/starnavigationapi/src/app/config/database/postgres/config.module.ts",{"_index":1355,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["apps/starnavigationapi/src/app/config/http/config.module.ts",{"_index":986,"title":{},"body":{"modules/HttpConfigModule.html":{}}}],["apps/starnavigationapi/src/app/enum/confirmenum.ts",{"_index":1555,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/starnavigationapi/src/app/enum/event.severity.enum.ts",{"_index":1557,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/starnavigationapi/src/app/enum/notification.type.enum.ts",{"_index":1561,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/starnavigationapi/src/app/enum/notify.enum.ts",{"_index":1563,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/starnavigationapi/src/app/enum/packet.type.enum.ts",{"_index":1565,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/starnavigationapi/src/app/enum/severity.enum.ts",{"_index":1570,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/starnavigationapi/src/app/enum/status.enum.ts",{"_index":1571,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/starnavigationapi/src/app/enum/user.type.enum.ts",{"_index":1575,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts",{"_index":6,"title":{},"body":{"controllers/AplController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:110",{"_index":66,"title":{},"body":{"controllers/AplController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:39",{"_index":35,"title":{},"body":{"controllers/AplController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:54",{"_index":49,"title":{},"body":{"controllers/AplController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:68",{"_index":57,"title":{},"body":{"controllers/AplController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:84",{"_index":80,"title":{},"body":{"controllers/AplController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:98",{"_index":73,"title":{},"body":{"controllers/AplController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts",{"_index":404,"title":{},"body":{"controllers/AssetController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:103",{"_index":421,"title":{},"body":{"controllers/AssetController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:115",{"_index":419,"title":{},"body":{"controllers/AssetController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:40",{"_index":410,"title":{},"body":{"controllers/AssetController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:52",{"_index":412,"title":{},"body":{"controllers/AssetController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:76",{"_index":417,"title":{},"body":{"controllers/AssetController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:90",{"_index":424,"title":{},"body":{"controllers/AssetController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts",{"_index":531,"title":{},"body":{"controllers/CustomerController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:106",{"_index":540,"title":{},"body":{"controllers/CustomerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:42",{"_index":535,"title":{},"body":{"controllers/CustomerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:54",{"_index":536,"title":{},"body":{"controllers/CustomerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:67",{"_index":539,"title":{},"body":{"controllers/CustomerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:81",{"_index":542,"title":{},"body":{"controllers/CustomerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:94",{"_index":541,"title":{},"body":{"controllers/CustomerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts",{"_index":582,"title":{},"body":{"controllers/EventDetailController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:102",{"_index":591,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:114",{"_index":590,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:42",{"_index":587,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:57",{"_index":588,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:71",{"_index":589,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:87",{"_index":592,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts",{"_index":780,"title":{},"body":{"controllers/GeofenceController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:109",{"_index":788,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:41",{"_index":784,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:54",{"_index":785,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:68",{"_index":787,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:84",{"_index":792,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:97",{"_index":789,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts",{"_index":945,"title":{},"body":{"controllers/GroupController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:109",{"_index":952,"title":{},"body":{"controllers/GroupController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:40",{"_index":949,"title":{},"body":{"controllers/GroupController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:53",{"_index":950,"title":{},"body":{"controllers/GroupController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:67",{"_index":951,"title":{},"body":{"controllers/GroupController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:83",{"_index":954,"title":{},"body":{"controllers/GroupController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:97",{"_index":953,"title":{},"body":{"controllers/GroupController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts",{"_index":995,"title":{},"body":{"controllers/LandmarkController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:108",{"_index":1002,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:42",{"_index":999,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:54",{"_index":1000,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:67",{"_index":1001,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:83",{"_index":1004,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:96",{"_index":1003,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts",{"_index":1049,"title":{},"body":{"controllers/LayerController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:106",{"_index":1056,"title":{},"body":{"controllers/LayerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:40",{"_index":1051,"title":{},"body":{"controllers/LayerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:52",{"_index":1053,"title":{},"body":{"controllers/LayerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:66",{"_index":1055,"title":{},"body":{"controllers/LayerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:81",{"_index":1059,"title":{},"body":{"controllers/LayerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:94",{"_index":1057,"title":{},"body":{"controllers/LayerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/newlayer.controller.ts",{"_index":1142,"title":{},"body":{"controllers/NewLayerController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/newlayer.controller.ts:108",{"_index":1151,"title":{},"body":{"controllers/NewLayerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/newlayer.controller.ts:42",{"_index":1146,"title":{},"body":{"controllers/NewLayerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/newlayer.controller.ts:54",{"_index":1149,"title":{},"body":{"controllers/NewLayerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/newlayer.controller.ts:67",{"_index":1150,"title":{},"body":{"controllers/NewLayerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/newlayer.controller.ts:83",{"_index":1153,"title":{},"body":{"controllers/NewLayerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/newlayer.controller.ts:96",{"_index":1152,"title":{},"body":{"controllers/NewLayerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts",{"_index":1218,"title":{},"body":{"controllers/NotificationController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:107",{"_index":1225,"title":{},"body":{"controllers/NotificationController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:42",{"_index":1221,"title":{},"body":{"controllers/NotificationController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:54",{"_index":1222,"title":{},"body":{"controllers/NotificationController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:67",{"_index":1224,"title":{},"body":{"controllers/NotificationController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:82",{"_index":1227,"title":{},"body":{"controllers/NotificationController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:95",{"_index":1226,"title":{},"body":{"controllers/NotificationController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts",{"_index":1298,"title":{},"body":{"controllers/NotificationTemplateController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:104",{"_index":1303,"title":{},"body":{"controllers/NotificationTemplateController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:39",{"_index":1300,"title":{},"body":{"controllers/NotificationTemplateController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:51",{"_index":1301,"title":{},"body":{"controllers/NotificationTemplateController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:64",{"_index":1302,"title":{},"body":{"controllers/NotificationTemplateController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:79",{"_index":1305,"title":{},"body":{"controllers/NotificationTemplateController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:92",{"_index":1304,"title":{},"body":{"controllers/NotificationTemplateController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts",{"_index":1368,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:104",{"_index":1385,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:116",{"_index":1384,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:128",{"_index":1392,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:37",{"_index":1373,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:49",{"_index":1374,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:63",{"_index":1375,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:76",{"_index":1382,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:90",{"_index":1386,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/dto/newlayer.dto.ts",{"_index":1168,"title":{},"body":{"classes/NewLayerCreateDto.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/dto/newlayer.dto.ts:25",{"_index":1182,"title":{},"body":{"classes/NewLayerCreateDto.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/dto/newlayer.dto.ts:31",{"_index":1172,"title":{},"body":{"classes/NewLayerCreateDto.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/dto/newlayer.dto.ts:35",{"_index":1181,"title":{},"body":{"classes/NewLayerCreateDto.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/dto/newlayer.dto.ts:37",{"_index":1174,"title":{},"body":{"classes/NewLayerCreateDto.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/dto/newlayer.dto.ts:39",{"_index":1183,"title":{},"body":{"classes/NewLayerCreateDto.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/dto/newlayer.dto.ts:43",{"_index":1179,"title":{},"body":{"classes/NewLayerCreateDto.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts",{"_index":151,"title":{},"body":{"entities/AplEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts:13",{"_index":173,"title":{},"body":{"entities/AplEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts:15",{"_index":169,"title":{},"body":{"entities/AplEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts:17",{"_index":174,"title":{},"body":{"entities/AplEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts:19",{"_index":166,"title":{},"body":{"entities/AplEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts",{"_index":182,"title":{},"body":{"entities/AplItemEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:13",{"_index":207,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:15",{"_index":211,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:17",{"_index":206,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:19",{"_index":205,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:21",{"_index":210,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:23",{"_index":202,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:25",{"_index":204,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:27",{"_index":208,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:29",{"_index":209,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:32",{"_index":201,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts",{"_index":448,"title":{},"body":{"entities/AssetEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:12",{"_index":483,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:14",{"_index":500,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:16",{"_index":480,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:18",{"_index":476,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:20",{"_index":477,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:22",{"_index":470,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:24",{"_index":478,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:26",{"_index":494,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:28",{"_index":493,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:30",{"_index":495,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:32",{"_index":486,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:34",{"_index":484,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:36",{"_index":492,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:38",{"_index":496,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:40",{"_index":498,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:42",{"_index":497,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:44",{"_index":501,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:46",{"_index":475,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:48",{"_index":474,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:50",{"_index":472,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:52",{"_index":473,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:54",{"_index":471,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:56",{"_index":499,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:58",{"_index":485,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:60",{"_index":479,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts",{"_index":558,"title":{},"body":{"entities/CustomerEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:12",{"_index":567,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:13",{"_index":566,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:14",{"_index":564,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:15",{"_index":569,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:16",{"_index":568,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:17",{"_index":565,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts",{"_index":613,"title":{},"body":{"entities/EventDetailsEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:15",{"_index":639,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:17",{"_index":643,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:18",{"_index":628,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:20",{"_index":647,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:22",{"_index":636,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:24",{"_index":637,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:25",{"_index":629,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:26",{"_index":648,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:27",{"_index":638,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:28",{"_index":649,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:29",{"_index":650,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:30",{"_index":644,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:31",{"_index":630,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:33",{"_index":635,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts",{"_index":654,"title":{},"body":{"entities/EventParamDetailsEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts:15",{"_index":663,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts:16",{"_index":664,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts:17",{"_index":665,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts:20",{"_index":662,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts",{"_index":668,"title":{},"body":{"entities/FlighLocationEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:13",{"_index":713,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:14",{"_index":717,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:15",{"_index":704,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:17",{"_index":703,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:19",{"_index":706,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:20",{"_index":693,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:21",{"_index":709,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:22",{"_index":694,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:23",{"_index":695,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:24",{"_index":714,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:25",{"_index":716,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:28",{"_index":702,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:30",{"_index":707,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:32",{"_index":712,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:33",{"_index":692,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:34",{"_index":708,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:36",{"_index":697,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:38",{"_index":696,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:40",{"_index":691,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:42",{"_index":690,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:43",{"_index":710,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:44",{"_index":711,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:45",{"_index":705,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:46",{"_index":715,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts",{"_index":720,"title":{},"body":{"entities/FlighPlanEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts:14",{"_index":731,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts:16",{"_index":726,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts:18",{"_index":730,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts:20",{"_index":729,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts",{"_index":753,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts:14",{"_index":770,"title":{},"body":{"entities/GeofenceAssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts:16",{"_index":768,"title":{},"body":{"entities/GeofenceAssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts:18",{"_index":773,"title":{},"body":{"entities/GeofenceAssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts:22",{"_index":762,"title":{},"body":{"entities/GeofenceAssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts:25",{"_index":765,"title":{},"body":{"entities/GeofenceAssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts",{"_index":735,"title":{},"body":{"entities/GeoObjectEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:14",{"_index":749,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:15",{"_index":743,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:16",{"_index":745,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:17",{"_index":744,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:18",{"_index":748,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:20",{"_index":747,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts",{"_index":811,"title":{},"body":{"entities/GeofenceEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:17",{"_index":850,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:19",{"_index":855,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:21",{"_index":828,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:23",{"_index":861,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:25",{"_index":859,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:27",{"_index":831,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:29",{"_index":847,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:31",{"_index":843,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:33",{"_index":849,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:35",{"_index":845,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:37",{"_index":834,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:39",{"_index":865,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:41",{"_index":863,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:43",{"_index":830,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:45",{"_index":837,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:48",{"_index":867,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:51",{"_index":841,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:54",{"_index":839,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:57",{"_index":853,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts",{"_index":876,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts:13",{"_index":879,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts:15",{"_index":878,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts:17",{"_index":885,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts:21",{"_index":882,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts:25",{"_index":884,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/group.entity.ts",{"_index":969,"title":{},"body":{"entities/GroupEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/group.entity.ts:14",{"_index":970,"title":{},"body":{"entities/GroupEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts",{"_index":1016,"title":{},"body":{"entities/LandmarkEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts:15",{"_index":1030,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts:17",{"_index":1019,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts:19",{"_index":1029,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts:23",{"_index":1027,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts:27",{"_index":1024,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts",{"_index":1071,"title":{},"body":{"entities/LayerEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:14",{"_index":1082,"title":{},"body":{"entities/LayerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:16",{"_index":1076,"title":{},"body":{"entities/LayerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:18",{"_index":1077,"title":{},"body":{"entities/LayerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:20",{"_index":1078,"title":{},"body":{"entities/LayerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:22",{"_index":1084,"title":{},"body":{"entities/LayerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:24",{"_index":1083,"title":{},"body":{"entities/LayerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:26",{"_index":1079,"title":{},"body":{"entities/LayerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:28",{"_index":1081,"title":{},"body":{"entities/LayerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/login.entity.ts",{"_index":1426,"title":{},"body":{"entities/UserLogin.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/login.entity.ts:15",{"_index":1427,"title":{},"body":{"entities/UserLogin.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/login.entity.ts:18",{"_index":1429,"title":{},"body":{"entities/UserLogin.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/login.entity.ts:21",{"_index":1428,"title":{},"body":{"entities/UserLogin.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/newlayer.entity.ts",{"_index":1201,"title":{},"body":{"entities/NewLayerEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/newlayer.entity.ts:14",{"_index":1202,"title":{},"body":{"entities/NewLayerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/newlayer.entity.ts:16",{"_index":1205,"title":{},"body":{"entities/NewLayerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/newlayer.entity.ts:19",{"_index":1204,"title":{},"body":{"entities/NewLayerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/newlayerdata.entity.ts",{"_index":1193,"title":{},"body":{"entities/NewLayerDataEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/newlayerdata.entity.ts:12",{"_index":1195,"title":{},"body":{"entities/NewLayerDataEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/newlayerdata.entity.ts:14",{"_index":1194,"title":{},"body":{"entities/NewLayerDataEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/newlayerdata.entity.ts:16",{"_index":1196,"title":{},"body":{"entities/NewLayerDataEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/newlayerdata.entity.ts:19",{"_index":1198,"title":{},"body":{"entities/NewLayerDataEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts",{"_index":1236,"title":{},"body":{"entities/NotificationEmailEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts:13",{"_index":1239,"title":{},"body":{"entities/NotificationEmailEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts:15",{"_index":1237,"title":{},"body":{"entities/NotificationEmailEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts:17",{"_index":1242,"title":{},"body":{"entities/NotificationEmailEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts:19",{"_index":1238,"title":{},"body":{"entities/NotificationEmailEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts:22",{"_index":1241,"title":{},"body":{"entities/NotificationEmailEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts",{"_index":1245,"title":{},"body":{"entities/NotificationEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:18",{"_index":1258,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:20",{"_index":1261,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:22",{"_index":1263,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:24",{"_index":1252,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:26",{"_index":1254,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:29",{"_index":1257,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:32",{"_index":1260,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:35",{"_index":1266,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.template.entity.ts",{"_index":1310,"title":{},"body":{"entities/NotificationTemplateEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.template.entity.ts:13",{"_index":1313,"title":{},"body":{"entities/NotificationTemplateEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.template.entity.ts:15",{"_index":1314,"title":{},"body":{"entities/NotificationTemplateEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.template.entity.ts:17",{"_index":1315,"title":{},"body":{"entities/NotificationTemplateEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts",{"_index":1330,"title":{},"body":{"entities/NotificationUserEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts:14",{"_index":1332,"title":{},"body":{"entities/NotificationUserEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts:16",{"_index":1331,"title":{},"body":{"entities/NotificationUserEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts:18",{"_index":1334,"title":{},"body":{"entities/NotificationUserEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts:21",{"_index":1333,"title":{},"body":{"entities/NotificationUserEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts:25",{"_index":1335,"title":{},"body":{"entities/NotificationUserEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts",{"_index":1417,"title":{},"body":{"entities/UserEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts:15",{"_index":1423,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts:17",{"_index":1422,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts:19",{"_index":1421,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts:21",{"_index":1419,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts:23",{"_index":1420,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts",{"_index":219,"title":{},"body":{"injectables/AplService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:17",{"_index":227,"title":{},"body":{"injectables/AplService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:31",{"_index":229,"title":{},"body":{"injectables/AplService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:39",{"_index":232,"title":{},"body":{"injectables/AplService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:46",{"_index":230,"title":{},"body":{"injectables/AplService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:55",{"_index":233,"title":{},"body":{"injectables/AplService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:67",{"_index":235,"title":{},"body":{"injectables/AplService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts",{"_index":503,"title":{},"body":{"injectables/AssetService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:18",{"_index":505,"title":{},"body":{"injectables/AssetService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:34",{"_index":508,"title":{},"body":{"injectables/AssetService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:43",{"_index":510,"title":{},"body":{"injectables/AssetService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:50",{"_index":509,"title":{},"body":{"injectables/AssetService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:59",{"_index":514,"title":{},"body":{"injectables/AssetService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:70",{"_index":515,"title":{},"body":{"injectables/AssetService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:89",{"_index":512,"title":{},"body":{"injectables/AssetService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts",{"_index":570,"title":{},"body":{"injectables/CustomerService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:18",{"_index":571,"title":{},"body":{"injectables/CustomerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:33",{"_index":572,"title":{},"body":{"injectables/CustomerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:42",{"_index":574,"title":{},"body":{"injectables/CustomerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:50",{"_index":573,"title":{},"body":{"injectables/CustomerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:58",{"_index":575,"title":{},"body":{"injectables/CustomerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:69",{"_index":576,"title":{},"body":{"injectables/CustomerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts",{"_index":601,"title":{},"body":{"injectables/EventDetailService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:18",{"_index":603,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:33",{"_index":604,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:41",{"_index":608,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:48",{"_index":606,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:57",{"_index":609,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:68",{"_index":610,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts",{"_index":887,"title":{},"body":{"injectables/GeofenceService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:103",{"_index":897,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:116",{"_index":898,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:27",{"_index":891,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:48",{"_index":893,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:67",{"_index":896,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:85",{"_index":894,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/group.service.ts",{"_index":972,"title":{},"body":{"injectables/GroupService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:18",{"_index":973,"title":{},"body":{"injectables/GroupService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:33",{"_index":974,"title":{},"body":{"injectables/GroupService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:42",{"_index":976,"title":{},"body":{"injectables/GroupService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:49",{"_index":975,"title":{},"body":{"injectables/GroupService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:57",{"_index":977,"title":{},"body":{"injectables/GroupService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:69",{"_index":978,"title":{},"body":{"injectables/GroupService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts",{"_index":1033,"title":{},"body":{"injectables/LandmarkService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:18",{"_index":1035,"title":{},"body":{"injectables/LandmarkService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:33",{"_index":1036,"title":{},"body":{"injectables/LandmarkService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:41",{"_index":1042,"title":{},"body":{"injectables/LandmarkService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:48",{"_index":1040,"title":{},"body":{"injectables/LandmarkService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:57",{"_index":1043,"title":{},"body":{"injectables/LandmarkService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:69",{"_index":1044,"title":{},"body":{"injectables/LandmarkService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts",{"_index":1085,"title":{},"body":{"injectables/LayerService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:19",{"_index":1086,"title":{},"body":{"injectables/LayerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:33",{"_index":1087,"title":{},"body":{"injectables/LayerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:42",{"_index":1089,"title":{},"body":{"injectables/LayerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:49",{"_index":1088,"title":{},"body":{"injectables/LayerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:58",{"_index":1091,"title":{},"body":{"injectables/LayerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:70",{"_index":1092,"title":{},"body":{"injectables/LayerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/newlayer.service.ts",{"_index":1208,"title":{},"body":{"injectables/NewLayerService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/newlayer.service.ts:18",{"_index":1209,"title":{},"body":{"injectables/NewLayerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/newlayer.service.ts:33",{"_index":1210,"title":{},"body":{"injectables/NewLayerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/newlayer.service.ts:41",{"_index":1212,"title":{},"body":{"injectables/NewLayerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/newlayer.service.ts:48",{"_index":1211,"title":{},"body":{"injectables/NewLayerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/newlayer.service.ts:57",{"_index":1213,"title":{},"body":{"injectables/NewLayerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/newlayer.service.ts:69",{"_index":1214,"title":{},"body":{"injectables/NewLayerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts",{"_index":1272,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:20",{"_index":1275,"title":{},"body":{"injectables/NotificationService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:41",{"_index":1276,"title":{},"body":{"injectables/NotificationService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:55",{"_index":1280,"title":{},"body":{"injectables/NotificationService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:63",{"_index":1279,"title":{},"body":{"injectables/NotificationService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:73",{"_index":1282,"title":{},"body":{"injectables/NotificationService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:85",{"_index":1283,"title":{},"body":{"injectables/NotificationService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts",{"_index":1317,"title":{},"body":{"injectables/NotificationTemplateService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:20",{"_index":1319,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:35",{"_index":1321,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:44",{"_index":1323,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:52",{"_index":1322,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:61",{"_index":1326,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:73",{"_index":1328,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:92",{"_index":1324,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/user.service.ts",{"_index":1437,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:100",{"_index":1450,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:111",{"_index":1456,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:23",{"_index":1440,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:38",{"_index":1441,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:47",{"_index":1448,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:55",{"_index":1447,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:62",{"_index":1444,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:70",{"_index":1451,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:81",{"_index":1454,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/starnavigationapi/src/app/providers/database/mysql/provider.module.ts",{"_index":1116,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{}}}],["apps/starnavigationapi/src/app/providers/database/postgres/provider.module.ts",{"_index":1338,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["appservice",{"_index":346,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":1175,"title":{},"body":{"classes/NewLayerCreateDto.html":{}}}],["artifacts",{"_index":1652,"title":{},"body":{"index.html":{}}}],["asset",{"_index":405,"title":{},"body":{"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceEntity.html":{}}}],["asset'})@apiresponse({status",{"_index":409,"title":{},"body":{"controllers/AssetController.html":{}}}],["asset.entity",{"_index":776,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/NewLayerDataEntity.html":{}}}],["asset.id",{"_index":935,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["asset_id",{"_index":764,"title":{},"body":{"entities/GeofenceAssetEntity.html":{}}}],["assetcolor",{"_index":450,"title":{},"body":{"entities/AssetEntity.html":{}}}],["assetcontroller",{"_index":403,"title":{"controllers/AssetController.html":{}},"body":{"controllers/AssetController.html":{},"coverage.html":{}}}],["assetdto",{"_index":407,"title":{},"body":{"controllers/AssetController.html":{}}}],["assetentity",{"_index":447,"title":{"entities/AssetEntity.html":{}},"body":{"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"entities/GeofenceAssetEntity.html":{},"injectables/GeofenceService.html":{},"entities/NewLayerDataEntity.html":{},"coverage.html":{}}}],["assetentity,'asset','a.asset_id",{"_index":934,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["assetid",{"_index":755,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"injectables/GeofenceService.html":{}}}],["assetmake",{"_index":451,"title":{},"body":{"entities/AssetEntity.html":{}}}],["assetmodel",{"_index":452,"title":{},"body":{"entities/AssetEntity.html":{}}}],["assetregistrationnumber",{"_index":453,"title":{},"body":{"entities/AssetEntity.html":{}}}],["assets",{"_index":413,"title":{},"body":{"controllers/AssetController.html":{},"injectables/AssetService.html":{}}}],["assets/apl",{"_index":108,"title":{},"body":{"controllers/AplController.html":{}}}],["assetserialnumber",{"_index":454,"title":{},"body":{"entities/AssetEntity.html":{}}}],["assetservice",{"_index":429,"title":{"injectables/AssetService.html":{}},"body":{"controllers/AssetController.html":{},"injectables/AssetService.html":{},"coverage.html":{}}}],["assetservices",{"_index":506,"title":{},"body":{"injectables/AssetService.html":{}}}],["async",{"_index":15,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"modules/PostgresDatabaseProviderModule.html":{},"controllers/UserController.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["authentication",{"_index":1412,"title":{},"body":{"controllers/UserController.html":{}}}],["authentication'})@apiresponse({status",{"_index":1391,"title":{},"body":{"controllers/UserController.html":{}}}],["automatically",{"_index":1643,"title":{},"body":{"index.html":{}}}],["available",{"_index":1720,"title":{},"body":{"modules.html":{}}}],["await",{"_index":127,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["backend",{"_index":1714,"title":{},"body":{"index.html":{}}}],["based",{"_index":59,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["below",{"_index":1606,"title":{},"body":{"index.html":{}}}],["body",{"_index":84,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":203,"title":{},"body":{"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerEntity.html":{}}}],["both",{"_index":1712,"title":{},"body":{"index.html":{}}}],["brakes",{"_index":1509,"title":{},"body":{"dependencies.html":{}}}],["browse",{"_index":1719,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1716,"title":{},"body":{"modules.html":{}}}],["buffer_distance",{"_index":827,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["bufferdistance",{"_index":738,"title":{},"body":{"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{}}}],["bufferheight",{"_index":674,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["bufferwidth",{"_index":675,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["build",{"_index":1585,"title":{},"body":{"index.html":{}}}],["builder",{"_index":1511,"title":{},"body":{"dependencies.html":{}}}],["building",{"_index":1700,"title":{},"body":{"index.html":{}}}],["caching",{"_index":1681,"title":{},"body":{"index.html":{}}}],["capabilities",{"_index":1588,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":197,"title":{},"body":{"entities/AplItemEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NewLayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["cascade'})@joincolumn({name",{"_index":881,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["catch(err){console.log(err.message",{"_index":1471,"title":{},"body":{"injectables/UserService.html":{}}}],["category",{"_index":1169,"title":{},"body":{"classes/NewLayerCreateDto.html":{},"entities/NewLayerEntity.html":{}}}],["change",{"_index":1645,"title":{},"body":{"index.html":{}}}],["checks",{"_index":236,"title":{},"body":{"injectables/AplService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["city",{"_index":1072,"title":{},"body":{"entities/LayerEntity.html":{}}}],["class",{"_index":111,"title":{"classes/NewLayerCreateDto.html":{}},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"overview.html":{}}}],["classes",{"_index":1167,"title":{},"body":{"classes/NewLayerCreateDto.html":{}}}],["client",{"_index":382,"title":{},"body":{"modules/AppModule.html":{}}}],["cloud",{"_index":1678,"title":{},"body":{"index.html":{}}}],["cluster_appconfigmodule",{"_index":277,"title":{},"body":{"modules/AppConfigModule.html":{},"overview.html":{}}}],["cluster_appconfigmodule_exports",{"_index":278,"title":{},"body":{"modules/AppConfigModule.html":{},"overview.html":{}}}],["cluster_appconfigmodule_providers",{"_index":279,"title":{},"body":{"modules/AppConfigModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":357,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":358,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":359,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_httpconfigmodule",{"_index":983,"title":{},"body":{"modules/HttpConfigModule.html":{},"overview.html":{}}}],["cluster_httpconfigmodule_exports",{"_index":984,"title":{},"body":{"modules/HttpConfigModule.html":{},"overview.html":{}}}],["cluster_mysqlconfigmodule",{"_index":1096,"title":{},"body":{"modules/MySqlConfigModule.html":{},"overview.html":{}}}],["cluster_mysqlconfigmodule_exports",{"_index":1097,"title":{},"body":{"modules/MySqlConfigModule.html":{},"overview.html":{}}}],["cluster_postgressqlconfigmodule",{"_index":1353,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{},"overview.html":{}}}],["cluster_postgressqlconfigmodule_exports",{"_index":1354,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{},"overview.html":{}}}],["code",{"_index":1647,"title":{},"body":{"index.html":{}}}],["color",{"_index":184,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["column",{"_index":175,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{}}}],["column(\"decimal",{"_index":502,"title":{},"body":{"entities/AssetEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceEntity.html":{}}}],["column('decimal",{"_index":487,"title":{},"body":{"entities/AssetEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceEntity.html":{}}}],["column({length",{"_index":481,"title":{},"body":{"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NewLayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/UserEntity.html":{}}}],["column({name",{"_index":763,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NotificationEntity.html":{}}}],["column({nullable",{"_index":167,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceEntity.html":{},"entities/LayerEntity.html":{},"entities/UserEntity.html":{}}}],["column({type",{"_index":641,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeofenceEntity.html":{},"entities/LandmarkEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/UserEntity.html":{}}}],["community",{"_index":1623,"title":{},"body":{"index.html":{}}}],["component",{"_index":1650,"title":{},"body":{"index.html":{}}}],["computation",{"_index":1680,"title":{},"body":{"index.html":{}}}],["conains",{"_index":321,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["config",{"_index":1366,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["config/app/config.module",{"_index":375,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database/mysql/config.module",{"_index":1121,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{}}}],["config/database/mysql/configuration.service",{"_index":1122,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{}}}],["config/database/postgres/config.module",{"_index":1340,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["config/database/postgres/configuration.service",{"_index":1342,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["configmodule",{"_index":290,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["configmodule.forroot",{"_index":295,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["configservice",{"_index":281,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{},"overview.html":{}}}],["configuration",{"_index":292,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["configuration.service",{"_index":293,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["configure",{"_index":362,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":363,"title":{},"body":{"modules/AppModule.html":{}}}],["confirm",{"_index":1556,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["confirmenum",{"_index":1545,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["connect",{"_index":1693,"title":{},"body":{"index.html":{}}}],["connecting",{"_index":1343,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["connectivity",{"_index":1114,"title":{},"body":{"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["consist",{"_index":1034,"title":{},"body":{"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["console.log('account",{"_index":1462,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log('data",{"_index":1290,"title":{},"body":{"injectables/NotificationService.html":{}}}],["console.log('id",{"_index":940,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["console.log(logindata",{"_index":1467,"title":{},"body":{"injectables/UserService.html":{}}}],["const",{"_index":125,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":116,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["constructor(configservice",{"_index":326,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["constructor(private",{"_index":117,"title":{},"body":{"controllers/AplController.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["constructor(repository",{"_index":223,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["consul",{"_index":1516,"title":{},"body":{"dependencies.html":{}}}],["consumer",{"_index":366,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(loggermiddleware).forroutes",{"_index":392,"title":{},"body":{"modules/AppModule.html":{}}}],["contains",{"_index":152,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NewLayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/NotificationUserEntity.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"miscellaneous/enumerations.html":{}}}],["controller",{"_index":0,"title":{"controllers/AplController.html":{},"controllers/AppController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AplController.html":{},"controllers/AppController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AplController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["core",{"_index":1607,"title":{},"body":{"index.html":{}}}],["country",{"_index":1073,"title":{},"body":{"entities/LayerEntity.html":{}}}],["countrycode",{"_index":560,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["countryid",{"_index":455,"title":{},"body":{"entities/AssetEntity.html":{}}}],["coverage",{"_index":1472,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":16,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["create(@body",{"_index":124,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["create(data",{"_index":22,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["created",{"_index":33,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["created_at",{"_index":767,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NewLayerDataEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["createdat",{"_index":756,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerDataEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["createdatecolumn",{"_index":774,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NewLayerDataEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["createdatecolumn({name",{"_index":766,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NewLayerDataEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["createquerybuilder",{"_index":1325,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["creates",{"_index":154,"title":{},"body":{"entities/AplEntity.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"entities/FlighLocationEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"entities/NewLayerEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"entities/NotificationTemplateEntity.html":{},"entities/NotificationUserEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{}}}],["creation",{"_index":38,"title":{},"body":{"controllers/AplController.html":{},"controllers/CustomerController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["customer",{"_index":418,"title":{},"body":{"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{}}}],["customer'})@apiresponse({status",{"_index":534,"title":{},"body":{"controllers/CustomerController.html":{}}}],["customer.id",{"_index":921,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["customer_id",{"_index":829,"title":{},"body":{"entities/GeofenceEntity.html":{},"entities/NotificationEntity.html":{}}}],["customercontroller",{"_index":530,"title":{"controllers/CustomerController.html":{}},"body":{"controllers/CustomerController.html":{},"coverage.html":{}}}],["customerdto",{"_index":533,"title":{},"body":{"controllers/CustomerController.html":{},"injectables/CustomerService.html":{}}}],["customerentity",{"_index":557,"title":{"entities/CustomerEntity.html":{}},"body":{"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"injectables/GeofenceService.html":{},"coverage.html":{}}}],["customerid",{"_index":160,"title":{},"body":{"entities/AplEntity.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"entities/GeofenceEntity.html":{},"entities/LayerEntity.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{}}}],["customerid'})@apiresponse({status",{"_index":416,"title":{},"body":{"controllers/AssetController.html":{}}}],["customers",{"_index":532,"title":{},"body":{"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{}}}],["customerservice",{"_index":546,"title":{"injectables/CustomerService.html":{}},"body":{"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"coverage.html":{}}}],["cypress",{"_index":1667,"title":{},"body":{"index.html":{}}}],["d",{"_index":126,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{}}}],["data",{"_index":43,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["data.emailtemplate",{"_index":1294,"title":{},"body":{"injectables/NotificationService.html":{}}}],["data.emailtemplateid",{"_index":1292,"title":{},"body":{"injectables/NotificationService.html":{}}}],["data.notifications.foreach(o",{"_index":917,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["data.smstemplate",{"_index":1295,"title":{},"body":{"injectables/NotificationService.html":{}}}],["data.smstemplateid",{"_index":1293,"title":{},"body":{"injectables/NotificationService.html":{}}}],["data.vehicles.foreach(o",{"_index":912,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["data?:array",{"_index":1191,"title":{},"body":{"classes/NewLayerCreateDto.html":{}}}],["database",{"_index":51,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceEntity.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["databasetype",{"_index":1119,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["date",{"_index":645,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerDataEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["db_logging",{"_index":1112,"title":{},"body":{"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["db_synchronize",{"_index":1110,"title":{},"body":{"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["decorators",{"_index":24,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"controllers/AppController.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"controllers/EventDetailController.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"entities/NotificationUserEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{}}}],["default",{"_index":238,"title":{},"body":{"injectables/AplService.html":{},"modules/AppModule.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/GeofenceEntity.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["default('development",{"_index":308,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["defined",{"_index":34,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["defines",{"_index":316,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["delete",{"_index":72,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(':id",{"_index":140,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["delete(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":420,"title":{},"body":{"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/GeofenceController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["delete(':id')@httpcode(httpstatus.ok)@useinterceptors(new",{"_index":71,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{},"controllers/GroupController.html":{}}}],["deleted",{"_index":1453,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["deletes",{"_index":76,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"injectables/NotificationService.html":{}}}],["deletion",{"_index":1058,"title":{},"body":{"controllers/LayerController.html":{},"controllers/UserController.html":{}}}],["dependencies",{"_index":276,"title":{"dependencies.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":1708,"title":{},"body":{"index.html":{}}}],["describes",{"_index":1189,"title":{},"body":{"classes/NewLayerCreateDto.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["description:'forbidden",{"_index":1414,"title":{},"body":{"controllers/UserController.html":{}}}],["detail",{"_index":586,"title":{},"body":{"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"injectables/UserService.html":{}}}],["detail'})@apiresponse({status",{"_index":585,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["details",{"_index":544,"title":{},"body":{"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{}}}],["dev",{"_index":1610,"title":{},"body":{"index.html":{}}}],["developers",{"_index":1715,"title":{},"body":{"index.html":{}}}],["developing",{"_index":1594,"title":{},"body":{"index.html":{}}}],["development",{"_index":1639,"title":{},"body":{"index.html":{}}}],["devicestate",{"_index":456,"title":{},"body":{"entities/AssetEntity.html":{}}}],["devicetype",{"_index":457,"title":{},"body":{"entities/AssetEntity.html":{}}}],["devtools",{"_index":1604,"title":{},"body":{"index.html":{}}}],["diagram",{"_index":1672,"title":{},"body":{"index.html":{}}}],["different",{"_index":1595,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1655,"title":{},"body":{"index.html":{}}}],["disable",{"_index":794,"title":{},"body":{"controllers/GeofenceController.html":{},"entities/GroupEntity.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationTemplateController.html":{},"entities/UserEntity.html":{}}}],["disabled",{"_index":1573,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["displayoption",{"_index":185,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["dist",{"_index":1654,"title":{},"body":{"index.html":{}}}],["distributed",{"_index":1679,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1473,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dto/apl.dto",{"_index":100,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{}}}],["dto/asset.dto",{"_index":428,"title":{},"body":{"controllers/AssetController.html":{}}}],["dto/customer.dto",{"_index":545,"title":{},"body":{"controllers/CustomerController.html":{},"injectables/CustomerService.html":{}}}],["dto/event.detail.dto",{"_index":593,"title":{},"body":{"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{}}}],["dto/geofence.dto",{"_index":799,"title":{},"body":{"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{}}}],["dto/group.dto",{"_index":955,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["dto/landmark.create.dto",{"_index":1005,"title":{},"body":{"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{}}}],["dto/layer.create.dto",{"_index":517,"title":{},"body":{"injectables/AssetService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{}}}],["dto/login.dto",{"_index":1394,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/newlayer.dto",{"_index":1156,"title":{},"body":{"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{}}}],["dto/notification.dto",{"_index":1228,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["dto/notification.template.dto",{"_index":1306,"title":{},"body":{"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{}}}],["dto/state.interface",{"_index":97,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/user.dto",{"_index":1395,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e2e",{"_index":1666,"title":{},"body":{"index.html":{}}}],["eager",{"_index":195,"title":{},"body":{"entities/AplItemEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceEntity.html":{},"entities/LandmarkEntity.html":{},"entities/NewLayerEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["email",{"_index":561,"title":{},"body":{"entities/CustomerEntity.html":{},"entities/NotificationEmailEntity.html":{},"miscellaneous/enumerations.html":{}}}],["email_template_id",{"_index":1256,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["emails",{"_index":1247,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["emailtemplate",{"_index":1248,"title":{},"body":{"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{}}}],["enable",{"_index":1686,"title":{},"body":{"index.html":{}}}],["end",{"_index":1665,"title":{},"body":{"index.html":{}}}],["entities",{"_index":150,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"modules/MysqlDatabaseProviderModule.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"overview.html":{}}}],["entity",{"_index":148,"title":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/NotificationUserEntity.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{}},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/NotificationUserEntity.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"coverage.html":{}}}],["entity({name",{"_index":180,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NewLayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/UserEntity.html":{}}}],["entity/apl.entity",{"_index":247,"title":{},"body":{"injectables/AplService.html":{}}}],["entity/asset.entity",{"_index":518,"title":{},"body":{"injectables/AssetService.html":{},"injectables/GeofenceService.html":{}}}],["entity/customer.entity",{"_index":579,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/GeofenceService.html":{}}}],["entity/event.details.entity",{"_index":595,"title":{},"body":{"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{}}}],["entity/genfence.asset.entity",{"_index":907,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["entity/geofence.entity",{"_index":800,"title":{},"body":{"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{}}}],["entity/geofence.notification.entity",{"_index":904,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["entity/group.entity",{"_index":980,"title":{},"body":{"injectables/GroupService.html":{}}}],["entity/landmark.entity",{"_index":102,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/UserController.html":{}}}],["entity/layer.entity",{"_index":901,"title":{},"body":{"injectables/GeofenceService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{}}}],["entity/newlayer.entity",{"_index":1155,"title":{},"body":{"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{}}}],["entity/notification.email.entity",{"_index":1286,"title":{},"body":{"injectables/NotificationService.html":{}}}],["entity/notification.entity",{"_index":906,"title":{},"body":{"injectables/GeofenceService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["entity/notification.template.entity",{"_index":1230,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{}}}],["entity/user.entity",{"_index":903,"title":{},"body":{"injectables/GeofenceService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["entries",{"_index":895,"title":{},"body":{"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LayerService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["entry",{"_index":737,"title":{},"body":{"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{},"injectables/GeofenceService.html":{},"injectables/LandmarkService.html":{},"injectables/NewLayerService.html":{}}}],["enum",{"_index":642,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/GeofenceEntity.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{},"miscellaneous/enumerations.html":{}}}],["enum/event.severity.enum",{"_index":868,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["enum/notification.type.enum",{"_index":1267,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["enum/notify.enum",{"_index":869,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["enum/packet.type.enum",{"_index":651,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{}}}],["enum/status.enum",{"_index":245,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["enum/user.type.enum",{"_index":1393,"title":{},"body":{"controllers/UserController.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["enumerations",{"_index":1544,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":322,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["error",{"_index":262,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["error(\"method",{"_index":1431,"title":{},"body":{"entities/UserLogin.html":{}}}],["eslint",{"_index":793,"title":{},"body":{"controllers/GeofenceController.html":{},"entities/GroupEntity.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationTemplateController.html":{},"entities/UserEntity.html":{}}}],["eslint/no",{"_index":796,"title":{},"body":{"controllers/GeofenceController.html":{},"entities/GroupEntity.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationTemplateController.html":{},"entities/UserEntity.html":{}}}],["esn",{"_index":161,"title":{},"body":{"entities/AplEntity.html":{},"entities/AssetEntity.html":{}}}],["estimatedarrivaltime",{"_index":676,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["estimateddeparturetime",{"_index":677,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["etc",{"_index":1602,"title":{},"body":{"index.html":{}}}],["even",{"_index":1691,"title":{},"body":{"index.html":{}}}],["event",{"_index":583,"title":{},"body":{"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventParamDetailsEntity.html":{},"miscellaneous/enumerations.html":{}}}],["event.details.entity",{"_index":666,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["event.eventparamdetails",{"_index":659,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["event.param.details.entity",{"_index":652,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["event_details",{"_index":614,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["event_id",{"_index":661,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["event_param",{"_index":656,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["event_param_details",{"_index":655,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["event_severity",{"_index":833,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["eventdetaial",{"_index":602,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["eventdetail",{"_index":605,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["eventdetailcontroller",{"_index":581,"title":{"controllers/EventDetailController.html":{}},"body":{"controllers/EventDetailController.html":{},"coverage.html":{}}}],["eventdetaildto",{"_index":584,"title":{},"body":{"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{}}}],["eventdetails",{"_index":633,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{}}}],["eventdetailsentity",{"_index":594,"title":{"entities/EventDetailsEntity.html":{}},"body":{"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"coverage.html":{}}}],["eventdetailservice",{"_index":596,"title":{"injectables/EventDetailService.html":{}},"body":{"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"coverage.html":{}}}],["eventid",{"_index":617,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["eventparamdetails",{"_index":618,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["eventparamdetailsentity",{"_index":631,"title":{"entities/EventParamDetailsEntity.html":{}},"body":{"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"coverage.html":{}}}],["events",{"_index":607,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["eventseverity",{"_index":812,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["eventseverity?:eventseverityenum",{"_index":875,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["eventseverityenum",{"_index":832,"title":{},"body":{"entities/GeofenceEntity.html":{},"miscellaneous/enumerations.html":{}}}],["eventseverityenum.low",{"_index":874,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["exception",{"_index":1459,"title":{},"body":{"injectables/UserService.html":{}}}],["execute",{"_index":1660,"title":{},"body":{"index.html":{}}}],["execution",{"_index":1683,"title":{},"body":{"index.html":{}}}],["exist",{"_index":1445,"title":{},"body":{"injectables/UserService.html":{}}}],["existing",{"_index":425,"title":{},"body":{"controllers/AssetController.html":{}}}],["experience",{"_index":1711,"title":{},"body":{"index.html":{}}}],["export",{"_index":110,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["exported",{"_index":1123,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["exports",{"_index":287,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["expose",{"_index":1173,"title":{},"body":{"classes/NewLayerCreateDto.html":{}}}],["expose()@apiproperty({type",{"_index":1176,"title":{},"body":{"classes/NewLayerCreateDto.html":{}}}],["express",{"_index":1502,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["extend.entity",{"_index":179,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NewLayerEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/UserEntity.html":{}}}],["extendentity",{"_index":178,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NewLayerEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/UserEntity.html":{}}}],["extends",{"_index":181,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NewLayerEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/UserEntity.html":{}}}],["extensible",{"_index":1584,"title":{},"body":{"index.html":{}}}],["false",{"_index":196,"title":{},"body":{"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GroupEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/UserEntity.html":{}}}],["false})@joincolumn({name",{"_index":199,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["fast",{"_index":1583,"title":{},"body":{"index.html":{}}}],["fastify",{"_index":1518,"title":{},"body":{"dependencies.html":{}}}],["field",{"_index":577,"title":{},"body":{"injectables/CustomerService.html":{},"entities/GeofenceNotificationEntity.html":{}}}],["fields",{"_index":153,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/NotificationUserEntity.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["files",{"_index":1646,"title":{},"body":{"index.html":{}}}],["fin",{"_index":47,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/EventDetailController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationTemplateController.html":{}}}],["find",{"_index":55,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall",{"_index":17,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findassetofuser",{"_index":406,"title":{},"body":{"controllers/AssetController.html":{}}}],["findassetofuser(@param('id",{"_index":441,"title":{},"body":{"controllers/AssetController.html":{}}}],["findassetofuser(id",{"_index":414,"title":{},"body":{"controllers/AssetController.html":{}}}],["findbyaccounttype",{"_index":1439,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyaccounttype(accounttype",{"_index":1446,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid",{"_index":222,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["findbyid(id",{"_index":231,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["finding",{"_index":538,"title":{},"body":{"controllers/CustomerController.html":{}}}],["findone",{"_index":18,"title":{},"body":{"controllers/AplController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["findone(@param('id",{"_index":135,"title":{},"body":{"controllers/AplController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["findone(id",{"_index":53,"title":{},"body":{"controllers/AplController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["findonebyaccounttype",{"_index":1369,"title":{},"body":{"controllers/UserController.html":{}}}],["findonebyaccounttype(@param('accounttype",{"_index":1404,"title":{},"body":{"controllers/UserController.html":{}}}],["findonebyaccounttype(accounttype",{"_index":1376,"title":{},"body":{"controllers/UserController.html":{}}}],["finds",{"_index":50,"title":{},"body":{"controllers/AplController.html":{},"injectables/AssetService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{}}}],["finduserasset",{"_index":504,"title":{},"body":{"injectables/AssetService.html":{}}}],["finduserasset(@param",{"_index":438,"title":{},"body":{"controllers/AssetController.html":{}}}],["finduserasset(customerid",{"_index":511,"title":{},"body":{"injectables/AssetService.html":{}}}],["finduserasset(customerid:number):promise",{"_index":528,"title":{},"body":{"injectables/AssetService.html":{}}}],["firstly",{"_index":237,"title":{},"body":{"injectables/AplService.html":{}}}],["flag",{"_index":1657,"title":{},"body":{"index.html":{}}}],["fligh.location.entity",{"_index":732,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["fligh_location",{"_index":719,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["fligh_plan",{"_index":733,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["flighlocationentity",{"_index":667,"title":{"entities/FlighLocationEntity.html":{}},"body":{"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"coverage.html":{}}}],["flighplanentity",{"_index":698,"title":{"entities/FlighPlanEntity.html":{}},"body":{"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"coverage.html":{}}}],["flight",{"_index":670,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["flight.plan.entity",{"_index":718,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["flight_plan",{"_index":721,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["flight_plan_id",{"_index":701,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["flightlocation",{"_index":669,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["flightnumber",{"_index":722,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["flightplan",{"_index":678,"title":{},"body":{"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{}}}],["folder",{"_index":383,"title":{},"body":{"modules/AppModule.html":{}}}],["forbidden",{"_index":48,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["forbidden.'})@apiresponse({status",{"_index":30,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["found",{"_index":263,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":1613,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":1713,"title":{},"body":{"index.html":{}}}],["frontend_app_path",{"_index":314,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["frontendapppath",{"_index":325,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["frontends",{"_index":1614,"title":{},"body":{"index.html":{}}}],["full",{"_index":1701,"title":{},"body":{"index.html":{}}}],["function",{"_index":1442,"title":{},"body":{"injectables/UserService.html":{}}}],["functions",{"_index":513,"title":{},"body":{"injectables/AssetService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["further",{"_index":1673,"title":{},"body":{"index.html":{}}}],["g",{"_index":1627,"title":{},"body":{"index.html":{}}}],["g_landmark_id",{"_index":838,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["g_layer_id",{"_index":840,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["gain",{"_index":1698,"title":{},"body":{"index.html":{}}}],["generate",{"_index":1624,"title":{},"body":{"index.html":{}}}],["generated",{"_index":1579,"title":{},"body":{"index.html":{}}}],["generating",{"_index":1600,"title":{},"body":{"index.html":{}}}],["generation",{"_index":1707,"title":{},"body":{"index.html":{}}}],["genfence.asset.entity",{"_index":870,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["geo.object.entity",{"_index":1031,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["geo_object",{"_index":736,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["geo_object_id",{"_index":1022,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["geofence",{"_index":781,"title":{},"body":{"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"entities/LayerEntity.html":{}}}],["geofence'})@apiresponse({status",{"_index":783,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["geofence.entity",{"_index":777,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/LayerEntity.html":{}}}],["geofence.notification.entity",{"_index":871,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["geofence_assets",{"_index":754,"title":{},"body":{"entities/GeofenceAssetEntity.html":{}}}],["geofence_id",{"_index":761,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{}}}],["geofence_notifications",{"_index":886,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{}}}],["geofenceassetentity",{"_index":752,"title":{"entities/GeofenceAssetEntity.html":{}},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceEntity.html":{},"injectables/GeofenceService.html":{},"coverage.html":{}}}],["geofencecontroller",{"_index":779,"title":{"controllers/GeofenceController.html":{}},"body":{"controllers/GeofenceController.html":{},"coverage.html":{}}}],["geofencedto",{"_index":782,"title":{},"body":{"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{}}}],["geofenceentity",{"_index":758,"title":{"entities/GeofenceEntity.html":{}},"body":{"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"entities/LayerEntity.html":{},"coverage.html":{}}}],["geofencenotificationentity",{"_index":851,"title":{"entities/GeofenceNotificationEntity.html":{}},"body":{"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"coverage.html":{}}}],["geofenceservice",{"_index":801,"title":{"injectables/GeofenceService.html":{}},"body":{"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"coverage.html":{}}}],["geoformat",{"_index":739,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["geojsonobject",{"_index":813,"title":{},"body":{"entities/GeofenceEntity.html":{},"entities/LandmarkEntity.html":{}}}],["geom",{"_index":740,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["geoobject",{"_index":1017,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["geoobjectentity",{"_index":734,"title":{"entities/GeoObjectEntity.html":{}},"body":{"entities/GeoObjectEntity.html":{},"entities/LandmarkEntity.html":{},"coverage.html":{}}}],["get(':id",{"_index":134,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["get(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":415,"title":{},"body":{"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/GeofenceController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["get(':id')@httpcode(httpstatus.ok)@useinterceptors(new",{"_index":54,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{},"controllers/GroupController.html":{}}}],["get('by",{"_index":1378,"title":{},"body":{"controllers/UserController.html":{}}}],["get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":411,"title":{},"body":{"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/GeofenceController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["get()@httpcode(httpstatus.ok)@useinterceptors(new",{"_index":46,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{},"controllers/GroupController.html":{}}}],["get()@useinterceptors(new",{"_index":348,"title":{},"body":{"controllers/AppController.html":{}}}],["getdata",{"_index":347,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getenv",{"_index":330,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["getfrontendapppath",{"_index":336,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["getmany",{"_index":939,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["getmetadataargsstorage",{"_index":1120,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["getmetadataargsstorage().tables.map(tbl",{"_index":1138,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["getname",{"_index":328,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["getone",{"_index":937,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["getport",{"_index":334,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["getting",{"_index":1576,"title":{"index.html":{}},"body":{}}],["geturl",{"_index":332,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["gpslatitude",{"_index":619,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["gpslongitude",{"_index":620,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["graph",{"_index":1670,"title":{},"body":{"index.html":{},"modules.html":{}}}],["group",{"_index":946,"title":{},"body":{"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{}}}],["group'})@apiresponse({status",{"_index":948,"title":{},"body":{"controllers/GroupController.html":{}}}],["groupcontroller",{"_index":944,"title":{"controllers/GroupController.html":{}},"body":{"controllers/GroupController.html":{},"coverage.html":{}}}],["groupdto",{"_index":947,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["groupentity",{"_index":968,"title":{"entities/GroupEntity.html":{}},"body":{"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"coverage.html":{}}}],["groups",{"_index":958,"title":{},"body":{"controllers/GroupController.html":{}}}],["groupservice",{"_index":956,"title":{"injectables/GroupService.html":{}},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{},"coverage.html":{}}}],["gui",{"_index":387,"title":{},"body":{"modules/AppModule.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["h",{"_index":1567,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["handles",{"_index":8,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{}}}],["hanldes",{"_index":537,"title":{},"body":{"controllers/CustomerController.html":{}}}],["hapi/joi",{"_index":289,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{},"dependencies.html":{}}}],["has_subcategory",{"_index":1170,"title":{},"body":{"classes/NewLayerCreateDto.html":{},"entities/NewLayerEntity.html":{}}}],["heading",{"_index":621,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["help",{"_index":1674,"title":{},"body":{"index.html":{}}}],["high",{"_index":1559,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["host",{"_index":1126,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["http",{"_index":991,"title":{},"body":{"modules/HttpConfigModule.html":{},"injectables/UserService.html":{}}}],["http://localhost:4200",{"_index":1642,"title":{},"body":{"index.html":{}}}],["http_max_redirects",{"_index":989,"title":{},"body":{"modules/HttpConfigModule.html":{}}}],["http_timeout",{"_index":987,"title":{},"body":{"modules/HttpConfigModule.html":{}}}],["httpcode",{"_index":85,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.created",{"_index":118,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":132,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["httpconfigmodule",{"_index":982,"title":{"modules/HttpConfigModule.html":{}},"body":{"modules/HttpConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["httpconfigservice",{"_index":985,"title":{},"body":{"modules/HttpConfigModule.html":{},"overview.html":{}}}],["httpexception",{"_index":241,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["httpstatus",{"_index":86,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["httpstatus.created",{"_index":123,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["httpstatus.forbidden",{"_index":261,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["id",{"_index":58,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerDataEntity.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"controllers/UserController.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["id'})@apiresponse({status",{"_index":56,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["id:number",{"_index":442,"title":{},"body":{"controllers/AssetController.html":{},"controllers/UserController.html":{}}}],["id:number):promise",{"_index":439,"title":{},"body":{"controllers/AssetController.html":{}}}],["identifier",{"_index":1474,"title":{},"body":{"coverage.html":{}}}],["id}).execute",{"_index":943,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["if(user){return",{"_index":1469,"title":{},"body":{"injectables/UserService.html":{}}}],["ignore",{"_index":265,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"classes/NewLayerCreateDto.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{}}}],["im",{"_index":156,"title":{},"body":{"entities/AplEntity.html":{}}}],["implemented",{"_index":1432,"title":{},"body":{"entities/UserLogin.html":{}}}],["implements",{"_index":391,"title":{},"body":{"modules/AppModule.html":{}}}],["import",{"_index":83,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["imported",{"_index":1637,"title":{},"body":{"index.html":{}}}],["imports",{"_index":294,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["include",{"_index":1599,"title":{},"body":{"index.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["individual",{"_index":1449,"title":{},"body":{"injectables/UserService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":1140,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["injectable",{"_index":217,"title":{"injectables/AplService.html":{},"injectables/AppConfigService.html":{},"injectables/AppService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AplService.html":{},"injectables/AppConfigService.html":{},"injectables/AppService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":218,"title":{},"body":{"injectables/AplService.html":{},"injectables/AppConfigService.html":{},"injectables/AppService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":242,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["injectrepository(aplentity",{"_index":248,"title":{},"body":{"injectables/AplService.html":{}}}],["injectrepository(assetentity",{"_index":521,"title":{},"body":{"injectables/AssetService.html":{}}}],["injectrepository(customerentity",{"_index":580,"title":{},"body":{"injectables/CustomerService.html":{}}}],["injectrepository(eventdetailsentity",{"_index":612,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["injectrepository(geofenceentity",{"_index":908,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["injectrepository(groupentity",{"_index":981,"title":{},"body":{"injectables/GroupService.html":{}}}],["injectrepository(landmarkentity",{"_index":910,"title":{},"body":{"injectables/GeofenceService.html":{},"injectables/LandmarkService.html":{}}}],["injectrepository(layerentity",{"_index":909,"title":{},"body":{"injectables/GeofenceService.html":{},"injectables/LayerService.html":{}}}],["injectrepository(newlayerentity",{"_index":1216,"title":{},"body":{"injectables/NewLayerService.html":{}}}],["injectrepository(notificationemailentity",{"_index":1289,"title":{},"body":{"injectables/NotificationService.html":{}}}],["injectrepository(notificationentity",{"_index":1287,"title":{},"body":{"injectables/NotificationService.html":{}}}],["injectrepository(notificationtemplateentity",{"_index":1288,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{}}}],["injectrepository(userentity",{"_index":911,"title":{},"body":{"injectables/GeofenceService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["input",{"_index":1277,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["insert",{"_index":215,"title":{},"body":{"entities/AplItemEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{}}}],["inside",{"_index":350,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/enumerations.html":{}}}],["install",{"_index":1609,"title":{},"body":{"index.html":{}}}],["instantly",{"_index":1697,"title":{},"body":{"index.html":{}}}],["integrate",{"_index":390,"title":{},"body":{"modules/AppModule.html":{}}}],["interceptors/response.interceptor",{"_index":427,"title":{},"body":{"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/GeofenceController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["interceptors/transform.interceptor",{"_index":99,"title":{},"body":{"controllers/AplController.html":{},"controllers/AppController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationTemplateController.html":{}}}],["isarray",{"_index":1178,"title":{},"body":{"classes/NewLayerCreateDto.html":{}}}],["isnull",{"_index":1285,"title":{},"body":{"injectables/NotificationService.html":{}}}],["isstring",{"_index":1186,"title":{},"body":{"classes/NewLayerCreateDto.html":{}}}],["isstring()@expose()@apiproperty",{"_index":1180,"title":{},"body":{"classes/NewLayerCreateDto.html":{}}}],["isstring()@expose()@apiproperty({description",{"_index":1171,"title":{},"body":{"classes/NewLayerCreateDto.html":{}}}],["item",{"_index":164,"title":{},"body":{"entities/AplEntity.html":{}}}],["item.apl",{"_index":165,"title":{},"body":{"entities/AplEntity.html":{}}}],["jest",{"_index":1662,"title":{},"body":{"index.html":{}}}],["joi",{"_index":288,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"classes/NewLayerCreateDto.html":{},"modules/PostgresSQLConfigModule.html":{},"dependencies.html":{}}}],["joi.boolean().default(true",{"_index":1111,"title":{},"body":{"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["joi.number().default('3306",{"_index":1103,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["joi.number().default('5432",{"_index":1359,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["joi.number().default(3333",{"_index":313,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.number().default(5",{"_index":990,"title":{},"body":{"modules/HttpConfigModule.html":{}}}],["joi.number().default(5000",{"_index":988,"title":{},"body":{"modules/HttpConfigModule.html":{}}}],["joi.object",{"_index":298,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["joi.string",{"_index":303,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string().default",{"_index":1107,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["joi.string().default('/client",{"_index":315,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string().default('103.10.234.158",{"_index":1357,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["joi.string().default('admin@123",{"_index":1363,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["joi.string().default('application",{"_index":300,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string().default('http://my",{"_index":310,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string().default('localhost",{"_index":1101,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["joi.string().default('root",{"_index":1105,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["joi.string().default('star",{"_index":1361,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["joi.string().default('star_s",{"_index":1109,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["joi.string().default('starapi",{"_index":1365,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["join",{"_index":373,"title":{},"body":{"modules/AppModule.html":{}}}],["joincolumn",{"_index":212,"title":{},"body":{"entities/AplItemEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/LandmarkEntity.html":{},"entities/NewLayerDataEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["joincolumn({name",{"_index":216,"title":{},"body":{"entities/AplItemEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/LandmarkEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["json",{"_index":836,"title":{},"body":{"entities/GeofenceEntity.html":{},"entities/LandmarkEntity.html":{}}}],["json.stringify(d",{"_index":130,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{}}}],["json.stringify(layer",{"_index":258,"title":{},"body":{"injectables/AplService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{}}}],["json}payload",{"_index":1463,"title":{},"body":{"injectables/UserService.html":{}}}],["jwt",{"_index":1527,"title":{},"body":{"dependencies.html":{}}}],["landmark",{"_index":741,"title":{},"body":{"entities/GeoObjectEntity.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"entities/NewLayerEntity.html":{}}}],["landmark'})@apiresponse({status",{"_index":998,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["landmark.entity",{"_index":751,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["landmark.id",{"_index":925,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["landmark_layer_id",{"_index":1026,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["landmarkcontroller",{"_index":994,"title":{"controllers/LandmarkController.html":{}},"body":{"controllers/LandmarkController.html":{},"coverage.html":{}}}],["landmarkcreatedto",{"_index":997,"title":{},"body":{"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{}}}],["landmarkentity",{"_index":101,"title":{"entities/LandmarkEntity.html":{}},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"entities/GeoObjectEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["landmarkid",{"_index":814,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["landmarkrepository",{"_index":889,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["landmarks",{"_index":996,"title":{},"body":{"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{}}}],["landmarkservice",{"_index":1006,"title":{"injectables/LandmarkService.html":{}},"body":{"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"coverage.html":{}}}],["lastname",{"_index":1418,"title":{},"body":{"entities/UserEntity.html":{}}}],["latitude",{"_index":679,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["layer",{"_index":252,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["layer'})@apiresponse({status",{"_index":1050,"title":{},"body":{"controllers/LayerController.html":{}}}],["layer.entity",{"_index":1032,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["layer.id",{"_index":923,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["layer.status",{"_index":254,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["layercontroller",{"_index":1048,"title":{"controllers/LayerController.html":{}},"body":{"controllers/LayerController.html":{},"coverage.html":{}}}],["layercreatedto",{"_index":507,"title":{},"body":{"injectables/AssetService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{}}}],["layerentity",{"_index":900,"title":{"entities/LayerEntity.html":{}},"body":{"injectables/GeofenceService.html":{},"entities/LandmarkEntity.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"coverage.html":{}}}],["layerid",{"_index":815,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["layermodule",{"_index":378,"title":{},"body":{"modules/AppModule.html":{}}}],["layerrepository",{"_index":888,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["layers",{"_index":1062,"title":{},"body":{"controllers/LayerController.html":{},"entities/LayerEntity.html":{}}}],["layers'})@apiresponse({status",{"_index":1052,"title":{},"body":{"controllers/LayerController.html":{}}}],["layerservice",{"_index":1060,"title":{"injectables/LayerService.html":{}},"body":{"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"coverage.html":{}}}],["learn",{"_index":1676,"title":{},"body":{"index.html":{}}}],["leftjoinandmapmany('t.notifications',geofencenotificationentity,'n','t.id",{"_index":926,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["leftjoinandmapmany('t.vehicles',geofenceassetentity,'a','t.id",{"_index":931,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["leftjoinandmapone('a.asset",{"_index":933,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["leftjoinandmapone('n.notification",{"_index":928,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["leftjoinandmapone('t.customer',customerentity,'customer','t.customer_id",{"_index":920,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["leftjoinandmapone('t.landmark',landmarkentity,'landmark','t.g_landmark_id",{"_index":924,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["leftjoinandmapone('t.layer',layerentity,'layer','t.g_layer_id",{"_index":922,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["legtime",{"_index":680,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["length",{"_index":171,"title":{},"body":{"entities/AplEntity.html":{},"entities/AssetEntity.html":{},"entities/GeofenceEntity.html":{},"entities/NotificationEntity.html":{}}}],["lib",{"_index":1635,"title":{},"body":{"index.html":{}}}],["libraries",{"_index":1601,"title":{},"body":{"index.html":{}}}],["library",{"_index":1633,"title":{},"body":{"index.html":{}}}],["license",{"_index":1727,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":269,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["list",{"_index":64,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["load",{"_index":296,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["local",{"_index":1529,"title":{},"body":{"dependencies.html":{}}}],["location",{"_index":727,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["location.flightplan",{"_index":728,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["locationradius",{"_index":681,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["locations",{"_index":723,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["locationtype",{"_index":1018,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["lodash",{"_index":520,"title":{},"body":{"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["logged",{"_index":436,"title":{},"body":{"controllers/AssetController.html":{}}}],["logger",{"_index":87,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["logger(aplcontroller.name",{"_index":115,"title":{},"body":{"controllers/AplController.html":{}}}],["logger(aplservice.name",{"_index":240,"title":{},"body":{"injectables/AplService.html":{}}}],["logger(assetcontroller.name",{"_index":433,"title":{},"body":{"controllers/AssetController.html":{}}}],["logger(assetservice.name",{"_index":516,"title":{},"body":{"injectables/AssetService.html":{}}}],["logger(customercontroller.name",{"_index":549,"title":{},"body":{"controllers/CustomerController.html":{}}}],["logger(customerservice.name",{"_index":578,"title":{},"body":{"injectables/CustomerService.html":{}}}],["logger(eventdetailcontroller.name",{"_index":599,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["logger(eventdetailservice.name",{"_index":611,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["logger(geofencecontroller.name",{"_index":804,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["logger(geofenceservice.name",{"_index":899,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["logger(groupcontroller.name",{"_index":960,"title":{},"body":{"controllers/GroupController.html":{}}}],["logger(groupservice.name",{"_index":979,"title":{},"body":{"injectables/GroupService.html":{}}}],["logger(landmarkcontroller.name",{"_index":1009,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["logger(landmarkservice.name",{"_index":1045,"title":{},"body":{"injectables/LandmarkService.html":{}}}],["logger(layercontroller.name",{"_index":1064,"title":{},"body":{"controllers/LayerController.html":{}}}],["logger(layerservice.name",{"_index":1093,"title":{},"body":{"injectables/LayerService.html":{}}}],["logger(newlayercontroller.name",{"_index":1160,"title":{},"body":{"controllers/NewLayerController.html":{}}}],["logger(newlayerservice.name",{"_index":1215,"title":{},"body":{"injectables/NewLayerService.html":{}}}],["logger(notificationcontroller.name",{"_index":1234,"title":{},"body":{"controllers/NotificationController.html":{}}}],["logger(notificationservice.name",{"_index":1284,"title":{},"body":{"injectables/NotificationService.html":{}}}],["logger(notificationtemplatecontroller.name",{"_index":1309,"title":{},"body":{"controllers/NotificationTemplateController.html":{}}}],["logger(notificationtemplateservice.name",{"_index":1329,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["logger(usercontroller.name",{"_index":1399,"title":{},"body":{"controllers/UserController.html":{}}}],["logger(userservice.name",{"_index":1460,"title":{},"body":{"injectables/UserService.html":{}}}],["loggermiddleware",{"_index":376,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":1134,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["login",{"_index":1390,"title":{},"body":{"controllers/UserController.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["logindata",{"_index":1465,"title":{},"body":{"injectables/UserService.html":{}}}],["logindata.findone({username",{"_index":1468,"title":{},"body":{"injectables/UserService.html":{}}}],["logindto",{"_index":1388,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["longitude",{"_index":682,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["low",{"_index":1558,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["made",{"_index":1443,"title":{},"body":{"injectables/UserService.html":{}}}],["many",{"_index":1591,"title":{},"body":{"index.html":{}}}],["manytoone",{"_index":213,"title":{},"body":{"entities/AplItemEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/LandmarkEntity.html":{},"entities/NewLayerDataEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["manytoone(undefined",{"_index":193,"title":{},"body":{"entities/AplItemEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NewLayerDataEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["map",{"_index":759,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NewLayerDataEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{},"entities/UserLogin.html":{}}}],["map.data",{"_index":1197,"title":{},"body":{"entities/NewLayerDataEntity.html":{}}}],["map.emails",{"_index":1240,"title":{},"body":{"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["map.notifications",{"_index":880,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{}}}],["map.vehicles",{"_index":778,"title":{},"body":{"entities/GeofenceAssetEntity.html":{}}}],["map.vehicles)@joincolumn({name",{"_index":760,"title":{},"body":{"entities/GeofenceAssetEntity.html":{}}}],["match",{"_index":1458,"title":{},"body":{"injectables/UserService.html":{}}}],["matched",{"_index":1090,"title":{},"body":{"injectables/LayerService.html":{}}}],["matching",{"_index":147,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["max_altitude",{"_index":842,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["max_velocity",{"_index":844,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["maxaltitude",{"_index":816,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["maxredirects",{"_index":993,"title":{},"body":{"modules/HttpConfigModule.html":{}}}],["maxval",{"_index":186,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["maxvelocity",{"_index":817,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["medium",{"_index":1560,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["message",{"_index":395,"title":{},"body":{"injectables/AppService.html":{}}}],["message.dto",{"_index":353,"title":{},"body":{"controllers/AppController.html":{}}}],["messagedto",{"_index":351,"title":{},"body":{"controllers/AppController.html":{}}}],["metadata",{"_index":1534,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":37,"title":{},"body":{"controllers/AplController.html":{},"modules/AppModule.html":{},"injectables/AssetService.html":{},"injectables/GeofenceService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["methods",{"_index":13,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["middleware/logs.middleware",{"_index":377,"title":{},"body":{"modules/AppModule.html":{}}}],["middlewareconsumer",{"_index":364,"title":{},"body":{"modules/AppModule.html":{}}}],["min_altitude",{"_index":846,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["min_velocity",{"_index":848,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["minaltitude",{"_index":818,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["minval",{"_index":187,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["minvelocity",{"_index":819,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["miscellaneous",{"_index":1543,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["mit",{"_index":1728,"title":{},"body":{"properties.html":{}}}],["module",{"_index":273,"title":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["modules",{"_index":275,"title":{"modules.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/layers/layer.module",{"_index":379,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":1677,"title":{},"body":{"index.html":{}}}],["mplid",{"_index":188,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["msg.res.dto",{"_index":399,"title":{},"body":{"injectables/AppService.html":{}}}],["msgresdto",{"_index":397,"title":{},"body":{"injectables/AppService.html":{}}}],["multiple",{"_index":1631,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":1113,"title":{},"body":{"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{}}}],["mysql2",{"_index":1522,"title":{},"body":{"dependencies.html":{}}}],["mysql_dbname",{"_index":1108,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["mysql_host",{"_index":1100,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["mysql_password",{"_index":1106,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["mysql_port",{"_index":1102,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["mysql_username",{"_index":1104,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["mysqlconfigmodule",{"_index":1095,"title":{"modules/MySqlConfigModule.html":{}},"body":{"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"modules.html":{},"overview.html":{}}}],["mysqlconfigservice",{"_index":1098,"title":{},"body":{"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"overview.html":{}}}],["mysqlconfigservice.dbname",{"_index":1133,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{}}}],["mysqlconfigservice.host",{"_index":1127,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{}}}],["mysqlconfigservice.logging",{"_index":1135,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{}}}],["mysqlconfigservice.password",{"_index":1132,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{}}}],["mysqlconfigservice.port",{"_index":1128,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{}}}],["mysqlconfigservice.synchronize",{"_index":1137,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{}}}],["mysqlconfigservice.username",{"_index":1130,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{}}}],["mysqldatabaseprovidermodule",{"_index":1115,"title":{"modules/MysqlDatabaseProviderModule.html":{}},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules.html":{}}}],["n.geofence_id",{"_index":927,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["name",{"_index":40,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"injectables/AppConfigService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"entities/NewLayerDataEntity.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["name:'userlogin",{"_index":1430,"title":{},"body":{"entities/UserLogin.html":{}}}],["name:string",{"_index":398,"title":{},"body":{"injectables/AppService.html":{}}}],["navigate",{"_index":1641,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1618,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":95,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"modules/AppModule.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/axios",{"_index":1494,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":90,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":291,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1498,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":1499,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":1501,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":371,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":94,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":243,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"modules/MysqlDatabaseProviderModule.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"modules/PostgresDatabaseProviderModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjsx/crud",{"_index":1506,"title":{},"body":{"dependencies.html":{}}}],["nestmodule",{"_index":368,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":114,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/FlighLocationEntity.html":{},"entities/GeoObjectEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["newlayer",{"_index":1147,"title":{},"body":{"controllers/NewLayerController.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{}}}],["newlayer'})@apiresponse({status",{"_index":1148,"title":{},"body":{"controllers/NewLayerController.html":{}}}],["newlayer.entity",{"_index":1199,"title":{},"body":{"entities/NewLayerDataEntity.html":{}}}],["newlayer_data",{"_index":1200,"title":{},"body":{"entities/NewLayerDataEntity.html":{}}}],["newlayercontroller",{"_index":1141,"title":{"controllers/NewLayerController.html":{}},"body":{"controllers/NewLayerController.html":{},"coverage.html":{}}}],["newlayercreate",{"_index":1188,"title":{},"body":{"classes/NewLayerCreateDto.html":{}}}],["newlayercreatedto",{"_index":1144,"title":{"classes/NewLayerCreateDto.html":{}},"body":{"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"injectables/NewLayerService.html":{},"coverage.html":{}}}],["newlayerdata.entity",{"_index":1206,"title":{},"body":{"entities/NewLayerEntity.html":{}}}],["newlayerdatadto",{"_index":1177,"title":{},"body":{"classes/NewLayerCreateDto.html":{}}}],["newlayerdataentity",{"_index":1192,"title":{"entities/NewLayerDataEntity.html":{}},"body":{"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"coverage.html":{}}}],["newlayerentity",{"_index":1154,"title":{"entities/NewLayerEntity.html":{}},"body":{"controllers/NewLayerController.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"coverage.html":{}}}],["newlayers",{"_index":1143,"title":{},"body":{"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{}}}],["newlayerservice",{"_index":1157,"title":{"injectables/NewLayerService.html":{}},"body":{"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"coverage.html":{}}}],["node",{"_index":1621,"title":{},"body":{"index.html":{}}}],["nofitication",{"_index":1278,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notiemailrepository",{"_index":1274,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notifciation",{"_index":1320,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["notification",{"_index":189,"title":{},"body":{"entities/AplItemEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"miscellaneous/enumerations.html":{}}}],["notification'})@apiresponse({status",{"_index":1220,"title":{},"body":{"controllers/NotificationController.html":{}}}],["notification.email.entity",{"_index":1268,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["notification.entity",{"_index":1243,"title":{},"body":{"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["notification.id",{"_index":930,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["notification.template.entity",{"_index":1269,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["notification.user.entity",{"_index":1270,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["notification_emails",{"_index":1244,"title":{},"body":{"entities/NotificationEmailEntity.html":{}}}],["notification_id",{"_index":883,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["notification_template",{"_index":1316,"title":{},"body":{"entities/NotificationTemplateEntity.html":{}}}],["notification_users",{"_index":1337,"title":{},"body":{"entities/NotificationUserEntity.html":{}}}],["notificationcontroller",{"_index":1217,"title":{"controllers/NotificationController.html":{}},"body":{"controllers/NotificationController.html":{},"coverage.html":{}}}],["notificationdto",{"_index":1219,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["notificationemailentity",{"_index":1235,"title":{"entities/NotificationEmailEntity.html":{}},"body":{"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"coverage.html":{}}}],["notificationentity",{"_index":905,"title":{"entities/NotificationEntity.html":{}},"body":{"injectables/GeofenceService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"entities/NotificationUserEntity.html":{},"coverage.html":{}}}],["notificationentity,'notification','n.notification_id",{"_index":929,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["notificationid",{"_index":877,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{}}}],["notifications",{"_index":820,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["notificationservice",{"_index":1231,"title":{"injectables/NotificationService.html":{}},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"coverage.html":{}}}],["notificationtemplatecontroller",{"_index":1297,"title":{"controllers/NotificationTemplateController.html":{}},"body":{"controllers/NotificationTemplateController.html":{},"coverage.html":{}}}],["notificationtemplatedto",{"_index":1299,"title":{},"body":{"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{}}}],["notificationtemplateentity",{"_index":1229,"title":{"entities/NotificationTemplateEntity.html":{}},"body":{"controllers/NotificationController.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"coverage.html":{}}}],["notificationtemplateservice",{"_index":1307,"title":{"injectables/NotificationTemplateService.html":{}},"body":{"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"coverage.html":{}}}],["notificationtypeenum",{"_index":1262,"title":{},"body":{"entities/NotificationEntity.html":{},"miscellaneous/enumerations.html":{}}}],["notificationtypeenum.email",{"_index":1271,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["notificationuserentity",{"_index":1264,"title":{"entities/NotificationUserEntity.html":{}},"body":{"entities/NotificationEntity.html":{},"entities/NotificationUserEntity.html":{},"coverage.html":{}}}],["notify",{"_index":821,"title":{},"body":{"entities/GeofenceEntity.html":{},"miscellaneous/enumerations.html":{}}}],["notify?:notifyenum",{"_index":873,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["notify_email",{"_index":857,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["notify_map",{"_index":860,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["notifyemail",{"_index":822,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["notifyenum",{"_index":854,"title":{},"body":{"entities/GeofenceEntity.html":{},"miscellaneous/enumerations.html":{}}}],["notifyenum.inside",{"_index":872,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["notifymap",{"_index":823,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["notitifcation",{"_index":1223,"title":{},"body":{"controllers/NotificationController.html":{}}}],["npm",{"_index":1608,"title":{},"body":{"index.html":{}}}],["npotification",{"_index":1246,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["nrwl/angular",{"_index":1617,"title":{},"body":{"index.html":{}}}],["nrwl/express",{"_index":1620,"title":{},"body":{"index.html":{}}}],["nrwl/nest",{"_index":1619,"title":{},"body":{"index.html":{}}}],["nrwl/node",{"_index":1622,"title":{},"body":{"index.html":{}}}],["nrwl/react",{"_index":1611,"title":{},"body":{"index.html":{}}}],["nrwl/react:app",{"_index":1628,"title":{},"body":{"index.html":{}}}],["nrwl/react:component",{"_index":1649,"title":{},"body":{"index.html":{}}}],["nrwl/react:lib",{"_index":1634,"title":{},"body":{"index.html":{}}}],["nrwl/web",{"_index":1615,"title":{},"body":{"index.html":{}}}],["null",{"_index":259,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["nullable",{"_index":198,"title":{},"body":{"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/UserEntity.html":{}}}],["number",{"_index":70,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"injectables/AppConfigService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerDataEntity.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["number(this.configservice.get('app.port",{"_index":341,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["number}customerid",{"_index":527,"title":{},"body":{"injectables/AssetService.html":{}}}],["number}id",{"_index":1047,"title":{},"body":{"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["nx",{"_index":1581,"title":{},"body":{"index.html":{}}}],["nx’s",{"_index":1705,"title":{},"body":{"index.html":{}}}],["o",{"_index":913,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["o.id",{"_index":915,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["object",{"_index":1461,"title":{},"body":{"injectables/UserService.html":{}}}],["object.assign(data",{"_index":918,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["object.assign(layer",{"_index":264,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["object.assign(o",{"_index":914,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["object}data",{"_index":1046,"title":{},"body":{"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{}}}],["ondelete",{"_index":634,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["onetomany",{"_index":176,"title":{},"body":{"entities/AplEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeofenceEntity.html":{},"entities/LayerEntity.html":{},"entities/NewLayerEntity.html":{},"entities/NotificationEntity.html":{}}}],["onetomany('eventparamdetailsentity",{"_index":632,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["onetomany('geofenceassetentity",{"_index":866,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["onetomany('geofenceentity",{"_index":1080,"title":{},"body":{"entities/LayerEntity.html":{}}}],["onetomany('geofencenotificationentity",{"_index":852,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["onetomany('newlayerdataentity",{"_index":1203,"title":{},"body":{"entities/NewLayerEntity.html":{}}}],["onetomany('newlayerdataentity','value",{"_index":1207,"title":{},"body":{"entities/NewLayerEntity.html":{}}}],["onetomany('notificationemailentity",{"_index":1253,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["onetomany('notificationuserentity",{"_index":1265,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["onetomany(undefined",{"_index":163,"title":{},"body":{"entities/AplEntity.html":{},"entities/FlighPlanEntity.html":{}}}],["onetoone",{"_index":750,"title":{},"body":{"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/LandmarkEntity.html":{},"entities/NewLayerDataEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["onetoone('geoobjectentity",{"_index":1020,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["onetoone('landmarkentity",{"_index":746,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["onetoone(type",{"_index":1255,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["onetoone(undefined",{"_index":1025,"title":{},"body":{"entities/LandmarkEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["optional",{"_index":42,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"injectables/AppConfigService.html":{},"modules/AppModule.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["options",{"_index":266,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["order",{"_index":1685,"title":{},"body":{"index.html":{}}}],["out",{"_index":284,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{},"overview.html":{}}}],["outside",{"_index":1564,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["overview",{"_index":1721,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":1569,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["package",{"_index":1492,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packed",{"_index":1566,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["packettype",{"_index":622,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{}}}],["packettypeenum",{"_index":640,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"miscellaneous/enumerations.html":{}}}],["packettypeenum.a",{"_index":653,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{}}}],["page",{"_index":267,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["paginate",{"_index":19,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["paginate(@body",{"_index":144,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["paginate(state",{"_index":61,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["paginate(this.querybuilderservice.getquery(state",{"_index":272,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["pagination",{"_index":67,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["pagination'})@apiresponse({status",{"_index":65,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["pairs",{"_index":1684,"title":{},"body":{"index.html":{}}}],["param",{"_index":88,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["paramcount",{"_index":623,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["parameters",{"_index":39,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"injectables/AppConfigService.html":{},"modules/AppModule.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["paramid",{"_index":657,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["paramvalue",{"_index":658,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["passport",{"_index":1525,"title":{},"body":{"dependencies.html":{}}}],["password",{"_index":1131,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["password===this.password?true:false",{"_index":1436,"title":{},"body":{"entities/UserLogin.html":{}}}],["path",{"_index":107,"title":{},"body":{"controllers/AplController.html":{},"modules/AppModule.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["pattern",{"_index":1512,"title":{},"body":{"dependencies.html":{}}}],["payload",{"_index":1457,"title":{},"body":{"injectables/UserService.html":{}}}],["pending",{"_index":1574,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pg",{"_index":1531,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":458,"title":{},"body":{"entities/AssetEntity.html":{}}}],["phonenumber",{"_index":562,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["pilots",{"_index":683,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["plan",{"_index":699,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["plan.locations",{"_index":700,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["plugins",{"_index":1592,"title":{},"body":{"index.html":{}}}],["plus",{"_index":1709,"title":{},"body":{"index.html":{}}}],["port",{"_index":324,"title":{},"body":{"injectables/AppConfigService.html":{},"modules/AppModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["post",{"_index":36,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["post('paginate",{"_index":143,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["post('paginate')@apioperation({summary",{"_index":63,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["post('user/authenticate",{"_index":1410,"title":{},"body":{"controllers/UserController.html":{}}}],["post('user/authenticate')@apioperation({summary",{"_index":1389,"title":{},"body":{"controllers/UserController.html":{}}}],["post()@httpcode(httpstatus.created)@apioperation({summary",{"_index":408,"title":{},"body":{"controllers/AssetController.html":{},"controllers/GeofenceController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["post()@httpcode(httpstatus.created)@useinterceptors(new",{"_index":26,"title":{},"body":{"controllers/AplController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GroupController.html":{}}}],["postgres",{"_index":1344,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["postgres_dbname",{"_index":1364,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["postgres_host",{"_index":1356,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["postgres_password",{"_index":1362,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["postgres_port",{"_index":1358,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["postgres_username",{"_index":1360,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["postgresconfigservice",{"_index":1345,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["postgresconfigservice.dbname",{"_index":1350,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["postgresconfigservice.host",{"_index":1346,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["postgresconfigservice.logging",{"_index":1351,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["postgresconfigservice.password",{"_index":1349,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["postgresconfigservice.port",{"_index":1347,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["postgresconfigservice.synchronize",{"_index":1352,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["postgresconfigservice.username",{"_index":1348,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["postgresdatabaseprovidermodule",{"_index":360,"title":{"modules/PostgresDatabaseProviderModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules.html":{},"overview.html":{}}}],["postgressqlconfigmodule",{"_index":1339,"title":{"modules/PostgresSQLConfigModule.html":{}},"body":{"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["postgressqlconfigservice",{"_index":1341,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"overview.html":{}}}],["precision",{"_index":488,"title":{},"body":{"entities/AssetEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceEntity.html":{}}}],["preferred",{"_index":1703,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":769,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NewLayerDataEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{},"entities/UserLogin.html":{}}}],["private",{"_index":112,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["prod",{"_index":1656,"title":{},"body":{"index.html":{}}}],["production",{"_index":305,"title":{},"body":{"modules/AppConfigModule.html":{},"index.html":{}}}],["project",{"_index":1578,"title":{},"body":{"index.html":{}}}],["project=my",{"_index":1651,"title":{},"body":{"index.html":{}}}],["projects",{"_index":1605,"title":{},"body":{"index.html":{}}}],["promise",{"_index":45,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":158,"title":{"properties.html":{}},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"properties.html":{}}}],["property",{"_index":1094,"title":{},"body":{"injectables/LayerService.html":{}}}],["provided",{"_index":60,"title":{},"body":{"controllers/AplController.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["providers",{"_index":286,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["providers/database/postgres/provider.module",{"_index":380,"title":{},"body":{"modules/AppModule.html":{}}}],["provides",{"_index":220,"title":{},"body":{"injectables/AplService.html":{}}}],["provision",{"_index":307,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["provoded",{"_index":1452,"title":{},"body":{"injectables/UserService.html":{}}}],["public",{"_index":14,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["put",{"_index":81,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["put(':id",{"_index":137,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["put(':id')@httpcode(httpstatus.created)@apioperation({summary",{"_index":790,"title":{},"body":{"controllers/GeofenceController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["put(':id')@httpcode(httpstatus.created)@useinterceptors(new",{"_index":78,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{},"controllers/GroupController.html":{}}}],["put()@httpcode(httpstatus.created)@apioperation({summary",{"_index":423,"title":{},"body":{"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/UserController.html":{}}}],["queries",{"_index":1318,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["query",{"_index":221,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{}}}],["querybuilder",{"_index":226,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["querybuilderservice",{"_index":225,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["radius",{"_index":684,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["rapidly",{"_index":1687,"title":{},"body":{"index.html":{}}}],["react",{"_index":386,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["readonly",{"_index":113,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AppController.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["referencedcolumnname",{"_index":1023,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["reflect",{"_index":1533,"title":{},"body":{"dependencies.html":{}}}],["related",{"_index":10,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["reload",{"_index":1644,"title":{},"body":{"index.html":{}}}],["remove",{"_index":20,"title":{},"body":{"controllers/AplController.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":141,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":69,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["removes",{"_index":234,"title":{},"body":{"injectables/AplService.html":{},"injectables/LandmarkService.html":{},"injectables/NewLayerService.html":{}}}],["repository",{"_index":224,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["request",{"_index":75,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["requestmethod",{"_index":369,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":393,"title":{},"body":{"modules/AppModule.html":{}}}],["requests",{"_index":9,"title":{},"body":{"controllers/AplController.html":{},"controllers/CustomerController.html":{},"controllers/NotificationTemplateController.html":{}}}],["reset",{"_index":283,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{},"overview.html":{}}}],["respective",{"_index":157,"title":{},"body":{"entities/AplEntity.html":{},"entities/AssetEntity.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["restransforminterceptor",{"_index":426,"title":{},"body":{"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/GeofenceController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["results",{"_index":146,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":131,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":44,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role",{"_index":1433,"title":{},"body":{"entities/UserLogin.html":{}}}],["root",{"_index":384,"title":{},"body":{"modules/AppModule.html":{}}}],["rootpath",{"_index":389,"title":{},"body":{"modules/AppModule.html":{}}}],["routebufferheight",{"_index":685,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["routebufferwidth",{"_index":686,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["rquest",{"_index":1054,"title":{},"body":{"controllers/LayerController.html":{}}}],["run",{"_index":1626,"title":{},"body":{"index.html":{}}}],["running",{"_index":319,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"index.html":{}}}],["rxjs",{"_index":1536,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":1632,"title":{},"body":{"index.html":{}}}],["save",{"_index":1038,"title":{},"body":{"injectables/LandmarkService.html":{},"injectables/NewLayerService.html":{},"index.html":{}}}],["saved",{"_index":1041,"title":{},"body":{"injectables/LandmarkService.html":{},"injectables/NewLayerService.html":{}}}],["saves",{"_index":1039,"title":{},"body":{"injectables/LandmarkService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["saving",{"_index":1695,"title":{},"body":{"index.html":{}}}],["scaffolding",{"_index":1648,"title":{},"body":{"index.html":{}}}],["scale",{"_index":490,"title":{},"body":{"entities/AssetEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceEntity.html":{}}}],["schedule_end_time",{"_index":862,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["schedule_start_time",{"_index":864,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["scheduledarrivaltime",{"_index":687,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["scheduleddeparturetime",{"_index":624,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/FlighPlanEntity.html":{}}}],["scheduleendtime",{"_index":824,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["schedulestarttime",{"_index":825,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["search",{"_index":1327,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["see",{"_index":1671,"title":{},"body":{"index.html":{}}}],["sequence",{"_index":688,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["serve",{"_index":381,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["server",{"_index":1640,"title":{},"body":{"index.html":{}}}],["servestaticmodule",{"_index":370,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":388,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":892,"title":{},"body":{"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/NewLayerService.html":{},"miscellaneous/enumerations.html":{}}}],["service/apl.service",{"_index":104,"title":{},"body":{"controllers/AplController.html":{}}}],["service/asset.service",{"_index":430,"title":{},"body":{"controllers/AssetController.html":{}}}],["service/customer.service",{"_index":547,"title":{},"body":{"controllers/CustomerController.html":{}}}],["service/event.detail.service",{"_index":597,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["service/geofence.service",{"_index":802,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["service/group.service",{"_index":957,"title":{},"body":{"controllers/GroupController.html":{}}}],["service/landmark.service",{"_index":1007,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["service/layer.service",{"_index":1061,"title":{},"body":{"controllers/LayerController.html":{}}}],["service/newlayer.service",{"_index":1158,"title":{},"body":{"controllers/NewLayerController.html":{}}}],["service/notification.service",{"_index":1232,"title":{},"body":{"controllers/NotificationController.html":{}}}],["service/notification.template.service",{"_index":1308,"title":{},"body":{"controllers/NotificationTemplateController.html":{}}}],["service/query.builder.service",{"_index":246,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["service/secured",{"_index":301,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["service/user.service",{"_index":1397,"title":{},"body":{"controllers/UserController.html":{}}}],["services",{"_index":228,"title":{},"body":{"injectables/AplService.html":{},"injectables/CustomerService.html":{},"injectables/GeofenceService.html":{},"controllers/LayerController.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["serving",{"_index":385,"title":{},"body":{"modules/AppModule.html":{}}}],["severity",{"_index":190,"title":{},"body":{"entities/AplItemEntity.html":{},"miscellaneous/enumerations.html":{}}}],["severityenum",{"_index":1551,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["shareable",{"_index":1636,"title":{},"body":{"index.html":{}}}],["simple",{"_index":835,"title":{},"body":{"entities/GeofenceEntity.html":{},"entities/LandmarkEntity.html":{}}}],["smart",{"_index":1582,"title":{},"body":{"index.html":{}}}],["sms",{"_index":1562,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sms_template_id",{"_index":1259,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["smstemplate",{"_index":1249,"title":{},"body":{"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"index.html":{}}}],["speed",{"_index":625,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["srid",{"_index":742,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["stack",{"_index":1702,"title":{},"body":{"index.html":{}}}],["stage",{"_index":689,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["starnavigationapi",{"_index":401,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["starnavigationapi/mylib",{"_index":1638,"title":{},"body":{"index.html":{}}}],["starnavigationsystem",{"_index":402,"title":{},"body":{"injectables/AppService.html":{}}}],["start",{"_index":1694,"title":{},"body":{"index.html":{}}}],["started",{"_index":1577,"title":{"index.html":{}},"body":{}}],["starttime",{"_index":626,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["state",{"_index":68,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/FlighLocationEntity.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["state.page.current",{"_index":268,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["state.page.size",{"_index":270,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["statedto",{"_index":62,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["statements",{"_index":1475,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":372,"title":{},"body":{"modules/AppModule.html":{},"entities/UserLogin.html":{},"dependencies.html":{}}}],["status",{"_index":122,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["statusenum",{"_index":244,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["statusenum.active",{"_index":524,"title":{},"body":{"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/GeofenceService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["statusenum.deleted",{"_index":255,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["stoptime",{"_index":627,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{}}}],["stored",{"_index":1653,"title":{},"body":{"index.html":{}}}],["string",{"_index":170,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AppConfigService.html":{},"injectables/AppService.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{}}}],["subject",{"_index":1311,"title":{},"body":{"entities/NotificationTemplateEntity.html":{}}}],["successfully",{"_index":32,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["summary",{"_index":121,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["support",{"_index":1717,"title":{},"body":{"modules.html":{}}}],["supports",{"_index":1590,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1718,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1520,"title":{},"body":{"dependencies.html":{}}}],["symbolcolor",{"_index":459,"title":{},"body":{"entities/AssetEntity.html":{}}}],["symbolsize",{"_index":460,"title":{},"body":{"entities/AssetEntity.html":{}}}],["symbolstrokecolor",{"_index":461,"title":{},"body":{"entities/AssetEntity.html":{}}}],["symbolstrokesize",{"_index":462,"title":{},"body":{"entities/AssetEntity.html":{}}}],["synchronize",{"_index":1136,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["system",{"_index":1586,"title":{},"body":{"index.html":{}}}],["t",{"_index":1568,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["table",{"_index":155,"title":{},"body":{"entities/AplEntity.html":{},"entities/AssetEntity.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1491,"title":{},"body":{"coverage.html":{}}}],["tailnumber",{"_index":724,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["takes",{"_index":1037,"title":{},"body":{"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["task",{"_index":1682,"title":{},"body":{"index.html":{}}}],["tbl.target",{"_index":1139,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["teams",{"_index":1692,"title":{},"body":{"index.html":{}}}],["template",{"_index":786,"title":{},"body":{"controllers/GeofenceController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{}}}],["template'})@apiresponse({status",{"_index":791,"title":{},"body":{"controllers/GeofenceController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["templaterepository",{"_index":1273,"title":{},"body":{"injectables/NotificationService.html":{}}}],["test",{"_index":306,"title":{},"body":{"modules/AppConfigModule.html":{},"index.html":{}}}],["tests",{"_index":1659,"title":{},"body":{"index.html":{}}}],["text",{"_index":1312,"title":{},"body":{"entities/NotificationTemplateEntity.html":{}}}],["this.aplservice.create(data",{"_index":128,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{}}}],["this.aplservice.findall",{"_index":133,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{}}}],["this.aplservice.findbyid(id",{"_index":136,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{}}}],["this.aplservice.paginate(state",{"_index":145,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{}}}],["this.aplservice.remove(id",{"_index":142,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{}}}],["this.aplservice.update(id",{"_index":139,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{}}}],["this.appservice.getdata",{"_index":355,"title":{},"body":{"controllers/AppController.html":{}}}],["this.assetservice.create(data",{"_index":434,"title":{},"body":{"controllers/AssetController.html":{}}}],["this.assetservice.findall",{"_index":435,"title":{},"body":{"controllers/AssetController.html":{}}}],["this.assetservice.finduserasset(id",{"_index":440,"title":{},"body":{"controllers/AssetController.html":{}}}],["this.assetservice.paginate(state",{"_index":446,"title":{},"body":{"controllers/AssetController.html":{}}}],["this.assetservice.remove(id",{"_index":445,"title":{},"body":{"controllers/AssetController.html":{}}}],["this.assetservice.update(data",{"_index":444,"title":{},"body":{"controllers/AssetController.html":{}}}],["this.configservice.get('app.env",{"_index":339,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["this.configservice.get('app.frontendapppath",{"_index":342,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["this.configservice.get('app.name",{"_index":338,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["this.configservice.get('app.url",{"_index":340,"title":{},"body":{"injectables/AppConfigService.html":{}}}],["this.customerservice.create(data",{"_index":551,"title":{},"body":{"controllers/CustomerController.html":{}}}],["this.customerservice.findall",{"_index":552,"title":{},"body":{"controllers/CustomerController.html":{}}}],["this.customerservice.findbyid(id",{"_index":553,"title":{},"body":{"controllers/CustomerController.html":{}}}],["this.customerservice.paginate(state",{"_index":556,"title":{},"body":{"controllers/CustomerController.html":{}}}],["this.customerservice.remove(id",{"_index":555,"title":{},"body":{"controllers/CustomerController.html":{}}}],["this.customerservice.update(data",{"_index":554,"title":{},"body":{"controllers/CustomerController.html":{}}}],["this.findbyid(id",{"_index":253,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["this.geofenceservice.create(data",{"_index":805,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["this.geofenceservice.findall",{"_index":806,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["this.geofenceservice.findbyid(id",{"_index":807,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["this.geofenceservice.paginate(state",{"_index":810,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["this.geofenceservice.remove(id",{"_index":809,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["this.geofenceservice.update(id",{"_index":808,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["this.groupservice.create(data",{"_index":962,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.findall",{"_index":963,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.findbyid(id",{"_index":964,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.paginate(state",{"_index":967,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.remove(id",{"_index":966,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.update(id",{"_index":965,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.landmarkservice.create(data",{"_index":1010,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["this.landmarkservice.findall",{"_index":1011,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["this.landmarkservice.findbyid(id",{"_index":1012,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["this.landmarkservice.paginate(state",{"_index":1015,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["this.landmarkservice.remove(id",{"_index":1014,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["this.landmarkservice.update(id",{"_index":1013,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["this.layerservice.create(data",{"_index":1065,"title":{},"body":{"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["this.layerservice.findall",{"_index":1066,"title":{},"body":{"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["this.layerservice.findbyid(id",{"_index":1067,"title":{},"body":{"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["this.layerservice.paginate(state",{"_index":1070,"title":{},"body":{"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["this.layerservice.remove(id",{"_index":1069,"title":{},"body":{"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["this.layerservice.update(id",{"_index":1068,"title":{},"body":{"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["this.logger.log(`data",{"_index":129,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{}}}],["this.logger.log(`update",{"_index":257,"title":{},"body":{"injectables/AplService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{}}}],["this.newlayer.create(data",{"_index":1161,"title":{},"body":{"controllers/NewLayerController.html":{}}}],["this.newlayer.findall",{"_index":1162,"title":{},"body":{"controllers/NewLayerController.html":{}}}],["this.newlayer.findbyid(id",{"_index":1163,"title":{},"body":{"controllers/NewLayerController.html":{}}}],["this.newlayer.paginate(state",{"_index":1166,"title":{},"body":{"controllers/NewLayerController.html":{}}}],["this.newlayer.remove(id",{"_index":1165,"title":{},"body":{"controllers/NewLayerController.html":{}}}],["this.newlayer.update(id",{"_index":1164,"title":{},"body":{"controllers/NewLayerController.html":{}}}],["this.notiemailrepository.delete({notification",{"_index":1296,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.repository",{"_index":1466,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repository.createquerybuilder('t",{"_index":271,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["this.repository.createquerybuilder('t').update(geofenceentity).set({status",{"_index":941,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["this.repository.find",{"_index":251,"title":{},"body":{"injectables/AplService.html":{},"injectables/EventDetailService.html":{},"injectables/GroupService.html":{}}}],["this.repository.find({customerid",{"_index":529,"title":{},"body":{"injectables/AssetService.html":{}}}],["this.repository.find({status",{"_index":523,"title":{},"body":{"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["this.repository.findone",{"_index":250,"title":{},"body":{"injectables/AplService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["this.repository.findone({id",{"_index":522,"title":{},"body":{"injectables/AssetService.html":{}}}],["this.repository.save(data",{"_index":249,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["this.repository.save(geofence",{"_index":919,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["this.repository.save(layer",{"_index":256,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["this.templaterepository.findone({id",{"_index":1291,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.userservice.create(data",{"_index":1400,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":1401,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyaccounttype(accounttype",{"_index":1405,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyid(id",{"_index":1402,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.paginate(state",{"_index":1409,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(id",{"_index":1408,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(data",{"_index":1406,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.validate(logindto",{"_index":1416,"title":{},"body":{"controllers/UserController.html":{}}}],["threshold",{"_index":191,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["throw",{"_index":260,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["time",{"_index":1696,"title":{},"body":{"index.html":{}}}],["timeout",{"_index":992,"title":{},"body":{"modules/HttpConfigModule.html":{}}}],["times",{"_index":1690,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":646,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{}}}],["timezone",{"_index":1250,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["tools",{"_index":1598,"title":{},"body":{"index.html":{}}}],["trackcolor",{"_index":463,"title":{},"body":{"entities/AssetEntity.html":{}}}],["trackwidth",{"_index":464,"title":{},"body":{"entities/AssetEntity.html":{}}}],["transformer",{"_index":1185,"title":{},"body":{"classes/NewLayerCreateDto.html":{},"dependencies.html":{}}}],["transforminterceptor",{"_index":98,"title":{},"body":{"controllers/AplController.html":{},"controllers/AppController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationTemplateController.html":{}}}],["transforminterceptor())@apioperation({summary",{"_index":27,"title":{},"body":{"controllers/AplController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GroupController.html":{}}}],["transforminterceptor(apldto",{"_index":120,"title":{},"body":{"controllers/AplController.html":{}}}],["transforminterceptor(customerdto",{"_index":550,"title":{},"body":{"controllers/CustomerController.html":{}}}],["transforminterceptor(eventdetaildto",{"_index":600,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["transforminterceptor(groupdto",{"_index":961,"title":{},"body":{"controllers/GroupController.html":{}}}],["transforminterceptor(messagedto",{"_index":354,"title":{},"body":{"controllers/AppController.html":{}}}],["transforminterceptor(userdto",{"_index":1407,"title":{},"body":{"controllers/UserController.html":{}}}],["true",{"_index":168,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationUserEntity.html":{},"entities/UserEntity.html":{}}}],["true})@joincolumn({name",{"_index":1021,"title":{},"body":{"entities/LandmarkEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["try",{"_index":1464,"title":{},"body":{"injectables/UserService.html":{}}}],["tslib",{"_index":1540,"title":{},"body":{"dependencies.html":{}}}],["twowaymessagemaxlength",{"_index":465,"title":{},"body":{"entities/AssetEntity.html":{}}}],["twowaymessaging",{"_index":466,"title":{},"body":{"entities/AssetEntity.html":{}}}],["type",{"_index":41,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"injectables/AppConfigService.html":{},"modules/AppModule.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NewLayerController.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["type'})@apiresponse({status",{"_index":1381,"title":{},"body":{"controllers/UserController.html":{}}}],["type/:accounttype",{"_index":1403,"title":{},"body":{"controllers/UserController.html":{}}}],["type/:accounttype')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1379,"title":{},"body":{"controllers/UserController.html":{}}}],["typeorm",{"_index":96,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NewLayerController.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":1117,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1124,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["typeormmoduleasyncoptions",{"_index":1118,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["types",{"_index":1596,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":795,"title":{},"body":{"controllers/GeofenceController.html":{},"entities/GroupEntity.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationTemplateController.html":{},"entities/UserEntity.html":{}}}],["ui",{"_index":1538,"title":{},"body":{"dependencies.html":{}}}],["undefined",{"_index":31,"title":{},"body":{"controllers/AplController.html":{},"entities/AplItemEntity.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{}}}],["undefined})@joincolumn({name",{"_index":660,"title":{},"body":{"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{}}}],["understand",{"_index":1669,"title":{},"body":{"index.html":{}}}],["unified",{"_index":1710,"title":{},"body":{"index.html":{}}}],["unit",{"_index":1658,"title":{},"body":{"index.html":{}}}],["units",{"_index":192,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["unknown",{"_index":52,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["unused",{"_index":797,"title":{},"body":{"controllers/GeofenceController.html":{},"entities/GroupEntity.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationTemplateController.html":{},"entities/UserEntity.html":{}}}],["up",{"_index":1688,"title":{},"body":{"index.html":{}}}],["update",{"_index":21,"title":{},"body":{"controllers/AplController.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@body",{"_index":443,"title":{},"body":{"controllers/AssetController.html":{},"controllers/UserController.html":{}}}],["update(@param('id",{"_index":138,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["update(data",{"_index":422,"title":{},"body":{"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(id",{"_index":77,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{}}}],["updated",{"_index":79,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updated_at",{"_index":772,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NewLayerDataEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["updatedat",{"_index":757,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"classes/NewLayerCreateDto.html":{},"entities/NewLayerDataEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["updatedatecolumn",{"_index":775,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NewLayerDataEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["updatedatecolumn({name",{"_index":771,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NewLayerDataEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["updates",{"_index":82,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"controllers/NewLayerController.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["updating",{"_index":543,"title":{},"body":{"controllers/CustomerController.html":{}}}],["url",{"_index":317,"title":{},"body":{"modules/AppConfigModule.html":{},"injectables/AppConfigService.html":{},"modules/AppModule.html":{}}}],["use",{"_index":1629,"title":{},"body":{"index.html":{}}}],["used",{"_index":1281,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["usefactory",{"_index":1125,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["useinterceptors",{"_index":89,"title":{},"body":{"controllers/AplController.html":{},"controllers/AppController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["useinterceptors(new",{"_index":119,"title":{},"body":{"controllers/AplController.html":{},"controllers/AppController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GroupController.html":{},"controllers/UserController.html":{}}}],["useinterceptors(restransforminterceptor",{"_index":432,"title":{},"body":{"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/GeofenceController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":437,"title":{},"body":{"controllers/AssetController.html":{},"entities/NotificationUserEntity.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["user'})@apiresponse({status",{"_index":1372,"title":{},"body":{"controllers/UserController.html":{}}}],["user.entity",{"_index":1336,"title":{},"body":{"entities/NotificationUserEntity.html":{}}}],["usercontroller",{"_index":1367,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["userdto",{"_index":1371,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userentity",{"_index":902,"title":{"entities/UserEntity.html":{}},"body":{"injectables/GeofenceService.html":{},"injectables/NotificationService.html":{},"entities/NotificationUserEntity.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userlogin",{"_index":1425,"title":{"entities/UserLogin.html":{}},"body":{"entities/UserLogin.html":{},"coverage.html":{}}}],["username",{"_index":1129,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["userrepository",{"_index":890,"title":{},"body":{"injectables/GeofenceService.html":{},"injectables/NotificationService.html":{}}}],["users",{"_index":1251,"title":{},"body":{"entities/NotificationEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["userservice",{"_index":1396,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["usertypeenum",{"_index":1377,"title":{},"body":{"controllers/UserController.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["usertypeenum.user",{"_index":1424,"title":{},"body":{"entities/UserEntity.html":{}}}],["user}else",{"_index":1470,"title":{},"body":{"injectables/UserService.html":{}}}],["uses",{"_index":345,"title":{},"body":{"controllers/AppController.html":{},"injectables/UserService.html":{}}}],["using",{"_index":1580,"title":{},"body":{"index.html":{}}}],["valid('development",{"_index":304,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["validate",{"_index":1370,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["validate(@body",{"_index":1415,"title":{},"body":{"controllers/UserController.html":{}}}],["validate(logindto",{"_index":1387,"title":{},"body":{"controllers/UserController.html":{}}}],["validate(payload",{"_index":1455,"title":{},"body":{"injectables/UserService.html":{}}}],["validatelogin(password",{"_index":1435,"title":{},"body":{"entities/UserLogin.html":{}}}],["validationschema",{"_index":297,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["validator",{"_index":1187,"title":{},"body":{"classes/NewLayerCreateDto.html":{},"dependencies.html":{}}}],["value",{"_index":239,"title":{},"body":{"injectables/AplService.html":{},"controllers/AppController.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"entities/GeofenceEntity.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"entities/NewLayerDataEntity.html":{},"entities/NewLayerEntity.html":{},"injectables/NewLayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["value?:string",{"_index":1190,"title":{},"body":{"classes/NewLayerCreateDto.html":{}}}],["vars",{"_index":798,"title":{},"body":{"controllers/GeofenceController.html":{},"entities/GroupEntity.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationTemplateController.html":{},"entities/UserEntity.html":{}}}],["vehicles",{"_index":826,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["vehicleserialnumber",{"_index":467,"title":{},"body":{"entities/AssetEntity.html":{}}}],["vehicletype",{"_index":468,"title":{},"body":{"entities/AssetEntity.html":{}}}],["verify",{"_index":1438,"title":{},"body":{"injectables/UserService.html":{}}}],["version",{"_index":105,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NewLayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{},"properties.html":{}}}],["via",{"_index":1661,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1675,"title":{},"body":{"index.html":{}}}],["void",{"_index":367,"title":{},"body":{"modules/AppModule.html":{}}}],["web",{"_index":1612,"title":{},"body":{"index.html":{}}}],["weblink",{"_index":469,"title":{},"body":{"entities/AssetEntity.html":{}}}],["website",{"_index":563,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["welcome",{"_index":400,"title":{},"body":{"injectables/AppService.html":{}}}],["well",{"_index":1603,"title":{},"body":{"index.html":{}}}],["where(\"id",{"_index":942,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["where('t.id",{"_index":936,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["where('t.status",{"_index":938,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["workspace",{"_index":1589,"title":{},"body":{"index.html":{}}}],["yes",{"_index":856,"title":{},"body":{"entities/GeofenceEntity.html":{},"miscellaneous/enumerations.html":{}}}],["zip",{"_index":1074,"title":{},"body":{"entities/LayerEntity.html":{}}}],["zoom",{"_index":282,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AplController.html":{"url":"controllers/AplController.html","title":"controller - AplController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AplController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Handles requests related to apl\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: AplDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Create Apl'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The apl has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:39\n                \n            \n\n\n            \n                \n                    Post method of apl for apl creation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            AplDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Fin all apl'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:54\n                \n            \n\n\n            \n                \n                    Get method of apl. Finds all the apl in database\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Find apl by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:68\n                \n            \n\n\n            \n                \n                    Get apl by id . Finds apl  based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find apl list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:110\n                \n            \n\n\n            \n                \n                    Find apl list by pagination\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Delete apl by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:98\n                \n            \n\n\n            \n                \n                    Delete api request of apl. Deletes apl by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: AplDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@HttpCode(HttpStatus.CREATED)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Updated apl'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The apl has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:84\n                \n            \n\n\n            \n                \n                    Put method of apl . Updates apl based on id and data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            AplDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { TransformInterceptor } from \"../../../interceptors/transform.interceptor\";\nimport { AplDto } from \"../dto/apl.dto\";\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\nimport { AplService } from \"../service/apl.service\";\n\n\n/**\n * Handles requests related to apl \n */\n\n@Controller({\n    version: ['1'],\n    path: 'assets/apl'\n})\n@ApiTags('apl-controller')\n\nexport class AplController {\n    private readonly logger = new Logger(AplController.name);\n    /**\n     * Constructor for apl controller \n     * @param aplService \n     */\n    constructor(private aplService: AplService) { }\n/**\n * Post method of apl for apl creation \n * @param data \n * @returns \n */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @UseInterceptors(new TransformInterceptor(AplDto))\n    @ApiOperation({ summary: 'Create Apl' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The apl has been successfully created.'})\n    public async create(@Body() data: AplDto): Promise {\n        const d = await this.aplService.create(data);\n        this.logger.log(`data: ${JSON.stringify(d)}`);\n        return this.aplService.create(data);\n    }\n\n    /**\n     * Get method of apl. Finds all the apl in database\n     * @returns \n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(new TransformInterceptor(AplDto))\n    @ApiOperation({ summary: 'Fin all apl' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.aplService.findAll();\n    }\n\n    /**\n     * Get apl by id . Finds apl  based on id provided\n     * @param id \n     * @returns \n     */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(new TransformInterceptor(AplDto))\n    @ApiOperation({ summary: 'Find apl by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOne(@Param('id') id) {\n        return this.aplService.findById(id);\n    }\n\n    /**\n     * Put method of apl . Updates apl based on id and data\n     * @param id \n     * @param data \n     * @returns \n     */\n    @Put(':id')\n    @HttpCode(HttpStatus.CREATED)\n    @UseInterceptors(new TransformInterceptor(AplDto))\n    @ApiOperation({ summary: 'Updated apl' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The apl has been successfully updated.'})\n    public async update(@Param('id') id: number, @Body() data: AplDto) {\n        return this.aplService.update(id, data);\n    }\n\n    /**\n     * Delete api request of apl. Deletes apl by id\n     * @param id \n     * @returns \n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(new TransformInterceptor(AplDto))\n    @ApiOperation({ summary: 'Delete apl by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.aplService.remove(id);\n    }\n \n    /**\n     * Find apl list by pagination\n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find apl list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.aplService.paginate(state);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/AplEntity.html":{"url":"entities/AplEntity.html","title":"entity - AplEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  AplEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is apl entity\nContains apl fields , Creates  apl table im database with respective fields\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                aplItems\n                            \n                            \n                                    Optional\n                                customerId\n                            \n                            \n                                    Optional\n                                esn\n                            \n                            \n                                    Optional\n                                version\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        aplItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AplItemEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, item => item.apl)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        esn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, length: 128})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, length: 128})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { AplItemEntity } from './apl.item.entity';\nimport { ExtendEntity } from './extend.entity';\n\n/**\n * This is apl entity \n * Contains apl fields , Creates  apl table im database with respective fields\n */\n\n@Entity({name: \"apl\"})\nexport class AplEntity extends ExtendEntity {\n    @Column({nullable: true, length: 128})\n    esn?: string;\n    @Column({nullable: true})\n    customerId?: number;\n    @Column({nullable: true, length: 128})\n    version?: string;\n    @OneToMany(() => AplItemEntity, (item) => item.apl)\n    aplItems: AplItemEntity[]    \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/AplItemEntity.html":{"url":"entities/AplItemEntity.html","title":"entity - AplItemEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  AplItemEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is apl_items entity\nContains apl_items fields\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                apl\n                            \n                            \n                                    Optional\n                                color\n                            \n                            \n                                    Optional\n                                displayOption\n                            \n                            \n                                    Optional\n                                maxVal\n                            \n                            \n                                    Optional\n                                minVal\n                            \n                            \n                                    Optional\n                                mplId\n                            \n                            \n                                    Optional\n                                notification\n                            \n                            \n                                    Optional\n                                severity\n                            \n                            \n                                    Optional\n                                thresHold\n                            \n                            \n                                    Optional\n                                units\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        apl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AplEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, apl => apl.aplItems, {eager: false, cascade: undefined, nullable: false})@JoinColumn({name: 'apl_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        displayOption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        maxVal\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        minVal\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        mplId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        notification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        severity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        thresHold\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        units\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { AplEntity } from './apl.entity';\nimport { ExtendEntity } from './extend.entity';\n\n/**\n * This is apl_items entity\n * Contains apl_items fields \n */\n\n@Entity({name: \"apl_items\"})\nexport class AplItemEntity extends ExtendEntity {\n    @Column({nullable: true})\n    mplId?: number;\n    @Column({nullable: true})\n    units?: string;\n    @Column({nullable: true})\n    minVal?: number;\n    @Column({nullable: true})\n    maxVal?: number;\n    @Column({nullable: true})\n    thresHold?: number;\n    @Column({nullable: true})\n    color?: string;\n    @Column({nullable: true})\n    displayOption?: boolean;\n    @Column({nullable: true})\n    notification?: string;\n    @Column({nullable: true})\n    severity?: number;\n    @ManyToOne(() => AplEntity, (apl) => apl.aplItems , {eager: false, cascade: ['insert', 'update', 'remove'], nullable: false})\n    @JoinColumn({name: \"apl_id\"})\n    apl?: AplEntity;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AplService.html":{"url":"injectables/AplService.html","title":"injectable - AplService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AplService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This provides AplService methods for API Query\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor for apl services\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: AplDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:31\n                \n            \n\n\n            \n                \n                    Creates new Api based on data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            AplDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:46\n                \n            \n\n\n            \n                \n                    Find all the apl in database\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:39\n                \n            \n\n\n            \n                \n                    Find APl based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:55\n                \n            \n\n\n            \n                \n                    This query removes apl based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: AplDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:67\n                \n            \n\n\n            \n                \n                    Updates apl with new data checks firstly with id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            AplDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(AplService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\nimport { Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { AplDto } from \"../dto/apl.dto\";\nimport { AplEntity } from \"../entity/apl.entity\";\n\n\n/**\n * This provides AplService methods for API Query\n */\n@Injectable()\nexport class AplService {\n    private readonly logger = new Logger(AplService.name);\n    /**\n     * Constructor for apl services \n     * @param repository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(AplEntity) private repository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n     /**\n      * Creates new Api based on data \n      * @param data \n      * @returns \n      */\n    async create(data: AplDto): Promise {\n        return this.repository.save(data);\n    }\n    /**\n     * Find APl based on id\n     * @param id \n     * @returns \n     */\n    async findById(id: number): Promise {\n        return this.repository.findOne({ id });\n    }\n    /**\n     * Find all the apl in database\n     * @returns \n     */\n    async findAll(): Promise> {\n        return this.repository.find();\n    }\n\n    /**\n     * This query removes apl based on id \n     * @param id \n     * @returns \n     */\n    async remove(id: number): Promise {\n        const layer = await this.findById(id);\n        layer.status = StatusEnum.DELETED;\n        return this.repository.save(layer);\n    }\n\n    /**\n     * Updates apl with new data checks firstly with id \n     * @param id \n     * @param data \n     * @returns \n     */\n    async update(id: number, data: AplDto): Promise {\n        let layer = await this.findById(id);\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `Apl id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        return this.repository.save(layer);\n    }\n\n    /**\n     * @ignore\n     * @param state \n     * @returns \n     */\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppConfigModule.html":{"url":"modules/AppConfigModule.html","title":"module - AppConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    AppConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppConfigModule\n\n\n\ncluster_AppConfigModule_exports\n\n\n\ncluster_AppConfigModule_providers\n\n\n\n\nAppConfigService \n\nAppConfigService \n\n\n\nConfigService \n\nConfigService \n\n\n\nAppConfigModule\n\nAppConfigModule\n\nAppConfigService  -->\n\nAppConfigModule->AppConfigService \n\n\n\nConfigService  -->\n\nAppConfigModule->ConfigService \n\n\n\n\n\nAppConfigService\n\nAppConfigService\n\nAppConfigModule -->\n\nAppConfigService->AppConfigModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/config/app/config.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppConfigService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AppConfigService\n                        \n                        \n                            ConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport * as Joi from '@hapi/joi';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport configuration from './configuration';\nimport { AppConfigService } from './configuration.service';\n\n\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            load: [configuration],\n            validationSchema: Joi.object({\n                APP_NAME: Joi.string().default('application-service/secured'),\n                APP_ENV: Joi.string()\n                    .valid('development', 'production', 'test', 'provision')\n                    .default('development'),\n                APP_URL: Joi.string().default('http://my-app.test'),\n                APP_PORT: Joi.number().default(3333),\n                FRONTEND_APP_PATH: Joi.string().default('/client'),\n            })\n        })\n    ],\n    providers: [ConfigService, AppConfigService],\n    exports: [ConfigService, AppConfigService]\n})\n\n/**\n * AppConfigModule class defines at which url the app is running \n */\nexport class AppConfigModule {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppConfigService.html":{"url":"injectables/AppConfigService.html","title":"injectable - AppConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/config/app/configuration.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This class conains name , env, url to which app is running\n\n            \n\n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                                \n                                    env\n                                \n                                \n                                    url\n                                \n                                \n                                    port\n                                \n                                \n                                    frontendAppPath\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/config/app/configuration.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in apps/starnavigationapi/src/app/config/app/configuration.service.ts:12\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        env\n                    \n                \n\n                \n                    \n                        getenv()\n                    \n                \n                            \n                                \n                                    Defined in apps/starnavigationapi/src/app/config/app/configuration.service.ts:15\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        url\n                    \n                \n\n                \n                    \n                        geturl()\n                    \n                \n                            \n                                \n                                    Defined in apps/starnavigationapi/src/app/config/app/configuration.service.ts:18\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        port\n                    \n                \n\n                \n                    \n                        getport()\n                    \n                \n                            \n                                \n                                    Defined in apps/starnavigationapi/src/app/config/app/configuration.service.ts:21\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        frontendAppPath\n                    \n                \n\n                \n                    \n                        getfrontendAppPath()\n                    \n                \n                            \n                                \n                                    Defined in apps/starnavigationapi/src/app/config/app/configuration.service.ts:24\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n/**\n * This class conains name , env, url to which app is running \n * @constructor configService\n */\n@Injectable()\n\nexport class AppConfigService {\n    constructor(private configService: ConfigService) { }\n\n    get name(): string {\n        return this.configService.get('app.name');\n    }\n    get env(): string {\n        return this.configService.get('app.env');\n    }\n    get url(): string {\n        return this.configService.get('app.url');\n    }\n    get port(): number {\n        return Number(this.configService.get('app.port'));\n    }\n    get frontendAppPath(): string {\n        return this.configService.get('app.frontendAppPath');\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This is controller class  uses Appservice as constructor .\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseInterceptors(new TransformInterceptor())\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/app.controller.ts:20\n                \n            \n\n\n            \n                \n                    With value inside MessageDto.\n\n\n                    \n                    \n                    \n                        Returns :     MessageDto\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseInterceptors, } from '@nestjs/common';\n\nimport { AppService } from './app.service';\nimport { TransformInterceptor } from './interceptors/transform.interceptor';\nimport { MessageDto } from './message.dto';\n/**\n * This is controller class  uses Appservice as constructor .\n * \n */\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n/**\n * With value inside MessageDto.\n * @returns \n */\n  @Get()\n  @UseInterceptors(new TransformInterceptor(MessageDto))\n  getData(): MessageDto{\n    return this.appService.getData();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppConfigModule\n\nAppConfigModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nPostgresDatabaseProviderModule\n\nPostgresDatabaseProviderModule\n\nAppModule -->\n\nPostgresDatabaseProviderModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppConfigModule\n                        \n                        \n                            PostgresDatabaseProviderModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/app.module.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule, RequestMethod } from '@nestjs/common';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AppConfigModule } from './config/app/config.module';\nimport { LoggerMiddleware } from './middleware/logs.middleware';\nimport { LayerModule } from './modules/layers/layer.module';\nimport { PostgresDatabaseProviderModule } from './providers/database/postgres/provider.module';\n\n/**\n * @description This module serve the client folder on root URL\n * @module This module is serving react GUI on root port \n */\n@Module({\n  imports: [\n    ServeStaticModule.forRoot({\n      \n      rootPath: join('', 'client')\n    }),\n   \n    PostgresDatabaseProviderModule,\n    LayerModule,\n    AppConfigModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\n\n/**\n * @class AppModule integrate AppModule with nestjs default NestModule \n */\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LoggerMiddleware).forRoutes({ path: '*', method: RequestMethod.ALL });\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This class returns with a message and name\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/app.service.ts:13\n                \n            \n\n\n            \n                \n                    This returns message and name\n\n\n                    \n                    \n                    \n                        Returns :     MsgResDto\n\n                    \n                    \n                        : string , name:string}\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { MsgResDto } from './msg.res.dto';\n\n/**\n * This class returns with a message and name \n */\n@Injectable()\nexport class AppService {\n  /**\n   * This returns message and name \n   * @returns {message: string , name:string}\n   */\n  getData(): MsgResDto {\n    return { message: 'Welcome to starnavigationapi!', name: 'StarNavigationSystem' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AssetController.html":{"url":"controllers/AssetController.html","title":"controller - AssetController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AssetController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Handles api request related to asset\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findAssetOfUser\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: AssetDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create Asset'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The asset has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:40\n                \n            \n\n\n            \n                \n                    Creates new asset\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            AssetDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Fin all asset'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:52\n                \n            \n\n\n            \n                \n                    Find all the assets in database\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAssetOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAssetOfUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find asset by customerId'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:76\n                \n            \n\n\n            \n                \n                    Find asset based on customer id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find asset list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:115\n                \n            \n\n\n            \n                \n                    Find asset list by pagination\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete asset by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:103\n                \n            \n\n\n            \n                \n                    Deletes asset based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(data: AssetDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Updated asset'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The asset has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:90\n                \n            \n\n\n            \n                \n                    Updates existing asset with new data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            AssetDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\nimport { AssetDto } from \"../dto/asset.dto\";\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\nimport { AssetService } from \"../service/asset.service\";\n\n\n/**\n * Handles api request related to asset \n */\n@Controller({\n    version: ['1'],\n    path: 'assets'\n})\n@ApiTags('assets')\n@UseInterceptors(ResTransformInterceptor)\n\n\nexport class AssetController {\n    private readonly logger = new Logger(AssetController.name);\n    /**\n     * Constructor for asset controller \n     * @param assetService \n     */\n    constructor(private assetService: AssetService) { }\n\n    /**\n     * Creates new asset\n     * @param data \n     * @returns \n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Create Asset' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The asset has been successfully created.'})\n    public async create(@Body() data: AssetDto): Promise {\n        return this.assetService.create(data);\n    }\n\n    /**\n     * Find all the assets in database\n     * @returns \n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Fin all asset' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.assetService.findAll();\n    }\n\n    // Find asset for logged in user \n\n    // @Get(':id')\n    // @HttpCode(HttpStatus.OK)\n    // @ApiOperation({ summary: 'Find asset for logged User' })\n    // @ApiResponse({ status: 403, description: 'Forbidden.' })\n    // public async findUserAsset(@Param() id:number):Promise {\n    //     return this.assetService.findUserAsset(id);\n    // }\n\n\n/**\n * Find asset based on customer id \n * @param id \n * @returns \n */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find asset by customerId' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAssetOfUser(@Param('id') id:number) {\n        return this.assetService.findUserAsset(id);\n    }\n\n    /**\n     * Updates existing asset with new data \n     * @param data \n     * @returns \n     */\n    @Put()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Updated asset' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The asset has been successfully updated.'})\n    public async update(@Body() data: AssetDto) {\n        return this.assetService.update(data);\n    }\n\n    /**\n     * Deletes asset based on id \n     * @param id \n     * @returns \n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Delete asset by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.assetService.remove(id);\n    }\n\n    /**\n     * Find asset list by pagination \n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find asset list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.assetService.paginate(state);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/AssetEntity.html":{"url":"entities/AssetEntity.html","title":"entity - AssetEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  AssetEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is asset entity\nContains asset fields . Creates asset table in database with respective fields\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                    Optional\n                                assetColor\n                            \n                            \n                                    Optional\n                                assetMake\n                            \n                            \n                                    Optional\n                                assetModel\n                            \n                            \n                                    Optional\n                                assetRegistrationNumber\n                            \n                            \n                                    Optional\n                                assetSerialNumber\n                            \n                            \n                                    Optional\n                                countryId\n                            \n                            \n                                    Optional\n                                customerId\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                deviceState\n                            \n                            \n                                    Optional\n                                deviceType\n                            \n                            \n                                    Optional\n                                esn\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                phone\n                            \n                            \n                                    Optional\n                                symbolColor\n                            \n                            \n                                    Optional\n                                symbolSize\n                            \n                            \n                                    Optional\n                                symbolStrokeColor\n                            \n                            \n                                    Optional\n                                symbolStrokeSize\n                            \n                            \n                                    Optional\n                                trackColor\n                            \n                            \n                                    Optional\n                                trackwidth\n                            \n                            \n                                    Optional\n                                twoWayMessageMaxLength\n                            \n                            \n                                    Optional\n                                twoWayMessaging\n                            \n                            \n                                    Optional\n                                vehicleSerialNumber\n                            \n                            \n                                    Optional\n                                vehicletype\n                            \n                            \n                                    Optional\n                                weblink\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        assetColor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        assetMake\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        assetModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        assetRegistrationNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        assetSerialNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        countryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        deviceState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        deviceType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        esn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        symbolColor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        symbolSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 6, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        symbolStrokeColor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        symbolStrokeSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        trackColor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        trackwidth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 6, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        twoWayMessageMaxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        twoWayMessaging\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        vehicleSerialNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        vehicletype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        weblink\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\nimport { ExtendEntity } from './extend.entity';\n\n/**\n * This is asset entity\n * Contains asset fields . Creates asset table in database with respective fields\n */\n\n@Entity({ name: \"asset\" })\nexport class AssetEntity extends ExtendEntity {\n    @Column({ length: 100, nullable: false })\n    esn?: string;\n    @Column({nullable: true})\n    vehicletype?: string;\n    @Column({nullable: true})\n    deviceType?: string;\n    @Column({nullable: true})\n    countryId?: number;\n    @Column({nullable: false})\n    customerId?: number;\n    @Column({nullable: true})\n    alias?: string;\n    @Column({nullable: true})\n    description?: string;\n    @Column({nullable: true})\n    symbolStrokeSize?: number;\n    @Column({nullable: true})\n    symbolStrokeColor?: string;\n    @Column({nullable: true})\n    trackColor?: string;\n    @Column({nullable: true})\n    symbolColor?: string;\n    @Column({nullable: false})\n    name?: string;\n    @Column(\"decimal\", { precision: 6, scale: 2 })\n    symbolSize?: number;\n    @Column(\"decimal\", { precision: 6, scale: 2 })\n    trackwidth?: number;\n    @Column({nullable: true})\n    twoWayMessaging?: boolean;\n    @Column({nullable: true})\n    twoWayMessageMaxLength?: number;\n    @Column({nullable: true})\n    weblink?: string;\n    @Column({nullable: true})\n    assetSerialNumber?: string;\n    @Column({nullable: true})\n    assetRegistrationNumber?: string;\n    @Column({nullable: true})\n    assetMake?: string;\n    @Column({nullable: true})\n    assetModel?: string;\n    @Column({nullable: true})\n    assetColor?: string;\n    @Column({nullable: true})\n    vehicleSerialNumber?: string;\n    @Column({nullable: true})\n    phone?: string;\n    @Column({nullable: true})\n    deviceState?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AssetService.html":{"url":"injectables/AssetService.html","title":"injectable - AssetService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AssetService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This class contains methods for AssetService API Query\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findUserAsset\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for AssetServices\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: LayerCreateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:34\n                \n            \n\n\n            \n                \n                    Creates new asset in database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            LayerCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:50\n                \n            \n\n\n            \n                \n                    Find all the assets from database\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:43\n                \n            \n\n\n            \n                \n                    Find a asset based on id of asset\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserAsset\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserAsset(customerId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:89\n                \n            \n\n\n            \n                \n                    This method finds all the assets based on Customer ID.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    customerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Functions to find customer asset based on id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:59\n                \n            \n\n\n            \n                \n                    Remove a asset from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(data: LayerCreateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:70\n                \n            \n\n\n            \n                \n                    Updates asset with new data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            LayerCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(AssetService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\nimport { Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { LayerCreateDto } from \"../dto/layer.create.dto\";\nimport { AssetEntity } from \"../entity/asset.entity\";\nimport * as _ from \"lodash\";\n\n\n/**\n * This class contains methods for AssetService API Query\n */\n@Injectable()\nexport class AssetService {\n    private readonly logger = new Logger(AssetService.name);\n    /**\n     * Constructor for AssetServices \n     * @param repository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(AssetEntity) private repository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n\n\n        /**\n         * Creates new asset in database\n         * @param data \n         * @returns \n         */\n    async create(data: LayerCreateDto): Promise {\n        return this.repository.save(data);\n    }\n\n    /**\n     * Find a asset based on id of asset\n     * @param id \n     * @returns \n     */\n    async findById(id: number): Promise {\n        return this.repository.findOne({id});\n    }\n    /**\n     * Find all the assets from database\n     * @returns \n     */\n    async findAll(): Promise> {\n        return this.repository.find({status: StatusEnum.ACTIVE});\n    }\n\n    /**\n     * Remove a asset from database\n     * @param id \n     * @returns \n     */\n    async remove(id: number): Promise {\n        const layer = await this.findById(id);\n        layer.status = StatusEnum.DELETED;\n        return this.repository.save(layer);\n    }\n\n    /**\n     * Updates asset with new data \n     * @param data \n     * @returns \n     */\n    async update(data: LayerCreateDto): Promise {\n        const id: number = _.result(data,'id',0);\n        data = _.omit(data, ['id']);\n        let layer = await this.findById(id);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `Asset id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        return this.repository.save(layer);\n    }\n\n/**\n * This method finds all the assets based on Customer ID.\n * @param {number}customerId  Functions to find customer asset based on id\n * @returns \n */\n   async findUserAsset(customerId:number):Promise> {\n       return this.repository.find({customerId})\n       \n   }\n\n\n    /**\n     * @ignore\n     * @param state \n     * @returns \n     */\n\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CustomerController.html":{"url":"controllers/CustomerController.html","title":"controller - CustomerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CustomerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Handles api requests related to customers\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CustomerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Create Customer'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The customer has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:42\n                \n            \n\n\n            \n                \n                    Handles api request for customer creation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            CustomerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find all customer'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:54\n                \n            \n\n\n            \n                \n                    Hanldes api request for finding all the customer\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find customer by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:67\n                \n            \n\n\n            \n                \n                    Find a customer based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find customer list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:106\n                \n            \n\n\n            \n                \n                    customer list by pagination\nFind\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete customer by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:94\n                \n            \n\n\n            \n                \n                    Handles api request for customer delete request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(data: CustomerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Updated customer'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The customer has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:81\n                \n            \n\n\n            \n                \n                    Handles api request for updating customer details\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            CustomerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\nimport { TransformInterceptor } from \"../../../interceptors/transform.interceptor\";\nimport { CustomerDto } from \"../dto/customer.dto\";\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\nimport { CustomerService } from \"../service/customer.service\";\n\n\n/**\n * Handles api requests related to customers \n */\n\n@Controller({\n    version: ['1'],\n    path: 'customers'\n})\n@ApiTags('customer-controller')\n@UseInterceptors(ResTransformInterceptor)\n\nexport class CustomerController {\n    private readonly logger = new Logger(CustomerController.name);\n    /**\n     * Constructor for customer controller \n     * @param customerService \n     */\n    constructor(private customerService: CustomerService) { }\n\n    /**\n     * Handles api request for customer creation \n     * @param data \n     * @returns \n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @UseInterceptors(new TransformInterceptor(CustomerDto))\n    @ApiOperation({ summary: 'Create Customer' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The customer has been successfully created.'})\n    public async create(@Body() data: CustomerDto): Promise {\n        return this.customerService.create(data);\n    }\n\n    /**\n     * Hanldes api request for finding all the customer\n     * @returns \n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find all customer' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.customerService.findAll();\n    }\n\n    /**\n     * Find a customer based on id \n     * @param id \n     * @returns \n     */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find customer by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOne(@Param('id') id) {\n        return this.customerService.findById(id);\n    }\n\n    /**\n     * Handles api request for updating customer details \n     * @param data \n     * @returns \n     */\n    @Put()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Updated customer' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The customer has been successfully updated.'})\n    public async update( @Body() data: CustomerDto) {\n        return this.customerService.update(data);\n    }\n\n    /**\n     * Handles api request for customer delete request \n     * @param id \n     * @returns \n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Delete customer by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.customerService.remove(id);\n    }\n\n    /** customer list by pagination \n     * Find \n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find customer list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.customerService.paginate(state);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CustomerEntity.html":{"url":"entities/CustomerEntity.html","title":"entity - CustomerEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CustomerEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is customer entity\nContains customer fields, Create customer in database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                    Optional\n                                countryCode\n                            \n                            \n                                    Optional\n                                email\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    Optional\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        countryCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\nimport { ExtendEntity } from './extend.entity';\n\n/**\n * This is customer entity\n * Contains customer fields, Create customer in database \n */\n\n@Entity({name: \"customers\"})\nexport class CustomerEntity extends ExtendEntity {\n    @Column({length: 100, nullable: false})\n    name?: string;\n    email?: string;\n    address?: string;\n    website?: string;\n    phoneNumber?: string;\n    countryCode?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomerService.html":{"url":"injectables/CustomerService.html","title":"injectable - CustomerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This class contains methods for CustomerService API.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for Customer services\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CustomerDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:33\n                \n            \n\n\n            \n                \n                    Creates new customer in database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            CustomerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:50\n                \n            \n\n\n            \n                \n                    Find all the customers\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:42\n                \n            \n\n\n            \n                \n                    Find a customer based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:58\n                \n            \n\n\n            \n                \n                    Remove a customer from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(data: CustomerDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:69\n                \n            \n\n\n            \n                \n                    Updates a customer field based on new data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            CustomerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(CustomerService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\nimport { Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { CustomerDto } from \"../dto/customer.dto\";\nimport { CustomerEntity } from \"../entity/customer.entity\";\nimport * as _ from \"lodash\";\n\n/**\n * This class contains methods for CustomerService API.\n */\n\n@Injectable()\nexport class CustomerService {\n    private readonly logger = new Logger(CustomerService.name);\n    /**\n     * Constructor for Customer services \n     * @param repository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(CustomerEntity) private repository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n\n        /**\n         * Creates new customer in database\n         * @param data \n         * @returns \n         */\n    async create(data: CustomerDto): Promise {\n        return this.repository.save(data);\n    }\n\n    /**\n     * Find a customer based on id\n     * @param id \n     * @returns \n     */\n    async findById(id: number): Promise {\n        return this.repository.findOne({ id });\n    }\n\n    /**\n     * Find all the customers \n     * @returns \n     */\n    async findAll(): Promise> {\n        return this.repository.find({status: StatusEnum.ACTIVE});\n    }\n    /**\n     * Remove a customer from database\n     * @param id \n     * @returns \n     */\n    async remove(id: number): Promise {\n        const layer = await this.findById(id);\n        layer.status = StatusEnum.DELETED;\n        return this.repository.save(layer);\n    }\n\n    /**\n     * Updates a customer field based on new data \n     * @param data \n     * @returns \n     */\n    async update(data: CustomerDto): Promise {\n        const id: number = _.result(data,'id',0);\n        data = _.omit(data, ['id']);\n        let layer = await this.findById(id);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `Customer id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        return this.repository.save(layer);\n    }\n\n    /**\n     * @ignore\n     * @param state \n     * @returns \n     */\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EventDetailController.html":{"url":"controllers/EventDetailController.html","title":"controller - EventDetailController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EventDetailController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Handles Event API request\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: EventDetailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Create event detail'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The event detail has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:42\n                \n            \n\n\n            \n                \n                    Create new event\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            EventDetailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Fin all event detail'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:57\n                \n            \n\n\n            \n                \n                    Find all the event details\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Find event detail by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:71\n                \n            \n\n\n            \n                \n                    Find event detail by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find event detail list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:114\n                \n            \n\n\n            \n                \n                    Find event detail list by pagination\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Delete event detail by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:102\n                \n            \n\n\n            \n                \n                    Delete event by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: EventDetailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@HttpCode(HttpStatus.CREATED)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Updated event detail'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The event detail has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:87\n                \n            \n\n\n            \n                \n                    Updates event detail\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            EventDetailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { TransformInterceptor } from \"../../../interceptors/transform.interceptor\";\nimport { EventDetailDto } from \"../dto/event.detail.dto\";\nimport { EventDetailsEntity } from \"../entity/event.details.entity\";\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\nimport { EventDetailService } from \"../service/event.detail.service\";\n\n\n/**\n * Handles Event API request\n */\n@Controller({\n    version: ['1'],\n    path: 'event-details'\n})\n@ApiTags('event-details-controller')\n\n\nexport class EventDetailController {\n    private readonly logger = new Logger(EventDetailController.name);\n\n    /**\n     * Constructor for aplservice \n     * @param aplService \n     */\n    constructor(private aplService: EventDetailService) { }\n\n    /**\n     * Create new event \n     * @param data \n     * @returns \n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @UseInterceptors(new TransformInterceptor(EventDetailDto))\n    @ApiOperation({ summary: 'Create event detail' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The event detail has been successfully created.'})\n    public async create(@Body() data: EventDetailDto): Promise {\n        const d = await this.aplService.create(data);\n        this.logger.log(`data: ${JSON.stringify(d)}`);\n        return this.aplService.create(data);\n    }\n\n    /**\n     * Find all the event details \n     * @returns \n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(new TransformInterceptor(EventDetailDto))\n    @ApiOperation({ summary: 'Fin all event detail' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.aplService.findAll();\n    }\n\n    /**\n     * Find event detail by id \n     * @param id \n     * @returns \n     */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(new TransformInterceptor(EventDetailDto))\n    @ApiOperation({ summary: 'Find event detail by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOne(@Param('id') id) {\n        return this.aplService.findById(id);\n    }\n\n    /**\n     * Updates event detail\n     * @param id \n     * @param data \n     * @returns \n     */\n    @Put(':id')\n    @HttpCode(HttpStatus.CREATED)\n    @UseInterceptors(new TransformInterceptor(EventDetailDto))\n    @ApiOperation({ summary: 'Updated event detail' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The event detail has been successfully updated.'})\n    public async update(@Param('id') id: number, @Body() data: EventDetailDto) {\n        return this.aplService.update(id, data);\n    }\n\n    /**\n     * Delete event by id \n     * @param id \n     * @returns \n     */\n\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(new TransformInterceptor(EventDetailDto))\n    @ApiOperation({ summary: 'Delete event detail by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.aplService.remove(id);\n    }\n\n    /**\n     * Find event detail list by pagination\n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find event detail list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.aplService.paginate(state);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventDetailService.html":{"url":"injectables/EventDetailService.html","title":"injectable - EventDetailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventDetailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This class contains methods for EventDetaial API\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for Event details\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: EventDetailDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:33\n                \n            \n\n\n            \n                \n                    Creates new EventDetail in database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            EventDetailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:48\n                \n            \n\n\n            \n                \n                    Find all the events\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:41\n                \n            \n\n\n            \n                \n                    Find event based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:57\n                \n            \n\n\n            \n                \n                    Remove a event based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: EventDetailDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:68\n                \n            \n\n\n            \n                \n                    Updates event based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            EventDetailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(EventDetailService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\nimport { Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { EventDetailDto } from \"../dto/event.detail.dto\";\nimport { EventDetailsEntity } from \"../entity/event.details.entity\";\n\n/**\n * This class contains methods for EventDetaial API\n * @class EventDetailService\n */\n\n@Injectable()\nexport class EventDetailService {\n    private readonly logger = new Logger(EventDetailService.name);\n\n    /**\n     * Constructor for Event details\n     * @param repository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(EventDetailsEntity) private repository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n/**\n *Creates new EventDetail in database \n * @param data \n * @returns \n */\n    async create(data: EventDetailDto): Promise {\n        return this.repository.save(data);\n    }\n    /**\n     * Find event based on id provided\n     * @param id \n     * @returns \n     */\n    async findById(id: number): Promise {\n        return this.repository.findOne({ id });\n    }\n    /**\n     * Find all the events \n     * @returns \n     */\n    async findAll(): Promise> {\n        return this.repository.find();\n    }\n\n    /**\n     * Remove a event based on id provided\n     * @param id \n     * @returns \n     */\n    async remove(id: number): Promise {\n        const layer = await this.findById(id);\n        layer.status = StatusEnum.DELETED;\n        return this.repository.save(layer);\n    }\n    /**\n     * Updates event based on id \n     * @param id \n     * @param data \n     * @returns \n     */\n    async update(id: number, data: EventDetailDto): Promise {\n        let layer = await this.findById(id);\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `Event detail id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        return this.repository.save(layer);\n    }\n\n    /**\n     * @ignore\n     * @param state \n     * @returns \n     */\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/EventDetailsEntity.html":{"url":"entities/EventDetailsEntity.html","title":"entity - EventDetailsEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  EventDetailsEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is event_details entity\nContains event_details fields\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                aircraftId\n                            \n                            \n                                    Optional\n                                altitude\n                            \n                            \n                                    Optional\n                                eventId\n                            \n                            \n                                eventParamDetails\n                            \n                            \n                                    Optional\n                                gpsLatitude\n                            \n                            \n                                    Optional\n                                gpsLongitude\n                            \n                            \n                                    Optional\n                                heading\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                packetType\n                            \n                            \n                                    Optional\n                                paramCount\n                            \n                            \n                                    Optional\n                                scheduledDepartureTime\n                            \n                            \n                                    Optional\n                                speed\n                            \n                            \n                                    Optional\n                                startTime\n                            \n                            \n                                    Optional\n                                stopTime\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        aircraftId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        altitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventParamDetails\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EventParamDetailsEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany('EventParamDetailsEntity', 'eventDetails', {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        gpsLatitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 6, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        gpsLongitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 6, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        heading\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        packetType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PacketTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PacketTypeEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        paramCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        scheduledDepartureTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        speed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        startTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stopTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { PacketTypeEnum } from '../../../enum/packet.type.enum';\nimport { EventParamDetailsEntity } from './event.param.details.entity';\nimport { ExtendEntity } from './extend.entity';\n\n\n/**\n * This is event_details entity\n * Contains event_details fields \n */\n\n@Entity({name: \"event_details\"})\nexport class EventDetailsEntity extends ExtendEntity {\n    @Column({length: 100, nullable: false})\n    name?: string;\n    @Column({ type: \"enum\", enum: PacketTypeEnum, default: PacketTypeEnum.A })\n    packetType?: PacketTypeEnum;\n    aircraftId?: string;\n    @Column({ type: 'timestamp', nullable: true })\n    scheduledDepartureTime?: Date;\n    @Column(\"decimal\", { precision: 6, scale: 2 })\n    gpsLatitude?: number;\n    @Column(\"decimal\", { precision: 6, scale: 2 })\n    gpsLongitude?: number;\n    altitude?: string;\n    speed?: string;\n    heading?: string;\n    startTime?: string;\n    stopTime?: string;\n    paramCount?: number;\n    eventId?: string;\n    @OneToMany('EventParamDetailsEntity', 'eventDetails', { onDelete: 'CASCADE' })\n    eventParamDetails: EventParamDetailsEntity[]    \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/EventParamDetailsEntity.html":{"url":"entities/EventParamDetailsEntity.html","title":"entity - EventParamDetailsEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  EventParamDetailsEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is event_param_details entity\nContains event_param fields\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                eventDetails\n                            \n                            \n                                    Optional\n                                packetType\n                            \n                            \n                                    Optional\n                                paramId\n                            \n                            \n                                    Optional\n                                paramValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        eventDetails\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EventParamDetailsEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, event => event.eventParamDetails, {nullable: false, eager: false, cascade: undefined})@JoinColumn({name: 'event_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        packetType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PacketTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PacketTypeEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        paramId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        paramValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { PacketTypeEnum } from '../../../enum/packet.type.enum';\nimport { EventDetailsEntity } from './event.details.entity';\nimport { ExtendEntity } from './extend.entity';\n\n\n/**\n * This is event_param_details entity\n * Contains event_param fields \n */\n\n@Entity({name: \"event_param_details\"})\nexport class EventParamDetailsEntity extends ExtendEntity {\n    @Column({ type: \"enum\", enum: PacketTypeEnum, default: PacketTypeEnum.A })\n    packetType?: PacketTypeEnum;\n    paramId?: number;\n    paramValue?: string;\n    @ManyToOne(() => EventDetailsEntity, (event) => event.eventParamDetails , {nullable: false, eager: false, cascade: ['insert', 'update', 'remove']})\n    @JoinColumn({name: \"event_id\"})\n    eventDetails?: EventParamDetailsEntity;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/FlighLocationEntity.html":{"url":"entities/FlighLocationEntity.html","title":"entity - FlighLocationEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  FlighLocationEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is FlightLocation entity\nContains FlightLocation fields.  Creates new flight in database.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                actualArrivalTime\n                            \n                            \n                                    Optional\n                                actualDepartureTime\n                            \n                            \n                                    Optional\n                                aircraftModel\n                            \n                            \n                                    Optional\n                                altitude\n                            \n                            \n                                    Optional\n                                bufferHeight\n                            \n                            \n                                    Optional\n                                bufferWidth\n                            \n                            \n                                    Optional\n                                estimatedArrivalTime\n                            \n                            \n                                    Optional\n                                estimatedDepartureTime\n                            \n                            \n                                    Optional\n                                flightPlan\n                            \n                            \n                                    Optional\n                                latitude\n                            \n                            \n                                    Optional\n                                legTime\n                            \n                            \n                                    Optional\n                                locationRadius\n                            \n                            \n                                    Optional\n                                longitude\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                pilots\n                            \n                            \n                                    Optional\n                                radius\n                            \n                            \n                                    Optional\n                                routeBufferHeight\n                            \n                            \n                                    Optional\n                                routeBufferWidth\n                            \n                            \n                                    Optional\n                                scheduledArrivalTime\n                            \n                            \n                                    Optional\n                                sequence\n                            \n                            \n                                    Optional\n                                stage\n                            \n                            \n                                    Optional\n                                state\n                            \n                            \n                                    Optional\n                                stopTime\n                            \n                            \n                                    Optional\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        actualArrivalTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        actualDepartureTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        aircraftModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        altitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bufferHeight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bufferWidth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        estimatedArrivalTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        estimatedDepartureTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        flightPlan\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FlighPlanEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, plan => plan.locations, {nullable: false, eager: false, cascade: undefined})@JoinColumn({name: 'flight_plan_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 6, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        legTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        locationRadius\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 6, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        pilots\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        radius\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        routeBufferHeight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        routeBufferWidth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        scheduledArrivalTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        sequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stopTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { ExtendEntity } from './extend.entity';\nimport { FlighPlanEntity } from './flight.plan.entity';\n\n\n/**\n * This is FlightLocation entity\n * Contains FlightLocation fields.  Creates new flight in database. \n */\n\n@Entity({name: \"fligh_location\"})\nexport class FlighLocationEntity extends ExtendEntity {\n    sequence?: number;\n    type?: string;\n    legTime?: number;\n    @Column(\"decimal\", { precision: 6, scale: 2 })\n    latitude?: number;\n    @Column(\"decimal\", { precision: 6, scale: 2 })\n    longitude?: number;\n    altitude?: number;\n    radius?: number;\n    bufferHeight?: number;\n    bufferWidth?: number;\n    stage?: string;\n    stopTime?: number;\n    @ManyToOne(() => FlighPlanEntity, (plan) => plan.locations , {nullable: false, eager: false, cascade: ['insert', 'update', 'remove']})\n    @JoinColumn({name: \"flight_plan_id\"})\n    flightPlan?: FlighPlanEntity;\n    @Column({nullable: true})\n    name?: string;\n    @Column({ type: 'timestamp', nullable: true })\n    scheduledArrivalTime?: Date;\n    aircraftModel?: string;\n    pilots?: string;\n    @Column({ type: 'timestamp', nullable: true })\n    estimatedDepartureTime?: Date;\n    @Column({ type: 'timestamp', nullable: true })\n    estimatedArrivalTime?: Date;\n    @Column({ type: 'timestamp', nullable: true })\n    actualDepartureTime?: Date;\n    @Column({ type: 'timestamp', nullable: true })\n    actualArrivalTime?: Date;\n    routeBufferHeight?: number;\n    routeBufferWidth?: number;\n    locationRadius?: number;\n    state?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/FlighPlanEntity.html":{"url":"entities/FlighPlanEntity.html","title":"entity - FlighPlanEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  FlighPlanEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is flight_Plan entity\nContains flightPlan fields\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                flightNumber\n                            \n                            \n                                locations\n                            \n                            \n                                    Optional\n                                scheduledDepartureTime\n                            \n                            \n                                    Optional\n                                tailNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        flightNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        locations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FlighLocationEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, location => location.flightPlan)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        scheduledDepartureTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        tailNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { ExtendEntity } from './extend.entity';\nimport { FlighLocationEntity } from './fligh.location.entity';\n\n\n/**\n * This is flight_Plan entity\n * Contains flightPlan fields \n */\n\n@Entity({name: \"fligh_plan\"})\nexport class FlighPlanEntity extends ExtendEntity {\n    @Column({length: 64, nullable: false})\n    tailNumber?: string;\n    @Column({length: 64, nullable: false})\n    flightNumber?: string;\n    @Column({ type: 'timestamp', nullable: false })\n    scheduledDepartureTime?: Date;\n    @OneToMany(() => FlighLocationEntity, (location) => location.flightPlan)\n    locations: FlighLocationEntity[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/GeoObjectEntity.html":{"url":"entities/GeoObjectEntity.html","title":"entity - GeoObjectEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  GeoObjectEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is geo_object entity\nContains geo_object fields creates new entry\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bufferDistance\n                            \n                            \n                                    Optional\n                                geoFormat\n                            \n                            \n                                    Optional\n                                geom\n                            \n                            \n                                landmark\n                            \n                            \n                                    Optional\n                                srid\n                            \n                            \n                                    Optional\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bufferDistance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        geoFormat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        geom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        landmark\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LandmarkEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne('LandmarkEntity', 'landmark', {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToOne } from 'typeorm';\nimport { ExtendEntity } from './extend.entity';\nimport { LandmarkEntity } from './landmark.entity';\n\n\n/**\n * This is geo_object entity\n * Contains geo_object fields creates new entry\n */\n\n@Entity({name: \"geo_object\"})\nexport class GeoObjectEntity extends ExtendEntity {\n    @Column({length: 64})\n    type?: string;\n    bufferDistance?: string;\n    geom?: string;\n    geoFormat?: string;\n    srid?: number;\n    @OneToOne('LandmarkEntity', 'landmark', { onDelete: 'CASCADE' })\n    landmark: LandmarkEntity;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/GeofenceAssetEntity.html":{"url":"entities/GeofenceAssetEntity.html","title":"entity - GeofenceAssetEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  GeofenceAssetEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is geofence_assets entity\nContains geofence_assets fields\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                asset\n                            \n                            \n                                    Optional\n                                assetId\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        asset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GeofenceEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, map => map.vehicles)@JoinColumn({name: 'geofence_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        assetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'asset_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, JoinColumn, ManyToOne, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\nimport { AssetEntity } from './asset.entity';\nimport { GeofenceEntity } from './geofence.entity';\n\n/**\n * This is geofence_assets entity\n * Contains geofence_assets fields \n */\n\n\n@Entity({ name: \"geofence_assets\" })\nexport class GeofenceAssetEntity {\n    @PrimaryGeneratedColumn()\n    id?: number;\n    @CreateDateColumn({name: \"created_at\"})\n    createdAt?: Date;\n    @UpdateDateColumn({name: \"updated_at\"})\n    updatedAt?: Date;\n\n    @ManyToOne(() => GeofenceEntity, map => map.vehicles)\n    @JoinColumn({name: \"geofence_id\"})\n    asset?: GeofenceEntity;\n\n    @Column({name: 'asset_id'})\n    assetId?: number;\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GeofenceController.html":{"url":"controllers/GeofenceController.html","title":"controller - GeofenceController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GeofenceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Handles geofence API request\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: GeofenceDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create geofence'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The geofence has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:41\n                \n            \n\n\n            \n                \n                    Create new geofence\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            GeofenceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find all geofence'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:54\n                \n            \n\n\n            \n                \n                    Find all geofence\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find geofence template by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:68\n                \n            \n\n\n            \n                \n                    Find geofence template by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find notification template list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:109\n                \n            \n\n\n            \n                \n                    Find notification template list by pagination\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete geofence by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:97\n                \n            \n\n\n            \n                \n                    Delete geofence by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: GeofenceDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Updated geofence template'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The geofence has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:84\n                \n            \n\n\n            \n                \n                    Update geofence template by id and new data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            GeofenceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\nimport { GeofenceDto } from \"../dto/geofence.dto\";\nimport { GeofenceEntity } from \"../entity/geofence.entity\";\nimport { GeofenceService } from \"../service/geofence.service\";\n\n\n/**\n * Handles geofence API request\n */\n@Controller({\n    version: ['1'],\n    path: 'geofence'\n})\n@ApiTags('geofence-controller')\n@UseInterceptors(ResTransformInterceptor)\n\n\nexport class GeofenceController {\n    private readonly logger = new Logger(GeofenceController.name);\n    /**\n     * Constructor for geofence controller \n     * @param geofenceService \n     */\n    constructor(private geofenceService: GeofenceService) { }\n\n    /**\n     * Create new geofence\n     * @param data \n     * @returns \n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Create geofence' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The geofence has been successfully created.'})\n    public async create(@Body() data: GeofenceDto): Promise {\n        return this.geofenceService.create(data);\n    }\n\n    /**\n     * Find all geofence\n     * @returns \n     */\n\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find all geofence' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.geofenceService.findAll();\n    }\n\n    /**\n     * Find geofence template by id \n     * @param id \n     * @returns \n     */\n\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find geofence template by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOne(@Param('id') id) {\n        return this.geofenceService.findById(id);\n    }\n\n    /**\n     * Update geofence template by id and new data\n     * @param id \n     * @param data \n     * @returns \n     */\n\n    @Put(':id')\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Updated geofence template' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The geofence has been successfully updated.'})\n    public async update(@Param('id') id: number, @Body() data: GeofenceDto) {\n        return this.geofenceService.update(id, data);\n    }\n\n    /**\n     * Delete geofence by id \n     * @param id \n     * @returns \n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Delete geofence by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.geofenceService.remove(id);\n    }\n\n    /**\n     * Find notification template list by pagination\n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find notification template list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.geofenceService.paginate(state);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/GeofenceEntity.html":{"url":"entities/GeofenceEntity.html","title":"entity - GeofenceEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  GeofenceEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is Geofence entity\nContains Geofence fields creates new entry in database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bufferDistance\n                            \n                            \n                                    Optional\n                                customerId\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                eventSeverity\n                            \n                            \n                                    Optional\n                                geojsonobject\n                            \n                            \n                                    Optional\n                                landmarkId\n                            \n                            \n                                    Optional\n                                layerId\n                            \n                            \n                                    Optional\n                                maxAltitude\n                            \n                            \n                                    Optional\n                                maxVelocity\n                            \n                            \n                                    Optional\n                                minAltitude\n                            \n                            \n                                    Optional\n                                minVelocity\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                notifications\n                            \n                            \n                                    Optional\n                                notify\n                            \n                            \n                                    Optional\n                                notifyEmail\n                            \n                            \n                                    Optional\n                                notifyMap\n                            \n                            \n                                    Optional\n                                scheduleEndTime\n                            \n                            \n                                    Optional\n                                scheduleStartTime\n                            \n                            \n                                    Optional\n                                vehicles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bufferDistance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'buffer_distance'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, name: 'customer_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'description'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        eventSeverity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EventSeverityEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: EventSeverityEnum, default: undefined, name: 'event_severity'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        geojsonobject\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'simple-json', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        landmarkId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'g_landmark_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        layerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'g_layer_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        maxAltitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'max_altitude'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        maxVelocity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 6, scale: 2, name: 'max_velocity'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        minAltitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'min_altitude'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        minVelocity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 6, scale: 2, name: 'min_velocity'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :     GeofenceNotificationEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany('GeofenceNotificationEntity', 'notification', {onDelete: 'CASCADE', eager: true, cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        notify\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotifyEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: NotifyEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        notifyEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Yes\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'notify_email', length: 3})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        notifyMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Yes\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'notify_map', length: 3})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        scheduleEndTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'schedule_end_time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        scheduleStartTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'schedule_start_time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        vehicles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     GeofenceAssetEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany('GeofenceAssetEntity', 'asset', {eager: true, cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { EventSeverityEnum } from '../../../enum/event.severity.enum';\nimport { NotifyEnum } from '../../../enum/notify.enum';\nimport { ExtendEntity } from './extend.entity';\nimport { GeofenceAssetEntity } from './genfence.asset.entity';\nimport { GeofenceNotificationEntity } from './geofence.notification.entity';\n\n\n/**\n * This is Geofence entity\n * Contains Geofence fields creates new entry in database\n */\n\n@Entity({name: \"geofence\"})\nexport class GeofenceEntity extends ExtendEntity {\n    @Column({length: 100, nullable: false})\n    name?: string;\n    @Column({ type: \"enum\", enum: NotifyEnum, default: NotifyEnum.INSIDE })\n    notify?:NotifyEnum;  \n    @Column({name: 'buffer_distance'})\n    bufferDistance?: number;\n    @Column({name: 'notify_map', length: 3})\n    notifyMap?: string = \"Yes\";\n    @Column({name: 'notify_email', length: 3})\n    notifyEmail?: string = \"Yes\";\n    @Column({name: 'description'})\n    description?: string;\n    @Column({name: 'min_altitude'})\n    minAltitude?: number;\n    @Column({name: 'max_altitude'})\n    maxAltitude?: number;\n    @Column(\"decimal\", { precision: 6, scale: 2 , name: 'min_velocity'})\n    minVelocity?: number;\n    @Column(\"decimal\", { precision: 6, scale: 2, name: 'max_velocity' })\n    maxVelocity?: number;\n    @Column({ type: \"enum\", enum: EventSeverityEnum, default: EventSeverityEnum.low, name: 'event_severity' })\n    eventSeverity?:EventSeverityEnum;\n    @Column({name: 'schedule_start_time'})\n    scheduleStartTime?: string;\n    @Column({name: 'schedule_end_time'})\n    scheduleEndTime?: string;\n    @Column({nullable: false, name: 'customer_id'})\n    customerId?: number;\n    @Column({type: \"simple-json\", nullable: true})\n    geojsonobject?: unknown;\n\n    @OneToMany('GeofenceAssetEntity', 'asset', { eager: true, cascade: true })\n    vehicles?: GeofenceAssetEntity[];\n\n    @Column({name: 'g_layer_id'})\n    layerId?: number;\n\n    @Column({name: 'g_landmark_id'})\n    landmarkId?: number;\n    \n    @OneToMany('GeofenceNotificationEntity', 'notification', {onDelete: 'CASCADE', eager: true, cascade: true })\n    notifications?: GeofenceNotificationEntity[];\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/GeofenceNotificationEntity.html":{"url":"entities/GeofenceNotificationEntity.html","title":"entity - GeofenceNotificationEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  GeofenceNotificationEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is Geofence Notification entity\nContains Geofence Notification field creates new geofence Notification\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                notification\n                            \n                            \n                                    Optional\n                                notificationId\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        notification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GeofenceEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, map => map.notifications, {onDelete: 'CASCADE'})@JoinColumn({name: 'geofence_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        notificationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'notification_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, JoinColumn, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\nimport { GeofenceEntity } from './geofence.entity';\n\n\n/**\n * This is Geofence Notification entity\n * Contains Geofence Notification field creates new geofence Notification\n */\n\n@Entity({ name: \"geofence_notifications\" })\nexport class GeofenceNotificationEntity {\n    @PrimaryGeneratedColumn()\n    id?: number;\n    @CreateDateColumn({name: \"created_at\"})\n    createdAt?: Date;\n    @UpdateDateColumn({name: \"updated_at\"})\n    updatedAt?: Date;\n\n    @ManyToOne(() => GeofenceEntity, map => map.notifications, {onDelete: 'CASCADE'})\n    @JoinColumn({name: \"geofence_id\"})\n    notification?: GeofenceEntity;\n\n    \n    @Column({name: 'notification_id'})\n    notificationId?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GeofenceService.html":{"url":"injectables/GeofenceService.html","title":"injectable - GeofenceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GeofenceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This class contains method for geofence services\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, layerRepository: Repository, landmarkRepository: Repository, userRepository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:27\n                            \n                        \n\n                \n                    \n                            Constructor for geofence service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        layerRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        landmarkRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: GeofenceDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:48\n                \n            \n\n\n            \n                \n                    Create new GeoFence\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            GeofenceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:85\n                \n            \n\n\n            \n                \n                    Finds all the geofence entries in database\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:67\n                \n            \n\n\n            \n                \n                    Finds Geofence based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:103\n                \n            \n\n\n            \n                \n                    Remove Geofence based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: GeofenceDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:116\n                \n            \n\n\n            \n                \n                    Updates Geofence entry based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            GeofenceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GeofenceService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { paginate, Pagination } from \"nestjs-typeorm-paginate\";\nimport { Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { GeofenceDto } from \"../dto/geofence.dto\";\nimport { GeofenceEntity } from \"../entity/geofence.entity\";\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\nimport { LayerEntity } from \"../entity/layer.entity\";\nimport { UserEntity } from \"../entity/user.entity\";\nimport * as _ from \"lodash\";\nimport { CustomerEntity } from \"../entity/customer.entity\";\nimport { GeofenceNotificationEntity } from \"../entity/geofence.notification.entity\";\nimport { NotificationEntity } from \"../entity/notification.entity\";\nimport { GeofenceAssetEntity } from \"../entity/genfence.asset.entity\";\nimport { AssetEntity } from \"../entity/asset.entity\";\n\n\n/**\n * This class contains method for geofence services\n * @class Geofence\n */\n@Injectable()\nexport class GeofenceService {\n    private readonly logger = new Logger(GeofenceService.name);\n    /**\n     * Constructor for geofence service \n     * @param repository \n     * @param layerRepository \n     * @param landmarkRepository \n     * @param userRepository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(GeofenceEntity) private repository: Repository,\n        @InjectRepository(LayerEntity) private layerRepository: Repository,\n        @InjectRepository(LandmarkEntity) private landmarkRepository: Repository,\n        @InjectRepository(UserEntity) private userRepository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n\n        /**\n         * Create new GeoFence \n         * @param data \n         * @returns \n         */\n    async create(data: GeofenceDto): Promise {\n        data.vehicles.forEach(o => {\n            o = Object.assign(o, {assetId: o.id})\n            _.omit(o, ['id']);\n        });\n        data.notifications.forEach(o => {\n            o = Object.assign(o, {notificationId: o.id})\n            _.omit(o, ['id']);\n        });\n        const geofence: GeofenceEntity = Object.assign(data);\n        const notification = await this.repository.save(geofence);\n        return notification;\n    }\n\n    /**\n     * Finds Geofence based on id provided\n     * @param id \n     * @returns \n     */\n    async findById(id: number): Promise {\n        return this.repository.createQueryBuilder('t')\n        .leftJoinAndMapOne('t.customer',CustomerEntity,'customer','t.customer_id = customer.id')\n        .leftJoinAndMapOne('t.layer',LayerEntity,'layer','t.g_layer_id  = layer.id')\n        .leftJoinAndMapOne('t.landmark',LandmarkEntity,'landmark','t.g_landmark_id  = landmark.id')\n        .leftJoinAndMapMany('t.notifications',GeofenceNotificationEntity,'n','t.id  = n.geofence_id')\n        .leftJoinAndMapOne('n.notification', NotificationEntity,'notification','n.notification_id  = notification.id')\n        .leftJoinAndMapMany('t.vehicles',GeofenceAssetEntity,'a','t.id  = a.geofence_id')\n        .leftJoinAndMapOne('a.asset', AssetEntity,'asset','a.asset_id  = asset.id')\n        .where('t.id = :id', {id})\n        .getOne();\n        return this.repository.findOne({ id: id, status: StatusEnum.ACTIVE });\n    }\n\n    /**\n     * Finds all the geofence entries in database\n     * @returns \n     */\n    async findAll(): Promise> {\n        return this.repository.createQueryBuilder('t')\n        .leftJoinAndMapOne('t.customer',CustomerEntity,'customer','t.customer_id = customer.id')\n        .leftJoinAndMapOne('t.layer',LayerEntity,'layer','t.g_layer_id  = layer.id')\n        .leftJoinAndMapOne('t.landmark',LandmarkEntity,'landmark','t.g_landmark_id  = landmark.id')\n        .leftJoinAndMapMany('t.notifications',GeofenceNotificationEntity,'n','t.id  = n.geofence_id')\n        .leftJoinAndMapOne('n.notification', NotificationEntity,'notification','n.notification_id  = notification.id')\n        .leftJoinAndMapMany('t.vehicles',GeofenceAssetEntity,'a','t.id  = a.geofence_id')\n        .leftJoinAndMapOne('a.asset', AssetEntity,'asset','a.asset_id  = asset.id')\n        .where('t.status = :status', {status: StatusEnum.ACTIVE})\n        .getMany();\n    }\n\n    /**\n     * Remove Geofence based on id provided\n     * @param id \n     * @returns \n     */\n    async remove(id: number): Promise {\n        console.log('id: ', id);\n        await this.repository.createQueryBuilder('t').update(GeofenceEntity).set({status: StatusEnum.DELETED})\n        .where(\"id = :id\", {id}).execute();\n        return this.findById(id);\n    }\n\n    /**\n     * Updates Geofence entry based on id\n     * @param id \n     * @param data \n     * @returns \n     */\n    async update(id: number, data: GeofenceDto): Promise {\n        data = _.omit(data, ['id']);\n        data.vehicles.forEach(o => {\n            o = Object.assign(o, {assetId: o.id})\n            _.omit(o, ['id']);\n        });\n        data.notifications.forEach(o => {\n            o = Object.assign(o, {notificationId: o.id})\n            _.omit(o, ['id']);\n        });\n        let layer = await this.findById(id);\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `Notification id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        const notification = await this.repository.save(layer);\n        return notification;\n    }\n\n    /**\n     * @ignore\n     * @param state \n     * @returns \n     */\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GroupController.html":{"url":"controllers/GroupController.html","title":"controller - GroupController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GroupController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Handles api request related to group\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: GroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Create Group'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The group has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:40\n                \n            \n\n\n            \n                \n                    Create a group\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            GroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Find all group'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:53\n                \n            \n\n\n            \n                \n                    Find all the group\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Find group by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:67\n                \n            \n\n\n            \n                \n                    Find a group by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find group list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:109\n                \n            \n\n\n            \n                \n                    Find group list by pagination\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Delete group by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:97\n                \n            \n\n\n            \n                \n                    Delete a group based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: GroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@HttpCode(HttpStatus.CREATED)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Updated group'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The group has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:83\n                \n            \n\n\n            \n                \n                    Update a group with new data based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            GroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { TransformInterceptor } from \"../../../interceptors/transform.interceptor\";\nimport { GroupDto } from \"../dto/group.dto\";\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\nimport { GroupService } from \"../service/group.service\";\n\n\n/**\n * Handles api request related to group\n */\n@Controller({\n    version: ['1'],\n    path: 'groups'\n})\n@ApiTags('groups')\n\n\nexport class GroupController {\n    private readonly logger = new Logger(GroupController.name);\n    /**\n     * Constructor for group controller\n     * @param groupService \n     */\n    constructor(private groupService: GroupService) { }\n\n    /**\n     * Create a group\n     * @param data \n     * @returns \n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @UseInterceptors(new TransformInterceptor(GroupDto))\n    @ApiOperation({ summary: 'Create Group' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The group has been successfully created.'})\n    public async create(@Body() data: GroupDto): Promise {\n        return this.groupService.create(data);\n    }\n\n    /**\n     * Find all the group\n     * @returns \n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(new TransformInterceptor(GroupDto))\n    @ApiOperation({ summary: 'Find all group' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.groupService.findAll();\n    }\n\n    /**\n     * Find a group by id \n     * @param id \n     * @returns \n     */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(new TransformInterceptor(GroupDto))\n    @ApiOperation({ summary: 'Find group by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOne(@Param('id') id) {\n        return this.groupService.findById(id);\n    }\n\n    /**\n     * Update a group with new data based on id \n     * @param id \n     * @param data \n     * @returns \n     */\n    @Put(':id')\n    @HttpCode(HttpStatus.CREATED)\n    @UseInterceptors(new TransformInterceptor(GroupDto))\n    @ApiOperation({ summary: 'Updated group' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The group has been successfully updated.'})\n    public async update(@Param('id') id: number, @Body() data: GroupDto) {\n        return this.groupService.update(id, data);\n    }\n\n    /**\n     * Delete a group based on id\n     * @param id \n     * @returns \n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(new TransformInterceptor(GroupDto))\n    @ApiOperation({ summary: 'Delete group by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.groupService.remove(id);\n    }\n\n    /**\n     * Find group list by pagination \n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find group list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.groupService.paginate(state);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/GroupEntity.html":{"url":"entities/GroupEntity.html","title":"entity - GroupEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  GroupEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/group.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is group entity\nContains all group fields. Creates new group\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/group.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Column, Entity } from 'typeorm';\nimport { ExtendEntity } from './extend.entity';\n\n\n/**\n * This is group entity\n * Contains all group fields. Creates new group  \n */\n\n@Entity({name: \"all_groups\"})\nexport class GroupEntity extends ExtendEntity {\n    @Column({length: 100, nullable: false})\n    name?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GroupService.html":{"url":"injectables/GroupService.html","title":"injectable - GroupService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GroupService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/group.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This class contains methods for GroupService API\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for group service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: GroupDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:33\n                \n            \n\n\n            \n                \n                    Creates new Group in database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            GroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:49\n                \n            \n\n\n            \n                \n                    Finds all the Group\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        With all the entries in database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:42\n                \n            \n\n\n            \n                \n                    Finds a GroupService based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:57\n                \n            \n\n\n            \n                \n                    Remove a GroupService based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: GroupDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:69\n                \n            \n\n\n            \n                \n                    Updates new entries based on id and new data provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            GroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GroupService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\nimport { Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { GroupDto } from \"../dto/group.dto\";\nimport { GroupEntity } from \"../entity/group.entity\";\nimport * as _ from \"lodash\";\n\n\n/**\n * This class contains methods for GroupService API\n */\n@Injectable()\nexport class GroupService {\n    private readonly logger = new Logger(GroupService.name);\n    /**\n     * Constructor for group service \n     * @param repository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(GroupEntity) private repository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n\n         /**\n          * Creates new Group in database\n          * @param data \n          * @returns \n          */\n    async create(data: GroupDto): Promise {\n        return this.repository.save(data);\n    }\n\n    /**\n     * Finds a GroupService based on id \n     * @param id \n     * @returns \n     */\n    async findById(id: number): Promise {\n        return this.repository.findOne({ id });\n    }\n    /**\n     * Finds all the Group\n     * @returns With all the entries in database\n     */\n    async findAll(): Promise> {\n        return this.repository.find();\n    }\n    /**\n     * Remove a GroupService based on id provided\n     * @param id \n     * @returns \n     */\n    async remove(id: number): Promise {\n        const layer = await this.findById(id);\n        layer.status = StatusEnum.DELETED;\n        return this.repository.save(layer);\n    }\n\n    /**\n     * Updates new entries based on id and new data provided \n     * @param id \n     * @param data \n     * @returns \n     */\n    async update(id: number, data: GroupDto): Promise {\n        data = _.omit(data, ['id']);\n        let layer = await this.findById(id);\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `Group id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        return this.repository.save(layer);\n    }\n\n    /**\n     * @ignore\n     * @param state \n     * @returns \n     */\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HttpConfigModule.html":{"url":"modules/HttpConfigModule.html","title":"module - HttpConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    HttpConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HttpConfigModule\n\n\n\ncluster_HttpConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nHttpConfigService \n\nHttpConfigService \n\n\n\nHttpConfigModule\n\nHttpConfigModule\n\nConfigService  -->\n\nHttpConfigModule->ConfigService \n\n\n\nHttpConfigService  -->\n\nHttpConfigModule->HttpConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/config/http/config.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                        \n                            HttpConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport * as Joi from '@hapi/joi';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport configuration from './configuration';\nimport { HttpConfigService } from './configuration.service';\n\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            load: [configuration],\n            validationSchema: Joi.object({\n                HTTP_TIMEOUT: Joi.number().default(5000),\n                HTTP_MAX_REDIRECTS: Joi.number().default(5),\n            })\n        })\n    ],\n    providers: [ConfigService, HttpConfigService],\n    exports: [ConfigService, HttpConfigService]\n})\n\n/**\n * Contains http timeout and maxredirects\n */\nexport class HttpConfigModule {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LandmarkController.html":{"url":"controllers/LandmarkController.html","title":"controller - LandmarkController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LandmarkController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                handles request related to landmarks\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: LandmarkCreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create Landmark'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The landmark has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:42\n                \n            \n\n\n            \n                \n                    handles landmark creation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            LandmarkCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Fin all landmark'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:54\n                \n            \n\n\n            \n                \n                    Find all the landmark\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find landmark by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:67\n                \n            \n\n\n            \n                \n                    Find a landmark by id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find landmark list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:108\n                \n            \n\n\n            \n                \n                    Find landmark list by pagination\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete landmark by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:96\n                \n            \n\n\n            \n                \n                    Delete a landmark\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: LandmarkCreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Updated Landmark'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The landmark has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:83\n                \n            \n\n\n            \n                \n                    Updates a landmark with new data based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            LandmarkCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { TransformInterceptor } from \"../../../interceptors/transform.interceptor\";\nimport { LandmarkCreateDto } from \"../dto/landmark.create.dto\";\nimport { LandmarkService } from \"../service/landmark.service\";\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\n\n\n/**\n * handles request related to landmarks\n */\n@Controller({\n    version: ['1'],\n    path: 'landmarks'\n})\n@ApiTags('landmarks')\n@UseInterceptors(ResTransformInterceptor)\n\n\nexport class LandmarkController {\n    private readonly logger = new Logger(LandmarkController.name);\n    /**\n     * Constructor for landmark controller \n     * @param landmarkService \n     */\n    constructor(private landmarkService: LandmarkService) { }\n\n    /**\n     * handles landmark creation\n     * @param data \n     * @returns \n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Create Landmark' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The landmark has been successfully created.'})\n    public async create(@Body() data: LandmarkCreateDto): Promise {\n        return this.landmarkService.create(data);\n    }\n\n    /**\n     * Find all the landmark \n     * @returns \n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Fin all landmark' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.landmarkService.findAll();\n    }\n\n    /**\n     * Find a landmark by id provided\n     * @param id \n     * @returns \n     */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find landmark by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOne(@Param('id') id) {\n        return this.landmarkService.findById(id);\n    }\n\n    /**\n     * Updates a landmark with new data based on id\n     * @param id \n     * @param data \n     * @returns \n     */\n\n    @Put(':id')\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Updated Landmark' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The landmark has been successfully updated.'})\n    public async update(@Param('id') id: number, @Body() data: LandmarkCreateDto) {\n        return this.landmarkService.update(id, data);\n    }\n\n    /**\n     * Delete a landmark\n     * @param id \n     * @returns \n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Delete landmark by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.landmarkService.remove(id);\n    }\n\n    /**\n     * Find landmark list by pagination\n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find landmark list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.landmarkService.paginate(state);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/LandmarkEntity.html":{"url":"entities/LandmarkEntity.html","title":"entity - LandmarkEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  LandmarkEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is landmark entity\nContains Landmark fields  creates landmark in database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                geojsonobject\n                            \n                            \n                                    Optional\n                                geoObject\n                            \n                            \n                                    Optional\n                                layer\n                            \n                            \n                                    Optional\n                                locationType\n                            \n                            \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        geojsonobject\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'simple-json', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        geoObject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GeoObjectEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne('GeoObjectEntity', 'geoobject', {onDelete: 'CASCADE', cascade: true})@JoinColumn({name: 'geo_object_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LayerEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {eager: true})@JoinColumn({name: 'landmark_layer_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        locationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 16})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne, OneToOne } from 'typeorm';\nimport { ExtendEntity } from './extend.entity';\nimport { GeoObjectEntity } from './geo.object.entity';\nimport { LayerEntity } from './layer.entity';\n\n\n/**\n * This is landmark entity\n * Contains Landmark fields  creates landmark in database\n */\n\n@Entity({name: \"landmark\"})\nexport class LandmarkEntity extends ExtendEntity {\n    @Column({length: 64})\n    name?: string;\n    @Column({type: \"simple-json\", nullable: true})\n    geojsonobject?: unknown;\n    @Column({length: 16})\n    locationType?: string;\n\n    @OneToOne(() => LayerEntity, { eager: true })\n    @JoinColumn({ name: \"landmark_layer_id\"})\n    layer?: LayerEntity;\n\n    @OneToOne('GeoObjectEntity', 'geoobject', { onDelete: 'CASCADE', cascade: true })\n    @JoinColumn({name: \"geo_object_id\", referencedColumnName: 'id'})\n\tgeoObject?: GeoObjectEntity;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LandmarkService.html":{"url":"injectables/LandmarkService.html","title":"injectable - LandmarkService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LandmarkService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts\n        \n\n\n            \n                Description\n            \n            \n                LandmarkService consist of methods for Landmark API\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:18\n                            \n                        \n\n                \n                    \n                            This is constructor for Landmark Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: LandmarkCreateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:33\n                \n            \n\n\n            \n                \n                    Create new Landmark in database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            LandmarkCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Takes this and save it into database (new entry)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Saves this data into database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:48\n                \n            \n\n\n            \n                \n                    Find all the landmarks into database\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        All the landmarks saved in database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:41\n                \n            \n\n\n            \n                \n                    Find Landmark based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Checks for the id of landmark into database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        with the data related to the id\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:57\n                \n            \n\n\n            \n                \n                    Removes the landmark based on id provided.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Checks for the id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: LandmarkCreateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:69\n                \n            \n\n\n            \n                \n                    Updates landmark based on id  provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Updates Landmark based on id provided\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                            LandmarkCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(LandmarkService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\nimport { LandmarkCreateDto } from \"../dto/landmark.create.dto\";\nimport * as _ from \"lodash\";\n\n/**\n * LandmarkService consist of methods for Landmark API\n */\n\n@Injectable()\nexport class LandmarkService {\n    private readonly logger = new Logger(LandmarkService.name);\n    /**\n     * This is constructor for Landmark Service \n     * @param repository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(LandmarkEntity) private repository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n     \n    /**\n     * Create new Landmark in database \n     * @param {object}data Takes this and save it into database (new entry)\n     * @returns Saves this data into database\n     */\n    async create(data: LandmarkCreateDto): Promise {\n        return this.repository.save(data);\n    }\n    /**\n     * Find Landmark based on id provided \n     * @param {number}id Checks for the id of landmark into database \n     * @returns with the data related to the id \n     */\n    async findById(id: number): Promise {\n        return this.repository.findOne({ id });\n    }\n    /**\n     * Find all the landmarks into database\n     * @returns All the landmarks saved in database\n     */\n    async findAll(): Promise> {\n        return this.repository.find({status: StatusEnum.ACTIVE});\n    }\n\n    /**\n     * Removes the landmark based on id provided.\n     * @param {number}id  Checks for the id  \n     * @returns \n     */\n    async remove(id: number): Promise {\n        const layer = await this.findById(id);\n        layer.status = StatusEnum.DELETED;\n        return this.repository.save(layer);\n    }\n\n    /**\n     * Updates landmark based on id  provided \n     * @param id Updates Landmark based on id provided\n     * @param data \n     * @returns \n     */\n    async update(id: number, data: LandmarkCreateDto): Promise {\n        data = _.omit(data, ['id']);\n        let layer = await this.findById(id);\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `Layer id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        return this.repository.save(layer);\n    }\n\n    /**\n     * @ignore\n     * @param state \n     * @returns \n     */\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LayerController.html":{"url":"controllers/LayerController.html","title":"controller - LayerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LayerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This is LayerController class. handles API request related to Layer\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: LayerCreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create Layer'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The layer has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:40\n                \n            \n\n\n            \n                \n                    This handles layer creation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            LayerCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Fin all layers'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:52\n                \n            \n\n\n            \n                \n                    Handles find all the layer rquest\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find layer by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:66\n                \n            \n\n\n            \n                \n                    Find layer by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find layer list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:106\n                \n            \n\n\n            \n                \n                    Find layer list  by pagination\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete layer by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:94\n                \n            \n\n\n            \n                \n                    Handles layer deletion\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: LayerCreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Updated Layer'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The layer has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:81\n                \n            \n\n\n            \n                \n                    Update a layer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            LayerCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\nimport { LayerCreateDto } from \"../dto/layer.create.dto\";\nimport { LayerEntity } from \"../entity/layer.entity\";\nimport { LayerService } from \"../service/layer.service\";\n\n\n/**\n * This is LayerController class. handles API request related to Layer\n */\n@Controller({\n    version: ['1'],\n    path: 'layers'\n})\n@ApiTags('layers')\n@UseInterceptors(ResTransformInterceptor)\nexport class LayerController {\n    private readonly logger = new Logger(LayerController.name);\n    /**\n     * Constructor for layer services \n     * @param layerService \n     * \n     */\n    constructor(private layerService: LayerService) { }\n\n    /**\n     * This handles layer creation\n     * @param data \n     * @returns \n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Create Layer' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The layer has been successfully created.'})\n    public async create(@Body() data: LayerCreateDto): Promise {\n        return this.layerService.create(data);\n    }\n\n    /**\n     * Handles find all the layer rquest\n     * @returns \n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Fin all layers' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.layerService.findAll();\n    }\n\n    /**\n     * Find layer by id \n     * @param id \n     * @returns \n     */\n\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find layer by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOne(@Param('id') id) {\n        return this.layerService.findById(id);\n    }\n\n    /**\n     * Update a layer\n     * @param id \n     * @param data \n     * @returns \n     */\n    @Put(':id')\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Updated Layer' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The layer has been successfully updated.'})\n    public async update(@Param('id') id: number, @Body() data: LayerCreateDto) {\n        return this.layerService.update(id, data);\n    }\n\n    /**\n     * Handles layer deletion \n     * @param id \n     * @returns \n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Delete layer by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.layerService.remove(id);\n    }\n\n    /**\n     * Find layer list  by pagination \n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find layer list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.layerService.paginate(state);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/LayerEntity.html":{"url":"entities/LayerEntity.html","title":"entity - LayerEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  LayerEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is Layer entity\nContains layer fields creates layer in database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                    Optional\n                                city\n                            \n                            \n                                    Optional\n                                country\n                            \n                            \n                                    Optional\n                                customerId\n                            \n                            \n                                geofence\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                state\n                            \n                            \n                                    Optional\n                                zip\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 512})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        geofence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GeofenceEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany('GeofenceEntity', 'geofence', {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        zip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { ExtendEntity } from './extend.entity';\nimport { GeofenceEntity } from './geofence.entity';\n\n\n/**\n * This is Layer entity\n * Contains layer fields creates layer in database \n */\n\n@Entity({name: \"layers\"})\nexport class LayerEntity extends ExtendEntity {\n    @Column({length: 64})\n    name?: string;\n    @Column({length: 512})\n    address?: string;\n    @Column({length: 64})\n    city?: string;\n    @Column({length: 64})\n    country?: string;\n    @Column()\n    zip?: number;\n    @Column({length: 64})\n    state?: string;\n    @Column({nullable: true})\n    customerId?: number;\n    @OneToMany('GeofenceEntity', 'geofence', { onDelete: 'CASCADE' })\n    geofence: GeofenceEntity[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LayerService.html":{"url":"injectables/LayerService.html","title":"injectable - LayerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LayerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts\n        \n\n\n            \n                Description\n            \n            \n                LayerService consist of methods for Layer API\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:19\n                            \n                        \n\n                \n                    \n                            THis is LayerService Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: LayerCreateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:33\n                \n            \n\n\n            \n                \n                    This creates a new Layer in database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            LayerCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Takes data from GUI\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Updates the database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:49\n                \n            \n\n\n            \n                \n                    All the data related to layer\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        All the data related to layer\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:42\n                \n            \n\n\n            \n                \n                    Finds the layer based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Finds the layer based on id provided\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        With the data matched with id\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:58\n                \n            \n\n\n            \n                \n                    Checks for id in database and delete that layer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Checks for id in database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Delete the respective id if found in database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: LayerCreateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:70\n                \n            \n\n\n            \n                \n                    Updates a layer with new entries\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Checks for the id\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                            LayerCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Update the Layer data based on id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Update the database\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(LayerService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { LayerCreateDto } from \"../dto/layer.create.dto\";\nimport { LayerEntity } from \"../entity/layer.entity\";\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\nimport * as _ from \"lodash\";\n\n/**\n * LayerService consist of methods for Layer API\n * @property create new Layer \n */\n\n@Injectable()\nexport class LayerService {\n    private readonly logger = new Logger(LayerService.name);\n    /**\n     * THis is LayerService Constructor \n     * @param repository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(LayerEntity) private repository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n     /**\n      * This creates a new Layer in database\n      * @param {object}data Takes data from GUI \n      * @returns Updates the database\n      */\n    async create(data: LayerCreateDto): Promise {\n        return this.repository.save(data);\n    }\n\n    /**\n     * Finds the layer based on id provided \n     * @param {number}id Finds the layer based on id provided \n     * @returns With the data matched with id \n     */\n    async findById(id: number): Promise {\n        return this.repository.findOne({ id });\n    }\n    /**\n     * All the data related to layer \n     * @returns All the data related to layer \n     */\n    async findAll(): Promise> {\n        return this.repository.find({status: StatusEnum.ACTIVE});\n    }\n\n    /**\n     * Checks for id in database and delete that layer \n     * @param {number}id Checks for id in database \n     * @returns Delete the respective id if found in database\n     */\n    async remove(id: number): Promise {\n        const layer = await this.findById(id);\n        layer.status = StatusEnum.DELETED;\n        return this.repository.save(layer);\n    }\n\n    /**\n     * Updates a layer with new entries\n     * @param {number}id Checks for the id  \n     * @param {object}data Update the Layer data based on id \n     * @returns Update the database\n     */\n    async update(id: number, data: LayerCreateDto): Promise {\n        data = _.omit(data, ['id']);\n        let layer = await this.findById(id);\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `Layer id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        return this.repository.save(layer);\n    }\n\n    /**\n     * @ignore\n     * @param state \n     * @returns \n     */\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MySqlConfigModule.html":{"url":"modules/MySqlConfigModule.html","title":"module - MySqlConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    MySqlConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MySqlConfigModule\n\n\n\ncluster_MySqlConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nMySqlConfigService \n\nMySqlConfigService \n\n\n\nMySqlConfigModule\n\nMySqlConfigModule\n\nConfigService  -->\n\nMySqlConfigModule->ConfigService \n\n\n\nMySqlConfigService  -->\n\nMySqlConfigModule->MySqlConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/config/database/mysql/config.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                        \n                            MySqlConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport * as Joi from '@hapi/joi';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport configuration from './configuration';\nimport { MySqlConfigService } from './configuration.service';\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            load: [configuration],\n            validationSchema: Joi.object({\n                MYSQL_HOST: Joi.string().default('localhost'),\n                MYSQL_PORT: Joi.number().default('3306'),\n                MYSQL_USERNAME: Joi.string().default('root'),\n                MYSQL_PASSWORD: Joi.string().default(''),\n                MYSQL_DBNAME: Joi.string().default('star_s'),\n                DB_SYNCHRONIZE: Joi.boolean().default(true),\n                DB_LOGGING: Joi.boolean().default(true),\n            })\n        })\n    ],\n    providers: [ConfigService, MySqlConfigService],\n    exports: [ConfigService, MySqlConfigService]\n})\n\n/**\n * This class is for mysql database connectivity \n */\nexport class MySqlConfigModule {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MysqlDatabaseProviderModule.html":{"url":"modules/MysqlDatabaseProviderModule.html","title":"module - MysqlDatabaseProviderModule","body":"\n                   \n\n\n\n\n    Modules\n    MysqlDatabaseProviderModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/providers/database/mysql/provider.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule, TypeOrmModuleAsyncOptions } from '@nestjs/typeorm';\nimport { DatabaseType, getMetadataArgsStorage } from 'typeorm';\nimport { MySqlConfigModule } from '../../../config/database/mysql/config.module';\nimport { MySqlConfigService } from '../../../config/database/mysql/configuration.service';\n\n\n/**\n * @module This is TypeOrm module for database connectivity\n * @class This class is exported as MysqlDatabaseProviderModule\n */\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            imports: [MySqlConfigModule],\n            useFactory: async (mysqlConfigService: MySqlConfigService) => ({\n                type: 'mysql' as DatabaseType,\n                host: mysqlConfigService.host,\n                port: mysqlConfigService.port,\n                username: mysqlConfigService.username,\n                password: mysqlConfigService.password,\n                database: mysqlConfigService.dbname,\n                logging: mysqlConfigService.logging,\n                synchronize: mysqlConfigService.synchronize,\n                entities: getMetadataArgsStorage().tables.map(tbl => tbl.target)\n            }),\n            inject: [MySqlConfigService],\n            } as TypeOrmModuleAsyncOptions)\n    ]\n})\nexport class MysqlDatabaseProviderModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NewLayerController.html":{"url":"controllers/NewLayerController.html","title":"controller - NewLayerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NewLayerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/newlayer.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                handles request related to NewLayers\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: NewLayerCreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create new layer '})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'This layer  has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/newlayer.controller.ts:42\n                \n            \n\n\n            \n                \n                    handles NewLayer creation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                NewLayerCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Fin all NewLayer'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/newlayer.controller.ts:54\n                \n            \n\n\n            \n                \n                    Find all the NewLayer\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find NewLayer by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/newlayer.controller.ts:67\n                \n            \n\n\n            \n                \n                    Find a NewLayer by id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find NewLayer list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/newlayer.controller.ts:108\n                \n            \n\n\n            \n                \n                    Find NewLayer list by pagination\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete NewLayer by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/newlayer.controller.ts:96\n                \n            \n\n\n            \n                \n                    Delete a NewLayer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: NewLayerCreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Updated NewLayer'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The NewLayer has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/newlayer.controller.ts:83\n                \n            \n\n\n            \n                \n                    Updates a NewLayer with new data based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                NewLayerCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { TransformInterceptor } from \"../../../interceptors/transform.interceptor\";\nimport { NewLayerEntity } from \"../entity/newlayer.entity\";\nimport { NewLayerCreateDto } from \"../dto/newlayer.dto\";\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\nimport { NewLayerService } from \"../service/newlayer.service\";\n\n\n/**\n * handles request related to NewLayers\n */\n@Controller({\n    version: ['1'],\n    path: 'newlayer'\n})\n@ApiTags('newlayer')\n@UseInterceptors(ResTransformInterceptor)\n\n\nexport class NewLayerController {\n    private readonly logger = new Logger(NewLayerController.name);\n    /**\n     * Constructor for NewLayer controller \n     * @param newlayer \n     */\n    constructor(private newlayer: NewLayerService) { }\n\n    /**\n     * handles NewLayer creation\n     * @param data \n     * @returns \n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Create new layer ' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'This layer  has been successfully created.'})\n    public async create(@Body() data: NewLayerCreateDto): Promise {\n        return this.newlayer.create(data);\n    }\n\n    /**\n     * Find all the NewLayer \n     * @returns \n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Fin all NewLayer' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.newlayer.findAll();\n    }\n\n    /**\n     * Find a NewLayer by id provided\n     * @param id \n     * @returns \n     */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find NewLayer by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOne(@Param('id') id) {\n        return this.newlayer.findById(id);\n    }\n\n    /**\n     * Updates a NewLayer with new data based on id\n     * @param id \n     * @param data \n     * @returns \n     */\n\n    @Put(':id')\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Updated NewLayer' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The NewLayer has been successfully updated.'})\n    public async update(@Param('id') id: number, @Body() data: NewLayerCreateDto) {\n        return this.newlayer.update(id, data);\n    }\n\n    /**\n     * Delete a NewLayer\n     * @param id \n     * @returns \n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Delete NewLayer by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.newlayer.remove(id);\n    }\n\n    /**\n     * Find NewLayer list by pagination\n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find NewLayer list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.newlayer.paginate(state);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NewLayerCreateDto.html":{"url":"classes/NewLayerCreateDto.html","title":"class - NewLayerCreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NewLayerCreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/dto/newlayer.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                category\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                data\n                            \n                            \n                                    Optional\n                                has_subcategory\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Expose()@ApiProperty({description: 'new layer api '})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/dto/newlayer.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/dto/newlayer.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()@ApiProperty({type: () => NewLayerDataDto, isArray: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/dto/newlayer.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        has_subcategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Expose()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/dto/newlayer.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/dto/newlayer.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/dto/newlayer.dto.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Expose } from 'class-transformer';\nimport { IsString } from 'class-validator';\nimport { array } from 'joi';\n\n\n/**\n * This is NewLayerCreate class\n * \n * Describes all the fields of new layer for API \n * \n * @ignore\n */\nexport class NewLayerDataDto {\n    @ApiProperty({})\n    @Expose()\n    id?: number;\n    @ApiProperty({})\n    @Expose()\n    value?:string\n}\n\nexport class NewLayerCreateDto {\n    @Expose()\n    id?: number;\n    @IsString()\n    @Expose()\n    @ApiProperty({\n        description: 'new layer api '\n    })\n    category?: string;\n    @IsString()\n    @Expose()\n    @ApiProperty()\n    has_subcategory?: boolean;\n    @Expose()\n    createdAt?: Date;\n    @Expose()\n    updatedAt?: Date;\n    \n    @Expose()\n    @ApiProperty({ type: () => NewLayerDataDto, isArray: true })\n    data?:Array\n\n   \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/NewLayerDataEntity.html":{"url":"entities/NewLayerDataEntity.html","title":"entity - NewLayerDataEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  NewLayerDataEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/newlayerdata.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                            \n                                    Optional\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/newlayerdata.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/newlayerdata.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/newlayerdata.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NewLayerEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, map => map.data)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/newlayerdata.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        \n\nimport { Column, CreateDateColumn, Entity, JoinColumn, ManyToOne, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\nimport { AssetEntity } from './asset.entity';\nimport { NewLayerEntity } from './newlayer.entity';\n\n\n\n@Entity({ name: \"newlayer_data\" })\nexport class NewLayerDataEntity {\n    @PrimaryGeneratedColumn()\n    id?: number;\n    @CreateDateColumn({name: \"created_at\"})\n    createdAt?: Date;\n    @UpdateDateColumn({name: \"updated_at\"})\n    updatedAt?: Date;\n   \n    @ManyToOne(() => NewLayerEntity, map => map.data)\n    value?: NewLayerEntity;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/NewLayerEntity.html":{"url":"entities/NewLayerEntity.html","title":"entity - NewLayerEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  NewLayerEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/newlayer.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is new layer entity\nContains Landmark fields  creates landmark in database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                category\n                            \n                            \n                                    Optional\n                                data\n                            \n                            \n                                    Optional\n                                has_subcategory\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/newlayer.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NewLayerDataEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany('NewLayerDataEntity', 'value', {eager: true, cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/newlayer.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        has_subcategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/newlayer.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { ExtendEntity } from './extend.entity';\nimport { NewLayerDataEntity } from './newlayerdata.entity';\n\n\n/**\n * This is new layer entity\n * Contains Landmark fields  creates landmark in database\n */\n\n@Entity({name: \"newlayer\"})\nexport class NewLayerEntity extends ExtendEntity {\n    @Column({length: 64})\n    category?: string;\n    @Column()\n    has_subcategory?: boolean;\n    \n    @OneToMany('NewLayerDataEntity','value',{ eager: true, cascade: true })\n    data?: NewLayerDataEntity[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NewLayerService.html":{"url":"injectables/NewLayerService.html","title":"injectable - NewLayerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NewLayerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/newlayer.service.ts\n        \n\n\n            \n                Description\n            \n            \n                NewLayerService consist of methods for NewLayer API\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/newlayer.service.ts:18\n                            \n                        \n\n                \n                    \n                            This is constructor for NewLayer Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: NewLayerCreateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/newlayer.service.ts:33\n                \n            \n\n\n            \n                \n                    Create new NewLayer in database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                NewLayerCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Takes this and save it into database (new entry)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Saves this data into database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/newlayer.service.ts:48\n                \n            \n\n\n            \n                \n                    Find all the NewLayers into database\n\n\n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        All the NewLayers saved in database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/newlayer.service.ts:41\n                \n            \n\n\n            \n                \n                    Find NewLayer based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Checks for the id of NewLayer into database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        with the data related to the id\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/newlayer.service.ts:57\n                \n            \n\n\n            \n                \n                    Removes the NewLayer based on id provided.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Checks for the id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: NewLayerCreateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/newlayer.service.ts:69\n                \n            \n\n\n            \n                \n                    Updates NewLayer based on id  provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Updates NewLayer based on id provided\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                                NewLayerCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(NewLayerService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/newlayer.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\nimport { NewLayerCreateDto } from \"../dto/newlayer.dto\";\nimport { NewLayerEntity } from \"../entity/newlayer.entity\";\nimport * as _ from \"lodash\";\n\n/**\n * NewLayerService consist of methods for NewLayer API\n */\n\n@Injectable()\nexport class NewLayerService {\n    private readonly logger = new Logger(NewLayerService.name);\n    /**\n     * This is constructor for NewLayer Service \n     * @param repository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(NewLayerEntity) private repository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n     \n    /**\n     * Create new NewLayer in database \n     * @param {object}data Takes this and save it into database (new entry)\n     * @returns Saves this data into database\n     */\n    async create(data: NewLayerCreateDto): Promise {\n        return this.repository.save(data);\n    }\n    /**\n     * Find NewLayer based on id provided \n     * @param {number}id Checks for the id of NewLayer into database \n     * @returns with the data related to the id \n     */\n    async findById(id: number): Promise {\n        return this.repository.findOne({ id });\n    }\n    /**\n     * Find all the NewLayers into database\n     * @returns All the NewLayers saved in database\n     */\n    async findAll(): Promise> {\n        return this.repository.find({status: StatusEnum.ACTIVE});\n    }\n\n    /**\n     * Removes the NewLayer based on id provided.\n     * @param {number}id  Checks for the id  \n     * @returns \n     */\n    async remove(id: number): Promise {\n        const layer = await this.findById(id);\n        layer.status = StatusEnum.DELETED;\n        return this.repository.save(layer);\n    }\n\n    /**\n     * Updates NewLayer based on id  provided \n     * @param id Updates NewLayer based on id provided\n     * @param data \n     * @returns \n     */\n    async update(id: number, data: NewLayerCreateDto): Promise {\n        data = _.omit(data, ['id']);\n        let layer = await this.findById(id);\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `Layer id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        return this.repository.save(layer);\n    }\n\n    /**\n     * @ignore\n     * @param state \n     * @returns \n     */\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationController.html":{"url":"controllers/NotificationController.html","title":"controller - NotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This handles API request related to Notification\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: NotificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create notification'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The notification template has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:42\n                \n            \n\n\n            \n                \n                    Create new notification\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            NotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find all notification template'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:54\n                \n            \n\n\n            \n                \n                    Get all the notitifcation\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find notification template by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:67\n                \n            \n\n\n            \n                \n                    Find notification by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find notification template list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:107\n                \n            \n\n\n            \n                \n                    Find notification template list by pagination\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete layer by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:95\n                \n            \n\n\n            \n                \n                    Delete notification  by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: NotificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Updated notification template'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The notification template has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:82\n                \n            \n\n\n            \n                \n                    Updated notification template\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            NotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\nimport { NotificationDto } from \"../dto/notification.dto\";\nimport { NotificationEntity } from \"../entity/notification.entity\";\nimport { NotificationTemplateEntity } from \"../entity/notification.template.entity\";\nimport { NotificationService } from \"../service/notification.service\";\n\n\n/**\n * This handles API request related to Notification\n */\n@Controller({\n    version: ['1'],\n    path: 'notification'\n})\n@ApiTags('notification-controller')\n@UseInterceptors(ResTransformInterceptor)\n\n\nexport class NotificationController {\n    private readonly logger = new Logger(NotificationController.name);\n    /**\n     * Constructor Controller for notification\n     * @param layerService \n     */\n    constructor(private layerService: NotificationService) { }\n\n    /**\n     * Create new notification\n     * @param data \n     * @returns \n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Create notification' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The notification template has been successfully created.'})\n    public async create(@Body() data: NotificationDto): Promise {\n        return this.layerService.create(data);\n    }\n\n    /**\n     * Get all the notitifcation\n     * @returns \n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find all notification template' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.layerService.findAll();\n    }\n\n    /**\n     * Find notification by id \n     * @param id \n     * @returns \n     */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find notification template by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOne(@Param('id') id) {\n        return this.layerService.findById(id);\n    }\n\n    /**\n     * Updated notification template\n     * @param id \n     * @param data \n     * @returns \n     */\n    @Put(':id')\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Updated notification template' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The notification template has been successfully updated.'})\n    public async update(@Param('id') id: number, @Body() data: NotificationDto) {\n        return this.layerService.update(id, data);\n    }\n\n    /**\n     * Delete notification  by id \n     * @param id \n     * @returns \n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Delete layer by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.layerService.remove(id);\n    }\n\n    /**\n     * Find notification template list by pagination\n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find notification template list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.layerService.paginate(state);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/NotificationEmailEntity.html":{"url":"entities/NotificationEmailEntity.html","title":"entity - NotificationEmailEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  NotificationEmailEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is notification email  entity\nContains notification email fields\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                notification\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        notification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, map => map.emails, {onDelete: 'CASCADE'})@JoinColumn({name: 'notification_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, JoinColumn, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\nimport { NotificationEntity } from './notification.entity';\n\n\n/**\n * This is notification email  entity\n * Contains notification email fields \n */\n\n@Entity({name: \"notification_emails\"})\nexport class NotificationEmailEntity {\n    @PrimaryGeneratedColumn()\n    id?: number;\n    @CreateDateColumn({name: \"created_at\"})\n    createdAt?: Date;\n    @UpdateDateColumn({name: \"updated_at\"})\n    updatedAt?: Date;\n    @Column({length: 64})\n    email?: string;\n    @ManyToOne(() => NotificationEntity, map => map.emails, {onDelete: 'CASCADE'})\n    @JoinColumn({name: \"notification_id\"})\n    notification?: NotificationEntity;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/NotificationEntity.html":{"url":"entities/NotificationEntity.html","title":"entity - NotificationEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  NotificationEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is npotification  entity\nContains notification fields and creates notification in database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                customerId\n                            \n                            \n                                    Optional\n                                emails\n                            \n                            \n                                    Optional\n                                emailTemplate\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                smsTemplate\n                            \n                            \n                                    Optional\n                                timezone\n                            \n                            \n                                    Optional\n                                type\n                            \n                            \n                                    Optional\n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'customer_id', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        emails\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationEmailEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany('NotificationEmailEntity', 'notification', {onDelete: 'CASCADE', eager: true, cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        emailTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationTemplateEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(type => NotificationTemplateEntity, {eager: true})@JoinColumn({name: 'email_template_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        smsTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationTemplateEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(type => NotificationTemplateEntity, {eager: true})@JoinColumn({name: 'sms_template_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'timezone', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: NotificationTypeEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NotificationUserEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany('NotificationUserEntity', 'notification', {onDelete: 'CASCADE', eager: true, cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Column, Entity, JoinColumn, OneToMany, OneToOne } from 'typeorm';\nimport { NotificationTypeEnum } from '../../../enum/notification.type.enum';\nimport { ExtendEntity } from './extend.entity';\nimport { NotificationEmailEntity } from './notification.email.entity';\nimport { NotificationTemplateEntity } from './notification.template.entity';\nimport { NotificationUserEntity } from './notification.user.entity';\n\n\n/**\n * This is npotification  entity\n * Contains notification fields and creates notification in database\n */\n\n@Entity({ name: \"notification\" })\nexport class NotificationEntity extends ExtendEntity {\n    @Column({ length: 64, nullable: false })\n    name?: string;\n    @Column({ name: \"timezone\", nullable: false })\n    timezone?: string;\n    @Column({ type: \"enum\", enum: NotificationTypeEnum, default: NotificationTypeEnum.EMAIL })\n    type?: NotificationTypeEnum;\n    @Column({ name: \"customer_id\", nullable: false })\n    customerId?: number;\n    @OneToMany('NotificationEmailEntity', 'notification', { onDelete: 'CASCADE', eager: true, cascade: true })\n    emails?: NotificationEmailEntity[];\n    @OneToOne(type => NotificationTemplateEntity, { eager: true })\n    @JoinColumn({ name: \"email_template_id\" })\n    emailTemplate?: NotificationTemplateEntity;\n    @OneToOne(type => NotificationTemplateEntity, { eager: true })\n    @JoinColumn({ name: \"sms_template_id\" })\n    smsTemplate?: NotificationTemplateEntity;\n    \n    @OneToMany('NotificationUserEntity', 'notification', { onDelete: 'CASCADE', eager: true, cascade: true })\n    users?: NotificationUserEntity[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts\n        \n\n\n            \n                Description\n            \n            \n                NotificationService consist of methods for notification API\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, templateRepository: Repository, notiEmailRepository: Repository, userRepository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:20\n                            \n                        \n\n                \n                    \n                            This is constructor for notification services\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templateRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notiEmailRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: NotificationDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:41\n                \n            \n\n\n            \n                \n                    This creates new notification in database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            NotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Takes data as input from API\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        with a Nofitication based on data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:63\n                \n            \n\n\n            \n                \n                    Finds all the notification\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        All the notification found in database.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:55\n                \n            \n\n\n            \n                \n                    This method is used to find notification by provided id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Takes id as input from GUI\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        with the notification found based on id provided\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:73\n                \n            \n\n\n            \n                \n                    Delete a notification based on id\nThis deletes notification based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Checks for the id provided from GUI into database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Deletes the respective id found in database and update it\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: NotificationDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:85\n                \n            \n\n\n            \n                \n                    Updates notification based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Checks for the id\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                            NotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        New Data provided\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Updates the database\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(NotificationService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\nimport { IsNull, Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { NotificationDto } from \"../dto/notification.dto\";\nimport { NotificationEmailEntity } from \"../entity/notification.email.entity\";\nimport { NotificationEntity } from \"../entity/notification.entity\";\nimport { NotificationTemplateEntity } from \"../entity/notification.template.entity\";\nimport { UserEntity } from \"../entity/user.entity\";\nimport * as _ from \"lodash\";\n\n/**\n * NotificationService consist of methods for notification API\n */\n@Injectable()\nexport class NotificationService {\n    private readonly logger = new Logger(NotificationService.name);\n    /**\n     * This is constructor for notification services \n     * @param repository \n     * @param templateRepository \n     * @param notiEmailRepository \n     * @param userRepository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(NotificationEntity) private repository: Repository,\n        @InjectRepository(NotificationTemplateEntity) private templateRepository: Repository,\n        @InjectRepository(NotificationEmailEntity) private notiEmailRepository: Repository,\n        @InjectRepository(UserEntity) private userRepository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n\n        /**\n         * This creates new notification in database\n         * @param {object}data Takes data as input from API  \n         * @returns with a Nofitication based on data \n         */\n    async create(data: NotificationDto): Promise {\n        console.log('data: ', data);\n        const emailTemplate = await this.templateRepository.findOne({id: data.emailTemplateId});\n        const smsTemplate = await this.templateRepository.findOne({id: data.smsTemplateId});\n        data.emailTemplate = emailTemplate;\n        data.smsTemplate = smsTemplate;\n        const notification = await this.repository.save(data);\n        return notification;\n    }\n    /**\n     * This method is used to find notification by provided id\n     * @param {number}id Takes id as input from GUI \n     * @returns  with the notification found based on id provided \n     */\n    async findById(id: number): Promise {\n        return this.repository.findOne({ id: id, status: StatusEnum.ACTIVE });\n    }\n\n    /**\n     * Finds all the notification \n     * @returns All the notification found in database.\n     */\n    async findAll(): Promise> {\n        return this.repository.find({status: StatusEnum.ACTIVE});\n    }\n\n    /**\n     * Delete a notification based on id \n     * This deletes notification based on id provided\n     * @param {number}id Checks for the id provided from GUI into database\n     * @returns  Deletes the respective id found in database and update it \n     */\n    async remove(id: number): Promise {\n        const layer = await this.findById(id);\n        layer.status = StatusEnum.DELETED;\n        return this.repository.save(layer);\n    }\n/**\n * Updates notification based on id provided \n * @param {number}id Checks for the id  \n * @param {object}data New Data provided \n * @returns  Updates the database\n */\n\n    async update(id: number, data: NotificationDto): Promise {\n        \n        data = _.omit(data, ['id']);\n        let layer = await this.findById(id);\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `Notification id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        const notification = await this.repository.save(layer);\n        await this.notiEmailRepository.delete({notification: IsNull()});\n       \n        return notification;\n    }\n    /**\n     * For paginate\n     * @ignore\n     * @param state \n     * @returns \n     */\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationTemplateController.html":{"url":"controllers/NotificationTemplateController.html","title":"controller - NotificationTemplateController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationTemplateController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This handles API requests related to NotificationTemplateController.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: NotificationTemplateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create notification template'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The notification template has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:39\n                \n            \n\n\n            \n                \n                    Create notification template\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            NotificationTemplateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Fin all notification template'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:51\n                \n            \n\n\n            \n                \n                    Find all the notification template\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find notification template by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:64\n                \n            \n\n\n            \n                \n                    Find notification based on template id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find notification template list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:104\n                \n            \n\n\n            \n                \n                    Find notification template list by pagination\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete notification by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:92\n                \n            \n\n\n            \n                \n                    Delete Notification by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: NotificationTemplateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Updated notification template'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The notification template has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:79\n                \n            \n\n\n            \n                \n                    Updated notification template\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            NotificationTemplateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\nimport { TransformInterceptor } from \"../../../interceptors/transform.interceptor\";\nimport { NotificationTemplateDto } from \"../dto/notification.template.dto\";\nimport { NotificationTemplateEntity } from \"../entity/notification.template.entity\";\nimport { NotificationTemplateService } from \"../service/notification.template.service\";\n/**\n * This handles API requests related to NotificationTemplateController.\n */\n@Controller({\n    version: ['1'],\n    path: 'notification-template'\n})\n@ApiTags('notification-template-controller')\n@UseInterceptors(ResTransformInterceptor)\n\nexport class NotificationTemplateController {\n    private readonly logger = new Logger(NotificationTemplateController.name);\n    /**\n     * Constructor for notification template controller \n     * @param layerService \n     */\n    constructor(private layerService: NotificationTemplateService) { }\n\n    /**\n     * Create notification template\n     * @param data \n     * @returns \n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Create notification template' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The notification template has been successfully created.'})\n    public async create(@Body() data: NotificationTemplateDto): Promise {\n        return this.layerService.create(data);\n    }\n\n    /**\n     * Find all the notification template\n     * @returns \n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Fin all notification template' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.layerService.findAll();\n    }\n\n    /**\n     * Find notification based on template id \n     * @param id \n     * @returns \n     */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find notification template by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOne(@Param('id') id) {\n        return this.layerService.findById(id);\n    }\n\n    /**\n     * Updated notification template\n     * @param id \n     * @param data \n     * @returns \n     */\n    @Put(':id')\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Updated notification template' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The notification template has been successfully updated.'})\n    public async update(@Param('id') id: number, @Body() data: NotificationTemplateDto) {\n        return this.layerService.update(id, data);\n    }\n\n    /**\n     * Delete Notification by id\n     * @param id \n     * @returns \n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Delete notification by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.layerService.remove(id);\n    }\n\n    /**\n     * Find notification template list by pagination\n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find notification template list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.layerService.paginate(state);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/NotificationTemplateEntity.html":{"url":"entities/NotificationTemplateEntity.html","title":"entity - NotificationTemplateEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  NotificationTemplateEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/notification.template.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is Notification template  entity\nContains Notification template fields and creates notification in database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                body\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                subject\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.template.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.template.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.template.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\nimport { ExtendEntity } from './extend.entity';\n\n\n/**\n * This is Notification template  entity\n * Contains Notification template fields and creates notification in database \n */\n\n@Entity({name: \"notification_template\"})\nexport class NotificationTemplateEntity extends ExtendEntity {\n    @Column({type: 'text', nullable: false})\n    body?: string;\n    @Column({length: 64, nullable: false})\n    name?: string;\n    @Column({length: 64, nullable: false})\n    subject?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationTemplateService.html":{"url":"injectables/NotificationTemplateService.html","title":"injectable - NotificationTemplateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationTemplateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts\n        \n\n\n            \n                Description\n            \n            \n                 This class handles functions of Notification based API Queries.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:20\n                            \n                        \n\n                \n                    \n                            Constructor for notifciation template\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: NotificationTemplateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:35\n                \n            \n\n\n            \n                \n                    Takes  data as input and create new notification in database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            NotificationTemplateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Saves the notification data into database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:52\n                \n            \n\n\n            \n                \n                    Finds all the notification\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        Find all the notification in database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:44\n                \n            \n\n\n            \n                \n                    Finds by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Find a notification based on id provided\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        With the notification found by the respective id in database.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:92\n                \n            \n\n\n            \n                \n                    For paginate\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        CreateQueryBuilder based on state data provided\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        With new paginate\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:61\n                \n            \n\n\n            \n                \n                    Remove notification based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Search for a notification based on the provided id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        It delete the respective notification and update the database.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: NotificationTemplateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:73\n                \n            \n\n\n            \n                \n                    Updates database with new entries based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Search for notification based on id\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                            NotificationTemplateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        To be updated data for notification.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        It updates the database with new entries\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(NotificationTemplateService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\nimport { NotificationTemplateEntity } from \"../entity/notification.template.entity\";\nimport { NotificationTemplateDto } from \"../dto/notification.template.dto\";\nimport * as _ from \"lodash\";\n\n\n/**\n *  This class handles functions of Notification based API Queries.\n * @class\n */\n@Injectable()\n\nexport class NotificationTemplateService {\n    private readonly logger = new Logger(NotificationTemplateService.name);\n    /**\n     * Constructor for notifciation template \n     * @param repository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(NotificationTemplateEntity) private repository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n\n        /**\n         * Takes  data as input and create new notification in database\n         * @param data \n         * @returns Saves the notification data into database \n         */\n    async create(data: NotificationTemplateDto): Promise {\n        return this.repository.save(data);\n    }\n     /**\n      * Finds by id\n      * @param id Find a notification based on id provided \n      * @returns With the notification found by the respective id in database.\n      */\n\n    async findById(id: number): Promise {\n        return this.repository.findOne({ id });\n    }\n\n    /**\n     * Finds all the notification\n     * @returns Find all the notification in database \n     */\n    async findAll(): Promise> {\n        return this.repository.find({status: StatusEnum.ACTIVE});\n    }\n\n    /**\n     * Remove notification based on id provided\n     * @param id Search for a notification based on the provided id\n     * @returns  It delete the respective notification and update the database.\n     */\n    async remove(id: number): Promise {\n        const layer = await this.findById(id);\n        layer.status = StatusEnum.DELETED;\n        return this.repository.save(layer);\n    }\n\n    /**\n     * Updates database with new entries based on id \n     * @param {number}id Search for notification based on id \n     * @param {object}data  To be updated data for notification. \n     * @returns It updates the database with new entries \n     */\n    async update(id: number, data: NotificationTemplateDto): Promise {\n        data = _.omit(data, ['id']);\n        let layer = await this.findById(id);\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `Notification template id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        return this.repository.save(layer);\n    }\n\n    /**\n     * For paginate \n     * @param state CreateQueryBuilder based on state data provided\n     * @returns With new paginate \n     */\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/NotificationUserEntity.html":{"url":"entities/NotificationUserEntity.html","title":"entity - NotificationUserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  NotificationUserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This Notification entity\nContains notification fields and creates notification in database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                notification\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                            \n                                    Optional\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        notification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, map => map.emails, {onDelete: 'CASCADE'})@JoinColumn({name: 'notification_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {eager: true})@JoinColumn({name: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { CreateDateColumn, Entity, JoinColumn, ManyToOne, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\nimport { NotificationEntity } from './notification.entity';\nimport { UserEntity } from './user.entity';\n\n\n/**\n * This Notification entity\n * Contains notification fields and creates notification in database \n */\n\n@Entity({ name: \"notification_users\" })\nexport class NotificationUserEntity {\n    @PrimaryGeneratedColumn()\n    id?: number;\n    @CreateDateColumn({name: \"created_at\"})\n    createdAt?: Date;\n    @UpdateDateColumn({name: \"updated_at\"})\n    updatedAt?: Date;\n    @ManyToOne(() => NotificationEntity, map => map.emails, {onDelete: 'CASCADE'})\n    @JoinColumn({name: \"notification_id\"})\n    notification?: NotificationEntity;\n\n    @OneToOne(() => UserEntity, { eager: true })\n    @JoinColumn({ name: \"id\" })\n    user?: UserEntity;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostgresDatabaseProviderModule.html":{"url":"modules/PostgresDatabaseProviderModule.html","title":"module - PostgresDatabaseProviderModule","body":"\n                   \n\n\n\n\n    Modules\n    PostgresDatabaseProviderModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/providers/database/postgres/provider.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule, TypeOrmModuleAsyncOptions } from '@nestjs/typeorm';\nimport { DatabaseType, getMetadataArgsStorage } from 'typeorm';\nimport { PostgresSQLConfigModule } from '../../../config/database/postgres/config.module';\nimport { PostgresSqlConfigService } from '../../../config/database/postgres/configuration.service';\n\n/**\n * @description  This module is for Connecting to postgres database\n * @module TypeOrmModule is for database connectivity\n * @class This class is exported as PostgresDatabaseProviderModule\n */\n\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            imports: [PostgresSQLConfigModule],\n            useFactory: async (postgresConfigService: PostgresSqlConfigService) => ({\n                type: 'postgres' as DatabaseType,\n                host: postgresConfigService.host,\n                port: postgresConfigService.port,\n                username: postgresConfigService.username,\n                password: postgresConfigService.password,\n                database: postgresConfigService.dbname,\n                logging: postgresConfigService.logging,\n                synchronize: postgresConfigService.synchronize,\n                entities: getMetadataArgsStorage().tables.map(tbl => tbl.target)\n            }),\n            inject: [PostgresSqlConfigService],\n            } as TypeOrmModuleAsyncOptions)\n    ]\n})\nexport class PostgresDatabaseProviderModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostgresSQLConfigModule.html":{"url":"modules/PostgresSQLConfigModule.html","title":"module - PostgresSQLConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    PostgresSQLConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostgresSQLConfigModule\n\n\n\ncluster_PostgresSQLConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nPostgresSqlConfigService \n\nPostgresSqlConfigService \n\n\n\nPostgresSQLConfigModule\n\nPostgresSQLConfigModule\n\nConfigService  -->\n\nPostgresSQLConfigModule->ConfigService \n\n\n\nPostgresSqlConfigService  -->\n\nPostgresSQLConfigModule->PostgresSqlConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/config/database/postgres/config.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                        \n                            PostgresSqlConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport * as Joi from '@hapi/joi';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport configuration from './configuration';\nimport { PostgresSqlConfigService } from './configuration.service';\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            load: [configuration],\n            validationSchema: Joi.object({\n                POSTGRES_HOST: Joi.string().default('103.10.234.158'),\n                POSTGRES_PORT: Joi.number().default('5432'),\n                POSTGRES_USERNAME: Joi.string().default('star'),\n                POSTGRES_PASSWORD: Joi.string().default('Admin@123'),\n                POSTGRES_DBNAME: Joi.string().default('starapi'),\n                DB_SYNCHRONIZE: Joi.boolean().default(true),\n                DB_LOGGING: Joi.boolean().default(true),\n            })\n        })\n    ],\n    providers: [ConfigService, PostgresSqlConfigService],\n    exports: [ConfigService, PostgresSqlConfigService]\n})\n\n/**\n * This class config connectivity to postgres database \n */\nexport class PostgresSQLConfigModule {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This is UserController  class. It handles all the API request related to users\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByAccountType\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create User'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The user has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:37\n                \n            \n\n\n            \n                \n                    Handles User creation request . Creates new user in database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find all user'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:49\n                \n            \n\n\n            \n                \n                    Find all the users from database\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find user by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:63\n                \n            \n\n\n            \n                \n                    Find users based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOneByAccountType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByAccountType(accountType: UserTypeEnum)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('by-type/:accountType')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find user by account type'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:76\n                \n            \n\n\n            \n                \n                    Find user based on accountType\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountType\n                                    \n                                                UserTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find user list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:116\n                \n            \n\n\n            \n                \n                    Find User list by pagination\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete user by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:104\n                \n            \n\n\n            \n                \n                    Handles deletion of user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(data: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Updated user'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The user has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:90\n                \n            \n\n\n            \n                \n                    Update user with new data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('user/authenticate')@ApiOperation({summary: 'For login authentication'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:128\n                \n            \n\n\n            \n                \n                    Handles user login API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                            LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { UserTypeEnum } from \"../../../enum/user.type.enum\";\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\nimport { LoginDto } from \"../dto/login.dto\";\nimport { UserDto } from \"../dto/user.dto\";\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\nimport { UserService } from \"../service/user.service\";\n\n\n/**\n * This is UserController  class. It handles all the API request related to users\n */\n@Controller({\n    version: ['1'],\n    path: 'users'\n})\n@ApiTags('users')\n@UseInterceptors(ResTransformInterceptor)\n\n\nexport class UserController {\n    private readonly logger = new Logger(UserController.name);\n    constructor(private userService: UserService) { }\n/**\n * Handles User creation request . Creates new user in database\n * @param data \n * @returns \n */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Create User' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The user has been successfully created.'})\n    public async create(@Body() data: UserDto): Promise {\n        return this.userService.create(data);\n    }\n\n    /**\n     * Find all the users from database\n     * @returns \n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find all user' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.userService.findAll();\n    }\n\n\n    /**\n     * Find users based on id provided\n     * @param id \n     * @returns \n     */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find user by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOne(@Param('id') id:number) {\n        return this.userService.findById(id);\n    }\n\n    /**\n     * Find user based on accountType\n     * @param accountType \n     * @returns \n     */\n    @Get('by-type/:accountType')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find user by account type' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOneByAccountType(@Param('accountType') accountType: UserTypeEnum) {\n        return this.userService.findByAccountType(accountType);\n    }\n\n    /**\n     * Update user with new data \n     * @param data \n     * @returns \n     */\n    @Put()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Updated user' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The user has been successfully updated.'})\n    public async update(@Body() data: UserDto) {\n        return this.userService.update(data);\n    }\n\n    /**\n     * Handles deletion of user.\n     * @param id \n     * @returns \n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    //@UseInterceptors(new TransformInterceptor(UserDto))\n    @ApiOperation({ summary: 'Delete user by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.userService.remove(id);\n    }\n\n    /**\n     * Find User list by pagination\n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find user list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.userService.paginate(state);\n    }\n\n    /**\n     * Handles user login API. \n     * @param loginDto \n     * @returns \n     */\n    @Post('user/authenticate')\n    @ApiOperation({summary:'For login authentication'})\n    @ApiResponse({status:403, description:'Forbidden.'})\n    validate(@Body() loginDto: LoginDto){\n        return this.userService.validate(loginDto)\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEntity.html":{"url":"entities/UserEntity.html","title":"entity - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is users entity\nContains users fields and creates column based on these fields into database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                accountType\n                            \n                            \n                                    Optional\n                                customerId\n                            \n                            \n                                    Optional\n                                lastname\n                            \n                            \n                                    Optional\n                                password\n                            \n                            \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        accountType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserTypeEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Column, Entity } from 'typeorm';\nimport { UserTypeEnum } from '../../../enum/user.type.enum';\nimport { ExtendEntity } from './extend.entity';\n\n\n/**\n * This is users entity\n * Contains users fields and creates column based on these fields into database\n */\n\n@Entity({name: \"users\"})\nexport class UserEntity extends ExtendEntity {\n    @Column({length: 100, nullable: false})\n    username?: string;\n    @Column({length: 100, nullable: false})\n    password?: string;\n    @Column({length: 100, nullable: true})\n    lastname?: string;\n    @Column({ type: \"enum\", enum: UserTypeEnum, default: UserTypeEnum.USER })\n    accountType?: UserTypeEnum;\n    @Column({nullable: false})\n    customerId?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserLogin.html":{"url":"entities/UserLogin.html","title":"entity - UserLogin","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserLogin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/login.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is login entity\nContains login fields  creates new login into database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/login.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/login.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/login.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n\n/**\n * This is login entity\n * Contains login fields  creates new login into database\n */\n\n@Entity( {name:'userlogin'})\nexport class UserLogin {\n    static map() {\n        throw new Error(\"Method not implemented.\");\n    }\n    @PrimaryGeneratedColumn()\n    id : number;\n\n    @Column()\n    username : string;\n\n    @Column()\n    password : string;\n    \n    // @Column()\n    // role : string;\n    \n    // @Column()\n    // age: number;\n\n    // async validateLogin(password: string): Promise{\n    //     return password===this.password?true:false\n    // }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This class consist of methods which verify user login creation and also to find users\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByAccountType\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for user services\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:38\n                \n            \n\n\n            \n                \n                    This method is used to create new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        UserDto is used as param for create function\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        This saves new user into database respective to entries made in UserDto fields.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:62\n                \n            \n\n\n            \n                \n                    Find all the user exist in database\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        All the users in the database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByAccountType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByAccountType(accountType: UserTypeEnum)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:55\n                \n            \n\n\n            \n                \n                    Find a user based on account type\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountType\n                                    \n                                                UserTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Find user based on accountType and the account status.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:47\n                \n            \n\n\n            \n                \n                    This method is used to find individual user based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Find user by the provided id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The user with provided id\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:100\n                \n            \n\n\n            \n                \n                    For user paginate\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Uses StateDto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        With updated paginate.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:70\n                \n            \n\n\n            \n                \n                    Remove a user from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Takes id and delete the user if found in database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Updates the database after the provoded id user is deleted.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(data: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:81\n                \n            \n\n\n            \n                \n                    Update new entries for a user in database based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Updates the database with new detail of user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        It saves updated entries of user into database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:111\n                \n            \n\n\n            \n                \n                    This is used to validate user login\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Takes user input at login GUI\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        With a data if match found else returns with HTTP exception\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(UserService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\nimport { Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { UserDto } from \"../dto/user.dto\";\nimport { UserEntity } from \"../entity/user.entity\";\nimport * as _ from \"lodash\";\nimport { UserTypeEnum } from \"../../../enum/user.type.enum\";\nimport { LoginDto } from \"../dto/login.dto\";\n\n/**\n * This class consist of methods which verify user login creation and also to find users\n * @class UserService  \n */\n\n@Injectable()\nexport class UserService {\n\n\n    private readonly logger = new Logger(UserService.name);\n    /**\n     * Constructor for user services \n     * @param repository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(UserEntity) private repository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n\n        /**\n         * This method is used to create new user\n         * @param data UserDto is used as param for create function \n         * @returns This saves new user into database respective to entries made in UserDto fields.\n         */\n    async create(data: UserDto): Promise {\n        return this.repository.save(data);\n    }\n\n    /**\n     * This method is used to find individual user based on id\n     * @param {number} id Find user by the provided id\n     * @returns The user with provided id \n     */\n    async findById(id: number): Promise {\n        return this.repository.findOne({ id });\n    }\n    /**\n     * Find a user based on account type\n     * @param {object} accountType \n     * @returns Find user based on accountType and the account status.\n     */\n    async findByAccountType(accountType: UserTypeEnum): Promise {\n        console.log('account type: ', accountType);\n        return this.repository.findOne({ status: StatusEnum.ACTIVE, accountType });\n    }\n    /**Find all the user exist in database\n     * @returns All the users in the database \n     */\n    async findAll(): Promise> {\n        return this.repository.find({status: StatusEnum.ACTIVE});\n    }\n    /**\n     * Remove a user from database\n     * @param {number}id Takes id and delete the user if found in database \n     * @returns Updates the database after the provoded id user is deleted.\n     */\n    async remove(id: number): Promise {\n        const layer = await this.findById(id);\n        layer.status = StatusEnum.DELETED;\n        return this.repository.save(layer);\n    }\n\n    /**\n     * Update new entries for a user in database based on id\n     * @param data Updates the database with new detail of user\n     * @returns  It saves updated entries of user into database\n     */\n    async update(data: UserDto): Promise {\n        const id: number = _.result(data,'id',0);\n        data = _.omit(data, ['id']);\n        let layer = await this.findById(id);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `User id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        return this.repository.save(layer);\n    }\n\n    /**\n     * For user paginate \n     * @param state Uses StateDto\n     * @returns With updated paginate.\n     */\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n\n    /**\n     * This is used to validate user login \n     * @param {JSON}payload Takes user input at login GUI  \n     * @returns With a data if match found else returns with HTTP exception\n     */\n    async validate(payload: LoginDto){\n        try{\n            const loginData = await this.repository;\n           const {username , password} = payload\n            // console.log(loginData)\n            // This functions checks for user \n          const user = await loginData.findOne({username ,password})\n          if(user){return user}else{ return new HttpException({\n            status: HttpStatus.FORBIDDEN,\n            error: `User not found`,\n        }, HttpStatus.FORBIDDEN);};\n        }\n        catch(err){console.log(err.message)}\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/starnavigationapi/src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/config/app/configuration.service.ts\n            \n            injectable\n            AppConfigService\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts\n            \n            controller\n            AplController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts\n            \n            controller\n            AssetController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts\n            \n            controller\n            CustomerController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts\n            \n            controller\n            EventDetailController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts\n            \n            controller\n            GeofenceController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts\n            \n            controller\n            GroupController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts\n            \n            controller\n            LandmarkController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts\n            \n            controller\n            LayerController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/newlayer.controller.ts\n            \n            controller\n            NewLayerController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts\n            \n            controller\n            NotificationController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts\n            \n            controller\n            NotificationTemplateController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/dto/newlayer.dto.ts\n            \n            class\n            NewLayerCreateDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts\n            \n            entity\n            AplEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts\n            \n            entity\n            AplItemEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts\n            \n            entity\n            AssetEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts\n            \n            entity\n            CustomerEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts\n            \n            entity\n            EventDetailsEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts\n            \n            entity\n            EventParamDetailsEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts\n            \n            entity\n            FlighLocationEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts\n            \n            entity\n            FlighPlanEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts\n            \n            entity\n            GeofenceAssetEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts\n            \n            entity\n            GeoObjectEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts\n            \n            entity\n            GeofenceEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts\n            \n            entity\n            GeofenceNotificationEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/group.entity.ts\n            \n            entity\n            GroupEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts\n            \n            entity\n            LandmarkEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts\n            \n            entity\n            LayerEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/login.entity.ts\n            \n            entity\n            UserLogin\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/newlayer.entity.ts\n            \n            entity\n            NewLayerEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/newlayerdata.entity.ts\n            \n            entity\n            NewLayerDataEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts\n            \n            entity\n            NotificationEmailEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts\n            \n            entity\n            NotificationEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/notification.template.entity.ts\n            \n            entity\n            NotificationTemplateEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts\n            \n            entity\n            NotificationUserEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts\n            \n            entity\n            UserEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts\n            \n            injectable\n            AplService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts\n            \n            injectable\n            AssetService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts\n            \n            injectable\n            CustomerService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts\n            \n            injectable\n            EventDetailService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts\n            \n            injectable\n            GeofenceService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/group.service.ts\n            \n            injectable\n            GroupService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts\n            \n            injectable\n            LandmarkService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts\n            \n            injectable\n            LayerService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/newlayer.service.ts\n            \n            injectable\n            NewLayerService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts\n            \n            injectable\n            NotificationService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts\n            \n            injectable\n            NotificationTemplateService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/user.service.ts\n            \n            injectable\n            UserService\n            \n                90 %\n                (10/11)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/axios : 0.0.6\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^1.2.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/serve-static : ^2.2.2\n        \n            @nestjs/swagger : ^5.2.0\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            @nestjsx/crud : ^5.0.0-alpha.3\n        \n            brakes : ^3.1.0\n        \n            builder-pattern : ^1.3.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            consul : ^0.40.0\n        \n            fastify-static : ^4.5.0\n        \n            fastify-swagger : ^5.0.0\n        \n            joi : ^17.6.0\n        \n            mysql2 : ^2.3.3\n        \n            nestjs-typeorm-paginate : ^3.1.3\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.8.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.0.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            tslib : ^2.0.0\n        \n            typeorm : ^0.2.44\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ConfirmEnum   (apps/.../ConfirmEnum.ts)\n                        \n                        \n                            EventSeverityEnum   (apps/.../event.severity.enum.ts)\n                        \n                        \n                            NotificationTypeEnum   (apps/.../notification.type.enum.ts)\n                        \n                        \n                            NotifyEnum   (apps/.../notify.enum.ts)\n                        \n                        \n                            PacketTypeEnum   (apps/.../packet.type.enum.ts)\n                        \n                        \n                            SeverityEnum   (apps/.../severity.enum.ts)\n                        \n                        \n                            StatusEnum   (apps/.../status.enum.ts)\n                        \n                        \n                            UserTypeEnum   (apps/.../user.type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/starnavigationapi/src/app/enum/ConfirmEnum.ts\n    \n        \n            \n                \n                    \n                        \n                        ConfirmEnum\n                    \n                \n                    \n                        \n                            This contains confirm type enum\n\n                        \n                    \n                        \n                            \n                                 Yes\n                            \n                        \n                        \n                            \n                                Value : Yes\n                            \n                        \n                        \n                            \n                                 No\n                            \n                        \n                        \n                            \n                                Value : No\n                            \n                        \n            \n        \n\n    apps/starnavigationapi/src/app/enum/event.severity.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        EventSeverityEnum\n                    \n                \n                    \n                        \n                            This contains event severity enum\n\n                        \n                    \n                        \n                            \n                                 low\n                            \n                        \n                        \n                            \n                                Value : low\n                            \n                        \n                        \n                            \n                                 high\n                            \n                        \n                        \n                            \n                                Value : high\n                            \n                        \n                        \n                            \n                                 medium\n                            \n                        \n                        \n                            \n                                Value : medium\n                            \n                        \n            \n        \n\n    apps/starnavigationapi/src/app/enum/notification.type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        NotificationTypeEnum\n                    \n                \n                    \n                        \n                            This contains Notification type enum\n\n                        \n                    \n                        \n                            \n                                 EMAIL\n                            \n                        \n                        \n                            \n                                Value : EMAIL\n                            \n                        \n                        \n                            \n                                 SMS\n                            \n                        \n                        \n                            \n                                Value : SMS\n                            \n                        \n            \n        \n\n    apps/starnavigationapi/src/app/enum/notify.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        NotifyEnum\n                    \n                \n                    \n                        \n                            This is notify enum type\n\n                        \n                    \n                        \n                            \n                                 OUTSIDE\n                            \n                        \n                        \n                            \n                                Value : OUTSIDE\n                            \n                        \n                        \n                            \n                                 INSIDE\n                            \n                        \n                        \n                            \n                                Value : INSIDE\n                            \n                        \n            \n        \n\n    apps/starnavigationapi/src/app/enum/packet.type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PacketTypeEnum\n                    \n                \n                    \n                        \n                            This is packed type enum\n\n                        \n                    \n                        \n                            \n                                 H\n                            \n                        \n                        \n                            \n                                Value : H\n                            \n                        \n                        \n                            \n                                 T\n                            \n                        \n                        \n                            \n                                Value : T\n                            \n                        \n                        \n                            \n                                 P\n                            \n                        \n                        \n                            \n                                Value : P\n                            \n                        \n                        \n                            \n                                 A\n                            \n                        \n                        \n                            \n                                Value : A\n                            \n                        \n            \n        \n\n    apps/starnavigationapi/src/app/enum/severity.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        SeverityEnum\n                    \n                \n                    \n                        \n                            This is severity enum\n\n                        \n                    \n                        \n                            \n                                 HIGH\n                            \n                        \n                        \n                            \n                                Value : High\n                            \n                        \n                        \n                            \n                                 LOW\n                            \n                        \n                        \n                            \n                                Value : Low\n                            \n                        \n            \n        \n\n    apps/starnavigationapi/src/app/enum/status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        StatusEnum\n                    \n                \n                    \n                        \n                            This is status enum\n\n                        \n                    \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : ACTIVE\n                            \n                        \n                        \n                            \n                                 DELETED\n                            \n                        \n                        \n                            \n                                Value : DELETED\n                            \n                        \n                        \n                            \n                                 DISABLED\n                            \n                        \n                        \n                            \n                                Value : DISABLED\n                            \n                        \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : PENDING\n                            \n                        \n            \n        \n\n    apps/starnavigationapi/src/app/enum/user.type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserTypeEnum\n                    \n                \n                    \n                        \n                            This have enum type  user and service\n\n                        \n                    \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 SERVICE\n                            \n                        \n                        \n                            \n                                Value : SERVICE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nStarnavigationapi\nThis project was generated using Nx.\n\n\n🔎 Smart, Fast and Extensible Build System\nAdding capabilities to your workspace\nNx supports many plugins which add capabilities for developing different types of applications and different tools.\nThese capabilities include generating applications, libraries, etc as well as the devtools to test, and build projects as well.\nBelow are our core plugins:\n\nReact\nnpm install --save-dev @nrwl/react\n\n\nWeb (no framework frontends)\nnpm install --save-dev @nrwl/web\n\n\nAngular\nnpm install --save-dev @nrwl/angular\n\n\nNest\nnpm install --save-dev @nrwl/nest\n\n\nExpress\nnpm install --save-dev @nrwl/express\n\n\nNode\nnpm install --save-dev @nrwl/node\n\n\n\nThere are also many community plugins you could add.\nGenerate an application\nRun nx g @nrwl/react:app my-app to generate an application.\n\nYou can use any of the plugins above to generate applications as well.\n\nWhen using Nx, you can create multiple applications and libraries in the same workspace.\nGenerate a library\nRun nx g @nrwl/react:lib my-lib to generate a library.\n\nYou can also use any of the plugins above to generate libraries as well.\n\nLibraries are shareable across libraries and applications. They can be imported from @starnavigationapi/mylib.\nDevelopment server\nRun nx serve my-app for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun nx g @nrwl/react:component my-component --project=my-app to generate a new component.\nBuild\nRun nx build my-app to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun nx test my-app to execute the unit tests via Jest.\nRun nx affected:test to execute the unit tests affected by a change.\nRunning end-to-end tests\nRun nx e2e my-app to execute the end-to-end tests via Cypress.\nRun nx affected:e2e to execute the end-to-end tests affected by a change.\nUnderstand your workspace\nRun nx graph to see a diagram of the dependencies of your projects.\nFurther help\nVisit the Nx Documentation to learn more.\n☁ Nx Cloud\nDistributed Computation Caching & Distributed Task Execution\n\n\nNx Cloud pairs with Nx in order to enable you to build and test code more rapidly, by up to 10 times. Even teams that are new to Nx can connect to Nx Cloud and start saving time instantly.\nTeams using Nx gain the advantage of building full-stack applications with their preferred framework alongside Nx’s advanced code generation and project dependency graph, plus a unified experience for both frontend and backend developers.\nVisit Nx Cloud to learn more.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HttpConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MySqlConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MysqlDatabaseProviderModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostgresDatabaseProviderModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostgresSQLConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppConfigModule\n\n\n\ncluster_AppConfigModule_exports\n\n\n\ncluster_AppConfigModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_HttpConfigModule\n\n\n\ncluster_HttpConfigModule_exports\n\n\n\ncluster_MySqlConfigModule\n\n\n\ncluster_MySqlConfigModule_exports\n\n\n\ncluster_PostgresSQLConfigModule\n\n\n\ncluster_PostgresSQLConfigModule_exports\n\n\n\n\nAppConfigService \n\nAppConfigService \n\n\n\nConfigService \n\nConfigService \n\n\n\nAppConfigModule\n\nAppConfigModule\n\nAppConfigService  -->\n\nAppConfigModule->AppConfigService \n\n\n\nConfigService  -->\n\nAppConfigModule->ConfigService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nAppConfigService\n\nAppConfigService\n\nAppConfigModule -->\n\nAppConfigService->AppConfigModule\n\n\n\n\n\nPostgresDatabaseProviderModule\n\nPostgresDatabaseProviderModule\n\nAppModule -->\n\nPostgresDatabaseProviderModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nHttpConfigService \n\nHttpConfigService \n\n\n\nHttpConfigModule\n\nHttpConfigModule\n\nConfigService  -->\n\nHttpConfigModule->ConfigService \n\n\n\nHttpConfigService  -->\n\nHttpConfigModule->HttpConfigService \n\n\n\n\n\nMySqlConfigService \n\nMySqlConfigService \n\n\n\nMySqlConfigModule\n\nMySqlConfigModule\n\nConfigService  -->\n\nMySqlConfigModule->ConfigService \n\n\n\nMySqlConfigService  -->\n\nMySqlConfigModule->MySqlConfigService \n\n\n\n\n\nPostgresSqlConfigService \n\nPostgresSqlConfigService \n\n\n\nPostgresSQLConfigModule\n\nPostgresSQLConfigModule\n\nConfigService  -->\n\nPostgresSQLConfigModule->ConfigService \n\n\n\nPostgresSqlConfigService  -->\n\nPostgresSQLConfigModule->PostgresSqlConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    13 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    23 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    14 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n        \n            License : MIT\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
