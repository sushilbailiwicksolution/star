var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AplController.html",[0,0.867,1,2.88]],["body/controllers/AplController.html",[0,1.261,1,3.148,2,1.051,3,0.099,4,0.085,5,0.085,6,2.353,7,0.461,8,1.738,9,3.148,10,1.83,11,5.417,12,0.173,13,0.948,14,3.212,15,1.697,16,1.32,17,1.445,18,1.931,19,1.244,20,0.948,21,0.948,22,0.726,23,5.455,24,0.965,25,0.018,26,1.917,27,4.087,28,4.897,29,3.121,30,1.83,31,1.365,32,2.434,33,1.83,34,0.422,35,2.731,36,2.434,37,3.68,38,2.462,39,1.479,40,0.742,41,0.314,42,0.507,43,1.802,44,1.617,45,1.552,46,2.103,47,2.462,48,3.036,49,2.731,50,3.064,51,0.75,52,1.885,53,1.29,54,2.103,55,1.861,56,1.83,57,2.731,58,1.484,59,1.656,60,1.83,61,0.726,62,1.445,63,1.223,64,2.434,65,1.223,66,2.731,67,1.445,68,1.189,69,0.726,70,0.735,71,2.103,72,2.135,73,2.731,74,1.245,75,1.931,76,3.148,77,0.956,78,2.103,79,2.198,80,2.731,81,2.193,82,1.499,83,0.236,84,1.738,85,1.223,86,0.726,87,1.087,88,1.731,89,1.161,90,0.454,91,2.836,92,2.981,93,1.223,94,1.161,95,0.663,96,0.189,97,0.726,98,1.539,99,1.539,100,2.353,101,1.104,102,1.364,103,3.521,104,2.731,105,1.104,106,1.223,107,1.161,108,2.731,109,2.731,110,0.099,111,0.085,112,0.726,113,0.694,114,0.501,115,2.731,116,0.726,117,1.161,118,1.83,119,3.507,120,5.82,121,2.735,122,1.654,123,1.83,124,1.223,125,1.104,126,2.353,127,1.104,128,3.52,129,2.353,130,2.353,131,1.417,132,2.193,133,2.353,134,1.223,135,1.29,136,2.353,137,1.447,138,1.447,139,2.353,140,1.223,141,1.223,142,2.353,143,1.223,144,1.223,145,2.353,146,0.009,147,0.009]],["title/entities/AplEntity.html",[148,0.326,149,2.422]],["body/entities/AplEntity.html",[3,0.169,4,0.145,5,0.145,7,0.296,11,5.156,12,0.296,24,1.083,25,0.018,34,0.474,41,0.395,42,0.63,51,1.088,70,0.714,83,0.236,96,0.323,105,2.635,110,0.169,111,0.145,146,0.013,147,0.013,148,0.568,149,3.843,150,1.135,151,4.028,152,1.197,153,1.907,154,1.507,155,4.57,156,5.933,157,3.574,158,0.89,159,6.517,160,3.452,161,5.614,162,4.813,163,4.028,164,5.933,165,5.933,166,4.675,167,4.075,168,3.237,169,4.675,170,2.088,171,4.813,172,6.854,173,4.675,174,4.675,175,1.361,176,3.574,177,4.675,178,2.076,179,1.636,180,1.715,181,1.636]],["title/entities/AplItemEntity.html",[148,0.326,162,2.625]],["body/entities/AplItemEntity.html",[3,0.145,4,0.125,5,0.125,7,0.254,11,4.733,12,0.254,20,0.932,21,0.932,24,1.163,25,0.018,31,1.342,34,0.509,41,0.425,42,0.673,70,0.886,83,0.219,96,0.278,110,0.145,111,0.125,146,0.012,147,0.012,148,0.528,149,4.189,150,0.976,152,1.085,153,1.495,158,0.806,162,3.774,167,4.329,168,3.44,170,2.113,175,1.17,178,1.881,179,1.406,180,1.474,181,1.406,182,3.461,183,6.741,184,6.057,185,6.057,186,6.057,187,6.057,188,6.057,189,2.332,190,5.218,191,6.057,192,6.057,193,2.265,194,5.375,195,3.03,196,2.575,197,2.286,198,2.173,199,4.018,200,5.375,201,4.018,202,4.018,203,4.631,204,4.018,205,4.018,206,4.018,207,4.018,208,4.018,209,4.018,210,4.018,211,4.018,212,2.007,213,2.847,214,4.018,215,3.095,216,2.129]],["title/injectables/AplService.html",[103,2.422,217,0.867]],["body/injectables/AplService.html",[3,0.115,4,0.099,5,0.099,7,0.202,11,4.997,12,0.202,13,1.358,15,1.717,16,1.112,17,1.557,19,1.164,20,1.062,21,1.062,22,1.217,23,5.728,25,0.018,34,0.459,39,1.575,40,0.79,41,0.358,42,0.541,43,1.892,44,1.651,45,1.808,51,0.84,55,1.784,58,1.485,59,1.966,61,0.848,62,1.217,67,0.848,68,0.774,69,1.217,70,0.833,74,1.784,77,1.602,82,1.68,83,0.251,86,0.848,87,1.557,88,1.809,90,0.53,95,0.774,96,0.316,97,0.848,100,2.748,103,3.793,110,0.115,111,0.099,112,1.649,113,1.488,114,1.219,116,1.557,122,0.81,125,2.166,127,2.166,131,1.497,146,0.01,147,0.01,149,2.066,154,1.164,158,0.687,217,1.062,218,1.29,219,2.748,220,4.579,221,5.044,222,2.051,223,1.428,224,2.977,225,2.622,226,2.89,227,4.579,228,2.966,229,3.189,230,3.189,231,2.051,232,3.189,233,3.189,234,3.945,235,3.189,236,2.966,237,4.579,238,1.065,239,1.228,240,4.579,241,2.051,242,1.428,243,1.228,244,1.356,245,1.428,246,1.428,247,3.189,248,3.189,249,1.507,250,1.507,251,2.457,252,2.148,253,2.051,254,1.507,255,1.428,256,2.051,257,1.69,258,1.69,259,1.428,260,1.356,261,2.051,262,1.428,263,1.428,264,1.428,265,1.593,266,2.051,267,1.428,268,1.428,269,1.428,270,1.428,271,1.428,272,1.428]],["title/modules/AppConfigModule.html",[273,1.44,274,2.422]],["body/modules/AppConfigModule.html",[3,0.182,4,0.156,5,0.156,25,0.018,83,0.262,90,0.836,110,0.182,111,0.193,146,0.014,147,0.014,273,2.392,274,4.834,275,2.378,276,3.104,277,4.336,278,4.336,279,6.494,280,4.883,281,3.743,282,3.032,283,3.032,284,5.033,285,4.362,286,3.26,287,3.26,288,3.534,289,3.26,290,4.732,291,3.534,292,2.837,293,3.534,294,3.534,295,3.534,296,3.534,297,5.033,298,5.033,299,5.033,300,5.033,301,5.033,302,5.033,303,4.336,304,4.336,305,5.033,306,5.033,307,5.033,308,5.033,309,5.033,310,5.033,311,5.033,312,5.033,313,5.033,314,3.26,315,5.033,316,4.336,317,4.336,318,4.336]],["title/controllers/AppController.html",[0,0.867,319,2.625]],["body/controllers/AppController.html",[0,1.648,2,1.991,3,0.187,4,0.161,5,0.161,7,0.327,12,0.327,13,1.465,24,0.817,25,0.018,34,0.357,44,1.465,83,0.257,89,2.199,90,0.859,98,3.561,99,2.915,110,0.187,111,0.212,113,1.314,116,1.68,117,2.199,119,3.115,131,1.199,146,0.014,147,0.014,239,2.432,319,4.435,320,4.454,321,5.442,322,4.39,323,6.12,324,5.17,325,5.17,326,5.442,327,7.286,328,4.454,329,5.17,330,5.17,331,5.17]],["title/modules/AppModule.html",[273,1.44,332,2.625]],["body/modules/AppModule.html",[2,2.23,3,0.163,4,0.14,5,0.14,7,0.285,13,1.045,25,0.018,34,0.311,37,2.714,39,1.144,40,0.574,41,0.26,42,0.393,44,1.045,83,0.27,90,0.749,95,1.094,107,2.463,110,0.163,111,0.18,146,0.013,147,0.013,238,1.504,273,2.693,274,4.637,275,2.128,276,2.894,281,3.49,282,2.714,283,2.714,292,3.265,314,3.753,316,3.88,319,4.497,322,4.313,328,3.88,332,5.342,333,3.88,334,3.88,335,3.88,336,4.637,337,4.504,338,4.504,339,5.793,340,6.76,341,4.504,342,4.504,343,4.504,344,6.404,345,4.504,346,4.504,347,3.88,348,3.469,349,5.793,350,4.504,351,4.504,352,4.504,353,4.504,354,5.793,355,4.504,356,4.504,357,3.88,358,5.793,359,4.504,360,5.793,361,4.504,362,3.88,363,3.163,364,3.469,365,4.504,366,4.504,367,4.504,368,4.504,369,4.504,370,4.504]],["title/injectables/AppService.html",[217,0.867,322,2.253]],["body/injectables/AppService.html",[3,0.191,4,0.164,5,0.164,7,0.335,12,0.335,13,1.485,25,0.018,34,0.365,40,0.934,44,1.728,83,0.232,90,0.879,110,0.191,111,0.214,131,1.226,146,0.015,147,0.015,170,1.951,217,1.485,218,2.138,322,3.857,323,6.167,371,4.554,372,7.451,373,5.286,374,6.887,375,6.402,376,5.286,377,5.286,378,4.554,379,5.286]],["title/controllers/AssetController.html",[0,0.867,380,2.88]],["body/controllers/AssetController.html",[0,1.15,2,1.073,3,0.101,4,0.087,5,0.087,7,0.465,8,1.764,10,1.858,12,0.177,13,0.962,14,3.246,15,1.71,16,1.333,17,1.46,19,1.26,20,0.962,21,0.962,22,0.741,24,0.972,25,0.018,29,3.168,30,1.858,31,1.386,32,2.459,33,1.858,34,0.425,36,1.858,39,1.492,40,0.748,41,0.339,42,0.512,43,1.742,44,1.624,45,1.564,47,2.5,48,3.096,51,0.761,52,1.908,55,2.133,56,1.248,58,1.375,59,1.673,61,0.741,62,1.46,63,1.248,64,2.459,65,1.248,67,1.46,68,1.204,69,0.741,70,0.706,72,1.819,74,1.264,75,1.961,76,3.196,79,2.22,81,1.858,82,1.522,83,0.237,84,1.185,85,1.248,86,0.741,87,1.103,88,1.695,89,1.185,90,0.463,91,2.933,92,3.051,93,1.248,94,1.185,95,0.677,96,0.193,97,0.741,101,1.127,102,1.393,105,1.127,106,1.248,107,1.185,110,0.101,111,0.087,112,0.741,113,0.708,114,1.077,116,0.741,117,1.185,118,1.858,121,2.855,122,1.701,123,1.858,124,1.248,131,1.479,132,2.459,134,1.858,140,1.248,141,1.248,143,1.248,144,1.248,146,0.009,147,0.009,154,1.054,160,1.477,380,3.196,381,2.401,382,4.921,383,4.149,384,6.375,385,1.571,386,4.957,387,2.787,388,1.477,389,2.787,390,4.27,391,2.787,392,1.477,393,2.787,394,2.787,395,2.688,396,2.787,397,1.477,398,2.787,399,1.679,400,2.147,401,2.787,402,4.149,403,1.477,404,1.477,405,2.787,406,3.856,407,2.787,408,2.787,409,1.477,410,2.787,411,2.787,412,2.787,413,4.149,414,2.688,415,2.787,416,2.787,417,4.149,418,2.787,419,2.401,420,2.401,421,2.787,422,2.787,423,2.787]],["title/entities/AssetEntity.html",[148,0.326,424,2.253]],["body/entities/AssetEntity.html",[3,0.106,4,0.091,5,0.091,7,0.356,12,0.185,24,1.197,25,0.018,34,0.524,40,0.717,41,0.437,42,0.683,51,0.789,70,0.866,83,0.156,96,0.202,110,0.106,111,0.091,146,0.01,147,0.01,148,0.49,150,0.711,152,0.869,153,1.565,154,1.094,155,3.315,157,2.593,158,0.646,160,2.703,161,4.396,167,4.398,168,3.48,170,2.35,171,2.056,175,1.253,178,1.506,179,1.025,181,1.025,196,2.664,198,1.74,203,3.708,382,4.195,424,2.593,425,2.523,426,5.103,427,5.103,428,5.103,429,5.103,430,5.103,431,5.103,432,5.103,433,5.103,434,5.103,435,5.103,436,5.103,437,5.103,438,5.103,439,5.103,440,5.103,441,5.103,442,5.103,443,5.103,444,5.103,445,5.103,446,5.103,447,2.928,448,2.928,449,2.928,450,2.928,451,2.928,452,2.928,453,2.928,454,2.928,455,2.928,456,2.928,457,2.928,458,1.184,459,2.426,460,2.928,461,2.928,462,2.928,463,2.928,464,3.022,465,3.95,466,3.95,467,3.95,468,3.95,469,2.928,470,2.928,471,2.928,472,2.928,473,2.928,474,2.928,475,2.928,476,2.928,477,2.928,478,2.928,479,3.022]],["title/injectables/AssetService.html",[217,0.867,406,2.625]],["body/injectables/AssetService.html",[3,0.11,4,0.094,5,0.094,7,0.279,12,0.192,13,1.325,15,1.729,16,1.07,17,1.519,19,1.12,20,1.325,21,1.022,22,1.172,25,0.018,34,0.463,37,2.656,39,1.611,40,0.808,41,0.366,42,0.553,43,1.783,44,1.667,45,1.809,50,2.485,51,1.163,55,1.931,58,1.462,59,1.931,61,0.804,62,1.172,67,0.804,68,0.735,69,1.172,70,0.822,74,1.343,82,1.617,83,0.251,86,0.804,87,1.519,88,1.783,90,0.503,95,0.735,96,0.305,97,0.804,110,0.11,111,0.162,112,1.615,113,1.452,114,1.2,116,1.519,122,0.769,125,2.31,127,2.103,131,1.518,146,0.01,147,0.01,152,0.89,154,1.12,158,0.661,160,1.603,217,1.022,218,1.223,221,3.797,222,1.974,223,1.355,224,2.93,225,2.558,226,2.839,231,1.974,238,1.011,239,1.165,241,1.974,242,1.355,243,1.165,244,1.287,245,1.355,246,1.355,249,1.43,252,2.096,253,1.974,254,1.43,255,1.355,256,1.974,259,1.355,260,1.287,261,1.974,262,1.355,263,1.355,264,1.355,265,1.512,266,1.974,267,1.355,268,1.355,269,1.355,270,1.355,271,1.355,272,1.355,382,4.655,390,4.922,395,3.701,399,2.656,406,4.011,424,1.823,480,2.607,481,4.408,482,4.408,483,4.408,484,5.04,485,3.026,486,3.026,487,3.026,488,3.026,489,3.026,490,3.395,491,3.026,492,3.026,493,4.408,494,2.331,495,2.607,496,1.512,497,1.512,498,3.026,499,3.026,500,1.706,501,1.603,502,2.331,503,1.512,504,3.026,505,3.026,506,3.026]],["title/controllers/CustomerController.html",[0,0.867,507,2.88]],["body/controllers/CustomerController.html",[0,1.284,2,1.09,3,0.103,4,0.088,5,0.088,7,0.463,8,2.798,9,3.234,10,1.88,12,0.179,13,0.974,14,3.232,15,1.706,16,1.344,17,1.471,18,1.984,19,1.271,20,0.974,21,1.161,22,0.753,24,0.978,25,0.018,26,1.988,27,1.988,29,3.145,30,1.88,31,1.402,32,2.478,33,1.88,34,0.428,36,1.88,38,2.53,39,1.502,40,0.753,41,0.319,42,0.515,43,1.646,44,1.629,45,1.573,48,3.063,52,1.926,53,1.338,55,2.084,56,1.88,58,1.38,59,1.279,61,0.753,62,1.471,63,1.268,64,2.478,65,1.268,67,1.471,68,1.215,69,0.753,70,0.602,72,2.168,74,2.084,75,3.232,79,2.238,81,1.88,83,0.243,84,1.785,85,1.268,86,0.753,87,1.116,88,1.704,89,1.204,90,0.471,91,2.87,92,3.01,93,1.268,94,1.204,95,0.688,96,0.196,97,0.753,98,1.596,99,1.596,101,1.145,102,1.415,105,1.145,106,1.268,107,1.204,110,0.103,111,0.088,112,0.753,113,0.72,114,0.519,116,0.753,117,1.204,118,1.88,119,1.706,121,2.772,122,1.672,123,1.88,124,1.268,131,1.436,132,2.241,134,1.268,135,1.338,140,1.268,141,1.268,143,1.268,144,1.268,146,0.01,147,0.01,388,1.5,392,1.5,395,4.905,397,1.5,399,1.706,400,2.181,403,1.5,404,1.5,409,1.5,507,3.234,508,2.44,509,3.854,510,5.52,511,5.004,512,2.832,513,2.832,514,4.199,515,4.199,516,2.832,517,2.832,518,2.832,519,2.832,520,4.199,521,3.234,522,2.44,523,3.886,524,2.832,525,2.832,526,2.832,527,2.832,528,2.832,529,2.832,530,2.832,531,2.832,532,2.832,533,2.832]],["title/entities/CustomerEntity.html",[148,0.326,534,2.422]],["body/entities/CustomerEntity.html",[3,0.175,4,0.15,5,0.15,7,0.306,12,0.306,16,1.471,24,0.764,25,0.018,34,0.504,40,0.843,41,0.421,42,0.67,51,1.111,83,0.219,96,0.334,110,0.175,111,0.15,146,0.014,147,0.014,148,0.577,150,1.174,152,1.223,153,1.686,158,0.909,170,2.34,175,1.408,178,2.121,179,1.692,180,1.774,181,1.692,196,2.577,198,2.45,395,4.723,458,2.45,459,3.416,509,3.724,534,3.925,535,4.165,536,5.702,537,6.618,538,5.098,539,6.618,540,6.618,541,4.835,542,4.835,543,4.835,544,4.835,545,4.835,546,4.835]],["title/injectables/CustomerService.html",[217,0.867,523,2.625]],["body/injectables/CustomerService.html",[3,0.116,4,0.1,5,0.1,7,0.204,12,0.204,13,1.363,15,1.719,16,1.118,17,1.562,19,1.17,20,1.363,21,1.068,22,1.224,25,0.018,34,0.46,39,1.58,40,0.792,41,0.359,42,0.542,43,1.812,44,1.653,45,1.811,51,1.078,55,1.79,58,1.438,59,1.79,61,0.855,62,1.224,67,0.855,68,0.781,69,1.224,70,0.802,74,1.403,82,1.69,83,0.255,86,0.855,87,1.562,88,1.772,90,0.534,95,0.781,96,0.318,97,0.855,110,0.116,111,0.167,112,1.654,113,1.493,114,1.222,116,1.562,122,0.817,125,2.376,127,2.176,131,1.501,146,0.01,147,0.01,152,0.929,154,1.17,158,0.691,217,1.068,218,1.3,222,2.062,223,1.44,224,2.984,225,2.631,226,2.898,228,2.983,231,2.062,238,1.074,239,1.238,241,2.062,242,1.44,243,1.238,244,1.367,245,1.44,246,1.44,249,1.519,250,1.519,252,2.156,253,2.062,254,1.519,255,1.44,256,2.062,259,1.44,260,1.367,261,2.062,262,1.44,263,1.44,264,1.44,265,1.606,266,2.062,267,1.44,268,1.44,269,1.44,270,1.44,271,1.44,272,1.44,395,4.617,399,2.775,496,1.606,497,1.606,500,1.812,501,1.703,502,2.476,503,1.606,509,3.547,510,5.741,522,2.769,523,4.126,534,2.082,547,2.769,548,4.605,549,3.215,550,3.215,551,3.215,552,3.215,553,3.215,554,3.967,555,4.605,556,2.769,557,3.215]],["title/controllers/EventDetailController.html",[0,0.867,558,2.88]],["body/controllers/EventDetailController.html",[0,1.144,2,1.064,3,0.1,4,0.086,5,0.086,7,0.461,8,1.753,12,0.175,13,0.956,14,3.219,15,1.7,16,1.489,17,1.454,18,1.948,19,1.253,20,0.956,21,0.956,22,0.735,24,0.969,25,0.018,26,1.94,27,4.107,29,3.129,30,1.846,31,1.377,32,2.448,33,1.846,34,0.424,36,1.846,39,1.486,40,0.745,41,0.315,42,0.51,43,1.737,44,1.621,45,1.559,46,2.128,47,2.484,48,3.044,52,1.898,53,1.305,54,2.128,55,2.071,56,1.846,58,1.45,61,0.735,62,1.454,63,1.237,64,2.448,65,1.237,67,1.454,68,1.197,69,0.735,70,0.738,71,2.128,72,2.146,74,1.256,75,1.948,77,0.967,78,2.128,79,2.211,81,1.237,82,1.512,83,0.242,84,1.753,85,1.237,86,0.735,87,1.096,88,1.737,89,1.175,90,0.459,91,2.846,92,2.991,93,1.237,94,1.175,95,0.671,96,0.191,97,0.735,98,1.557,99,1.557,101,1.117,102,1.38,103,3.194,105,1.117,106,1.237,107,1.175,110,0.1,111,0.086,112,0.735,113,0.702,114,0.904,116,0.735,117,1.175,118,1.846,119,3.524,121,2.747,122,1.66,123,1.846,124,1.237,125,1.117,126,2.38,127,1.117,128,3.551,129,2.38,130,2.38,131,1.423,132,2.208,133,2.38,134,1.237,135,1.305,136,2.38,137,1.464,138,1.464,139,2.38,140,1.237,141,1.237,142,2.38,143,1.237,144,1.237,145,2.38,146,0.009,147,0.009,521,4.211,558,3.175,559,2.38,560,5.363,561,5.476,562,4.931,563,5.673,564,2.763,565,2.763,566,2.763,567,2.763,568,2.763,569,2.763,570,2.38,571,1.664,572,2.38,573,2.894,574,2.763,575,2.763,576,2.763,577,5.849]],["title/injectables/EventDetailService.html",[217,0.867,573,2.625]],["body/injectables/EventDetailService.html",[3,0.116,4,0.1,5,0.1,7,0.203,12,0.203,13,1.362,15,1.718,16,1.116,17,1.561,19,1.168,20,1.362,21,1.066,22,1.222,25,0.018,34,0.46,39,1.579,40,0.792,41,0.358,42,0.542,43,1.771,44,1.653,45,1.81,51,0.843,55,1.788,58,1.486,59,1.97,60,2.629,61,0.853,62,1.222,67,0.853,68,0.779,69,1.222,70,0.834,74,1.401,77,1.609,82,1.687,83,0.251,86,0.853,87,1.561,88,1.811,90,0.533,95,0.779,96,0.318,97,0.853,110,0.116,111,0.182,112,1.652,113,1.492,114,1.14,116,1.561,122,0.815,125,2.173,127,2.173,131,1.5,146,0.01,147,0.01,152,0.928,154,1.168,158,0.69,217,1.066,218,1.297,222,2.059,223,1.436,224,2.982,225,2.629,226,2.896,231,2.059,238,1.071,239,1.235,241,2.059,242,1.436,243,1.235,244,1.364,245,1.436,246,1.436,249,1.515,250,1.515,251,2.471,252,2.154,253,2.059,254,1.515,255,1.436,256,2.059,257,1.699,258,1.699,259,1.436,260,1.364,261,2.059,262,1.436,263,1.436,264,1.436,265,1.602,266,2.059,267,1.436,268,1.436,269,1.436,270,1.436,271,1.436,272,1.436,521,3.542,560,4.87,561,5.737,563,2.471,570,2.763,571,1.932,572,2.763,573,3.774,578,2.763,579,4.598,580,4.598,581,3.207,582,4.598,583,3.207,584,4.598,585,3.207,586,3.207,587,3.207,588,4.598,589,3.207]],["title/entities/EventDetailsEntity.html",[148,0.326,571,2.253]],["body/entities/EventDetailsEntity.html",[3,0.138,4,0.118,5,0.118,7,0.241,12,0.241,24,1.078,25,0.018,31,1.27,34,0.519,40,0.75,41,0.437,42,0.678,70,0.821,83,0.229,96,0.263,110,0.138,111,0.118,146,0.012,147,0.012,148,0.513,150,0.923,152,1.045,153,1.441,158,0.777,168,2.319,170,2.309,175,1.714,176,2.291,178,1.812,179,1.331,180,1.395,181,1.331,196,2.202,197,2.202,198,2.557,238,1.73,458,2.094,459,2.919,464,3.636,465,4.439,466,4.439,467,4.439,468,4.439,479,3.636,571,3.12,590,3.275,591,6.615,592,5.889,593,5.073,594,5.889,595,5.889,596,5.889,597,5.889,598,5.889,599,5.073,600,5.889,601,5.073,602,5.889,603,5.889,604,5.073,605,3.802,606,3.802,607,3.802,608,4.135,609,5.178,610,4.461,611,2.587,612,3.802,613,3.802,614,3.802,615,3.802,616,3.802,617,5.095,618,2.587,619,3.809,620,3.802,621,3.802,622,2.919,623,3.989,624,3.802,625,3.802,626,3.802,627,3.802,628,3.275,629,3.802,630,3.275]],["title/entities/EventParamDetailsEntity.html",[148,0.326,608,2.625]],["body/entities/EventParamDetailsEntity.html",[3,0.169,4,0.145,5,0.145,7,0.296,12,0.296,20,1.084,21,1.084,24,0.937,25,0.018,31,1.562,34,0.474,41,0.408,42,0.648,70,0.714,83,0.248,96,0.323,110,0.169,111,0.145,146,0.013,147,0.013,148,0.568,150,1.135,152,1.197,153,1.651,158,0.89,170,1.808,175,1.727,178,2.076,179,1.636,180,1.715,181,1.636,193,2.635,195,3.344,196,2.915,197,2.523,198,2.399,212,2.336,213,3.143,215,3.601,216,2.477,238,1.982,560,4.166,571,3.574,599,5.614,608,4.813,610,5.614,617,5.449,618,2.336,619,4.13,628,4.028,630,4.028,631,4.028,632,6.517,633,5.933,634,6.517,635,6.517,636,5.933,637,4.028,638,5.933,639,4.675,640,4.675,641,4.675,642,4.675,643,4.675]],["title/entities/FlighLocationEntity.html",[148,0.326,644,2.625]],["body/entities/FlighLocationEntity.html",[3,0.113,4,0.097,5,0.097,7,0.198,12,0.198,20,0.724,21,0.724,24,1.089,25,0.018,34,0.526,40,0.674,41,0.446,42,0.685,51,0.827,68,1.285,70,0.92,83,0.192,96,0.216,110,0.113,111,0.097,114,0.827,146,0.01,147,0.01,148,0.461,150,0.758,152,0.91,153,1.255,154,1.146,158,0.677,167,2.542,168,3.207,170,2.132,175,1.865,178,1.578,179,1.093,180,1.146,181,1.093,193,1.76,195,2.542,196,2.465,197,1.918,198,2.896,212,1.56,213,2.389,215,2.405,216,1.654,464,3.167,465,4.071,466,4.071,467,4.071,468,4.071,479,3.167,593,4.561,604,4.561,618,3.072,622,3.944,623,5.39,637,2.69,644,3.167,645,2.69,646,5.798,647,4.51,648,5.294,649,5.294,650,5.294,651,5.294,652,5.294,653,5.294,654,5.294,655,4.561,656,5.294,657,5.294,658,5.294,659,5.294,660,5.294,661,5.294,662,5.294,663,5.294,664,5.294,665,5.294,666,5.294,667,3.122,668,3.122,669,3.122,670,3.122,671,3.122,672,3.122,673,3.122,674,3.122,675,4.071,676,4.51,677,4.51,678,4.51,679,3.122,680,3.122,681,3.122,682,3.122,683,3.122,684,3.122,685,3.122,686,3.122,687,3.122,688,3.122,689,3.122,690,3.122,691,3.122,692,3.122,693,3.122,694,3.122,695,3.122,696,3.122]],["title/entities/FlighPlanEntity.html",[148,0.326,675,2.625]],["body/entities/FlighPlanEntity.html",[3,0.172,4,0.148,5,0.148,7,0.301,12,0.301,24,1.09,25,0.018,34,0.477,41,0.41,42,0.633,83,0.238,96,0.328,110,0.172,111,0.148,146,0.014,147,0.014,148,0.573,150,1.154,152,1.21,153,1.668,158,0.899,163,4.095,170,2.101,175,1.745,176,3.612,178,2.098,179,1.664,180,1.744,181,1.664,196,3.087,198,2.936,458,2.789,601,5.658,618,2.375,622,3.38,623,4.618,644,4.842,655,5.165,675,4.21,697,4.095,698,5.995,699,6.567,700,6.567,701,6.567,702,3.887,703,4.754,704,5.995,705,5.995,706,4.754,707,4.754,708,4.754,709,4.754,710,4.754]],["title/entities/GeoObjectEntity.html",[148,0.326,711,2.625]],["body/entities/GeoObjectEntity.html",[3,0.171,4,0.147,5,0.147,7,0.3,12,0.3,24,0.945,25,0.018,34,0.501,41,0.434,42,0.66,70,0.72,83,0.237,96,0.327,101,2.651,110,0.171,111,0.147,114,1.097,146,0.014,147,0.014,148,0.572,150,1.15,152,1.207,153,1.664,154,1.52,158,0.897,170,2.27,175,1.379,178,2.094,179,1.658,180,1.738,181,1.658,197,2.544,458,2.419,611,2.989,702,3.373,711,4.201,712,4.082,713,7.103,714,4.201,715,5.649,716,6.557,717,6.557,718,4.987,719,6.557,720,4.738,721,4.738,722,4.738,723,5.983,724,4.738,725,4.738,726,4.738,727,3.069,728,4.738]],["title/entities/GeofenceAssetEntity.html",[148,0.326,729,2.422]],["body/entities/GeofenceAssetEntity.html",[3,0.169,4,0.145,5,0.145,7,0.296,12,0.296,24,1.117,25,0.018,34,0.489,40,0.595,41,0.408,42,0.659,58,1.314,70,0.824,83,0.236,96,0.323,110,0.169,111,0.145,146,0.013,147,0.013,148,0.597,150,1.133,152,1.196,153,1.649,158,0.889,175,1.359,193,2.631,212,2.332,213,3.14,216,2.473,382,4.218,424,2.812,622,3.862,727,3.023,729,3.839,730,4.021,731,7.071,732,5.61,733,4.573,734,4.573,735,3.629,736,3.839,737,4.667,738,5.106,739,4.667,740,4.161,741,5.926,742,4.667,743,4.161,744,4.161,745,4.667,746,4.218,747,4.667,748,4.161,749,4.161,750,4.667,751,3.277,752,3.277,753,4.667,754,3.595,755,4.667]],["title/controllers/GeofenceController.html",[0,0.867,756,2.88]],["body/controllers/GeofenceController.html",[0,1.284,2,1.09,3,0.103,4,0.088,5,0.088,7,0.463,8,1.785,12,0.179,13,0.974,14,3.232,15,1.706,16,1.503,17,1.471,18,1.984,19,1.271,20,0.974,21,1.284,22,0.753,24,0.978,25,0.018,29,3.145,30,1.88,31,1.402,32,2.478,33,1.88,34,0.428,36,1.88,39,1.502,40,0.753,41,0.319,42,0.515,43,1.819,44,1.629,45,1.573,48,3.063,52,1.926,53,1.338,55,2.14,56,1.88,58,1.476,61,0.753,62,1.471,63,1.268,64,2.478,65,1.268,67,1.471,68,1.215,69,0.753,70,0.745,72,2.168,74,1.279,75,1.984,77,0.991,79,2.238,81,1.268,83,0.238,84,1.785,85,1.268,86,0.753,87,1.116,88,1.75,89,1.204,90,0.471,91,2.87,92,3.01,93,1.268,94,1.204,95,0.688,96,0.196,97,0.753,105,1.145,106,1.268,107,1.204,110,0.103,111,0.088,112,0.753,113,0.72,114,1.084,116,0.753,117,1.204,118,1.88,121,2.772,122,1.672,123,1.88,124,1.268,131,1.436,132,2.241,134,1.268,135,1.338,137,1.5,138,1.5,140,1.268,141,1.268,143,1.268,144,1.268,146,0.01,147,0.01,189,2.131,385,1.596,388,1.5,392,1.5,397,1.5,403,1.5,404,1.5,409,1.5,735,1.5,756,3.234,757,2.44,758,4.905,759,5.52,760,4.199,761,2.832,762,2.832,763,4.495,764,2.832,765,2.832,766,2.832,767,1.834,768,2.181,769,2.832,770,1.5,771,1.5,772,1.5,773,1.5,774,1.5,775,1.5,776,2.44,777,2.44,778,3.886,779,2.832,780,2.832,781,2.832,782,2.832,783,2.832,784,2.832,785,2.832,786,2.832,787,2.832]],["title/entities/GeofenceEntity.html",[148,0.326,735,1.981]],["body/entities/GeofenceEntity.html",[3,0.107,4,0.092,5,0.092,7,0.398,12,0.188,24,1.175,25,0.018,31,1.45,34,0.514,40,0.893,41,0.431,42,0.677,51,0.796,52,1.14,70,0.88,83,0.228,96,0.205,110,0.107,111,0.092,114,0.796,146,0.01,147,0.01,148,0.448,150,0.719,152,0.876,153,1.207,154,1.103,158,0.651,160,2.721,167,2.447,168,3.096,170,2.16,171,3.971,175,1.495,176,1.785,178,1.519,179,1.037,180,1.087,181,1.037,189,1.671,195,3.188,196,2.405,197,2.675,198,2.287,238,2.101,239,1.671,382,2.812,458,1.755,459,2.447,464,3.048,465,3.971,466,3.971,467,3.971,468,3.971,479,3.048,611,2.168,618,2.826,619,4.016,714,3.048,715,4.425,729,3.327,735,2.299,740,5.243,758,3.9,788,2.552,789,4.34,790,4.425,791,5.137,792,5.137,793,5.137,794,5.137,795,5.137,796,5.137,797,5.137,798,3.739,799,5.137,800,5.137,801,5.137,802,5.137,803,5.137,804,4.34,805,2.962,806,3.739,807,2.962,808,2.962,809,4.873,810,4.34,811,2.962,812,3.739,813,3.739,814,2.962,815,4.34,816,2.962,817,4.34,818,2.962,819,4.34,820,2.962,821,4.34,822,2.962,823,4.34,824,2.962,825,4.34,826,2.962,827,2.962,828,3.327,829,4.34,830,2.962,831,4.873,832,2.962,833,4.873,834,4.34,835,5.656,836,2.962,837,4.34,838,2.962,839,4.34,840,2.962,841,4.34,842,2.962,843,4.34,844,2.962,845,2.962,846,2.962,847,2.962,848,2.962,849,2.962,850,2.962,851,2.962,852,2.962]],["title/entities/GeofenceNotificationEntity.html",[148,0.326,828,2.422]],["body/entities/GeofenceNotificationEntity.html",[3,0.166,4,0.143,5,0.143,7,0.291,12,0.291,24,1.112,25,0.018,34,0.486,40,0.585,41,0.406,42,0.657,58,1.304,70,0.819,83,0.212,96,0.317,110,0.166,111,0.143,114,1.076,146,0.013,147,0.013,148,0.594,150,1.115,152,1.184,154,1.49,158,0.88,175,1.337,189,2.879,193,2.588,197,1.952,212,2.294,213,3.107,216,2.433,554,5.053,611,2.93,622,3.838,733,4.538,734,4.538,735,3.607,736,3.799,738,5.053,740,4.118,743,4.118,744,4.118,746,4.186,748,4.118,749,4.118,751,3.224,752,3.224,754,3.537,758,4.661,828,3.799,853,3.956,854,5.567,855,4.592,856,4.592,857,5.865,858,3.537,859,4.592,860,4.518,861,4.592,862,4.592,863,4.592]],["title/injectables/GeofenceService.html",[217,0.867,778,2.625]],["body/injectables/GeofenceService.html",[3,0.094,4,0.081,5,0.081,7,0.164,12,0.164,13,0.912,15,1.662,16,1.286,17,1.409,19,0.999,20,1.229,21,0.912,22,1.046,25,0.018,34,0.43,37,2.37,39,1.447,40,0.725,41,0.328,42,0.496,43,1.705,44,1.577,45,1.728,50,2.987,51,0.721,58,1.509,59,1.826,60,2.373,61,0.69,62,1.046,67,0.69,68,0.63,69,1.046,70,0.79,77,1.376,82,1.443,83,0.263,86,0.69,87,1.409,88,1.808,90,0.431,95,0.63,96,0.272,97,0.69,101,1.049,102,1.297,110,0.094,111,0.165,112,1.705,113,1.346,114,1.044,116,1.409,122,1.346,125,2.302,127,2.302,131,1.444,146,0.009,147,0.009,152,0.794,158,0.59,189,2.192,217,0.912,218,1.049,222,1.761,223,1.162,224,3.208,225,2.373,226,2.683,228,2.548,231,1.761,238,0.867,239,0.999,241,1.761,242,1.162,243,0.999,244,1.104,245,1.162,246,1.162,250,1.226,252,1.742,253,1.761,255,1.162,256,1.162,257,1.375,258,1.375,259,1.162,260,1.104,261,1.761,262,1.162,263,1.162,264,1.162,265,1.297,266,1.761,267,1.162,268,1.162,269,1.162,270,1.162,271,2.127,272,1.162,424,1.564,495,2.236,496,1.297,497,1.297,501,2.084,503,1.297,534,1.681,556,2.236,714,2.762,729,1.681,732,3.388,735,2.084,758,4.64,759,5.362,776,2.236,777,2.236,778,2.762,828,1.681,854,3.388,864,2.236,865,5.298,866,5.298,867,4.565,868,3.933,869,2.762,870,2.595,871,2.595,872,2.548,873,2.595,874,2.595,875,2.595,876,3.933,877,1.463,878,1.999,879,1.463,880,1.999,881,2.595,882,1.375,883,1.999,884,2.595,885,2.595,886,2.236,887,2.236,888,1.999,889,3.933,890,5.298,891,5.298,892,5.298,893,5.298,894,3.933,895,2.595,896,2.595,897,3.933,898,3.933,899,3.933,900,3.933,901,3.933,902,3.933,903,3.933,904,3.933,905,3.933,906,3.933,907,3.933,908,3.933,909,3.933,910,3.933,911,3.933,912,3.933,913,2.595,914,2.595,915,2.595,916,2.595,917,2.595,918,2.595,919,2.595,920,2.595]],["title/controllers/GroupController.html",[0,0.867,921,2.88]],["body/controllers/GroupController.html",[0,1.163,2,1.093,3,0.103,4,0.088,5,0.088,7,0.463,8,1.789,10,1.884,12,0.18,13,0.976,14,3.234,15,1.706,16,1.505,17,1.474,18,1.988,19,1.274,20,0.976,21,1.286,22,0.755,24,0.979,25,0.018,26,1.994,27,4.155,29,3.147,30,1.884,31,1.406,32,2.482,33,1.884,34,0.428,36,1.884,39,1.504,40,0.754,41,0.32,42,0.516,43,1.82,44,1.63,45,1.575,46,2.188,48,3.065,52,1.93,53,1.342,54,2.188,55,2.141,56,1.884,58,1.476,59,1.689,61,0.755,62,1.474,63,1.272,64,2.482,65,1.272,67,1.474,68,1.217,69,0.755,70,0.745,71,2.188,72,2.171,74,1.282,75,1.988,77,0.994,78,2.188,79,2.241,81,1.272,83,0.238,84,1.789,85,1.272,86,0.755,87,1.119,88,1.751,89,1.208,90,0.472,91,2.872,92,3.013,93,1.272,94,1.208,95,0.69,96,0.196,97,0.755,98,1.601,99,1.601,101,1.149,102,1.419,105,1.149,106,1.272,107,1.208,110,0.103,111,0.088,112,0.755,113,0.722,114,0.919,116,0.755,117,1.208,118,1.884,119,3.565,121,2.775,122,1.674,123,1.884,124,1.272,131,1.437,132,2.245,134,1.272,135,1.342,137,1.505,138,1.505,140,1.272,141,1.272,143,1.272,144,1.272,146,0.01,147,0.01,921,3.241,922,2.447,923,5.863,924,5.526,925,5.012,926,2.84,927,2.84,928,2.84,929,2.84,930,2.84,931,2.84,932,2.447,933,3.892,934,2.84,935,2.84,936,2.84,937,2.84,938,5.917,939,2.84,940,2.84,941,2.84,942,2.84,943,2.84,944,2.84]],["title/entities/GroupEntity.html",[148,0.326,945,2.625]],["body/entities/GroupEntity.html",[3,0.19,4,0.163,5,0.163,7,0.333,12,0.333,24,0.831,25,0.018,34,0.363,40,0.875,41,0.303,42,0.556,83,0.231,96,0.363,110,0.19,111,0.163,114,1.17,146,0.014,147,0.014,148,0.599,150,1.276,152,1.288,153,1.775,154,1.621,158,0.957,170,1.944,175,1.53,178,2.233,179,1.84,180,1.929,181,1.84,196,2.713,198,2.58,458,2.58,459,3.597,770,2.785,771,2.785,772,2.785,773,2.785,774,2.785,775,2.785,923,5.732,945,4.48,946,4.529,947,5.257,948,5.257]],["title/injectables/GroupService.html",[217,0.867,933,2.625]],["body/injectables/GroupService.html",[3,0.114,4,0.098,5,0.098,7,0.2,12,0.2,13,1.351,15,1.714,16,1.103,17,1.549,19,1.154,20,1.351,21,1.054,22,1.208,25,0.018,34,0.458,39,1.569,40,0.787,41,0.356,42,0.538,43,1.864,44,1.647,45,1.804,50,3.283,51,1.068,58,1.491,59,1.959,60,2.608,61,0.839,62,1.208,67,0.839,68,0.766,69,1.208,70,0.831,74,1.384,77,1.59,82,1.667,83,0.254,86,0.839,87,1.549,88,1.803,90,0.524,95,0.766,96,0.314,97,0.839,110,0.114,111,0.165,112,1.641,113,1.48,114,1.267,116,1.549,122,0.801,125,2.153,127,2.153,131,1.491,146,0.01,147,0.01,152,0.917,154,1.154,158,0.681,217,1.054,218,1.275,222,2.034,223,1.412,224,2.967,225,2.608,226,2.879,231,2.034,238,1.053,239,1.214,241,2.034,242,1.412,243,1.214,244,1.341,245,1.412,246,1.412,249,1.49,250,1.49,251,2.429,252,2.137,253,2.034,254,1.49,255,1.412,256,2.034,257,1.671,258,1.671,259,1.412,260,1.341,261,2.034,262,1.412,263,1.412,264,1.412,265,1.576,266,2.034,267,1.412,268,1.412,269,1.412,270,1.412,271,1.412,272,1.412,496,1.576,497,1.576,503,1.576,869,3.189,872,3.773,923,5.104,924,5.709,932,2.717,933,4.762,945,2.214,949,2.717,950,4.542,951,3.154,952,3.154,953,3.154,954,3.154,955,3.154,956,4.542,957,3.154,958,3.154]],["title/modules/HttpConfigModule.html",[273,1.44,959,2.625]],["body/modules/HttpConfigModule.html",[3,0.187,4,0.161,5,0.161,25,0.018,83,0.264,90,0.859,110,0.187,111,0.161,146,0.014,147,0.014,152,1.043,273,2.432,275,2.443,276,3.156,280,4.908,281,3.806,282,3.115,283,3.115,285,4.435,286,3.349,287,3.349,288,3.631,289,3.349,290,4.789,291,3.631,292,2.915,293,3.631,294,3.631,295,3.631,296,3.631,314,3.349,959,5.205,960,4.454,961,4.454,962,6.527,963,5.17,964,5.17,965,5.17,966,5.17,967,5.17,968,4.454,969,5.17,970,5.17]],["title/controllers/LandmarkController.html",[0,0.867,971,2.88]],["body/controllers/LandmarkController.html",[0,1.165,2,1.097,3,0.103,4,0.089,5,0.089,7,0.464,8,2.36,10,1.889,12,0.18,13,0.978,14,3.236,15,1.707,16,1.348,17,1.476,18,1.993,19,1.276,20,0.978,21,0.978,22,0.757,24,0.98,25,0.018,29,3.149,30,1.889,31,1.409,32,2.486,33,1.889,34,0.429,36,1.889,38,2.541,39,1.506,40,0.755,41,0.32,42,0.517,43,1.821,44,1.631,45,1.576,47,2.541,48,3.067,52,1.933,53,1.346,55,2.087,56,1.889,58,1.458,59,1.285,60,1.889,61,0.757,62,1.476,63,1.276,64,2.486,65,1.276,67,1.476,68,1.219,69,0.757,70,0.746,72,2.174,75,1.993,77,0.997,79,2.244,81,1.276,82,1.547,83,0.244,84,1.793,85,1.276,86,0.757,87,1.121,88,1.753,89,1.211,90,0.473,91,2.875,92,3.015,93,1.276,94,1.211,95,0.692,96,0.197,97,0.757,98,1.606,99,1.606,101,1.152,102,1.423,105,1.152,106,1.276,107,1.211,110,0.103,111,0.089,112,0.757,113,0.724,114,0.921,116,0.757,117,1.211,118,1.889,121,2.778,122,1.675,123,1.889,124,1.276,131,1.439,132,2.249,134,1.276,135,1.346,137,1.509,138,1.509,140,1.276,141,1.276,143,1.276,144,1.276,146,0.01,147,0.01,385,1.606,388,1.509,392,1.509,397,1.509,403,1.509,404,1.509,409,1.509,718,5.32,767,1.845,770,1.509,771,1.509,772,1.509,773,1.509,774,1.509,775,1.509,971,3.249,972,2.454,973,4.326,974,5.531,975,5.021,976,2.849,977,2.849,978,2.849,979,2.849,980,2.849,981,2.849,982,2.454,983,3.897,984,2.849,985,2.849,986,2.849,987,2.849,988,2.849,989,2.849,990,2.849,991,2.849,992,2.849]],["title/entities/LandmarkEntity.html",[101,1.512,148,0.326]],["body/entities/LandmarkEntity.html",[3,0.161,4,0.138,5,0.138,7,0.281,12,0.281,24,1.1,25,0.018,34,0.481,40,0.857,41,0.388,42,0.653,51,1.053,52,1.709,58,1.158,83,0.243,96,0.307,101,2.321,110,0.161,111,0.138,146,0.013,147,0.013,148,0.554,150,1.078,152,1.158,153,1.597,154,1.459,158,0.861,168,3.011,170,2.049,175,1.293,178,2.009,179,1.554,180,1.629,181,1.554,195,3.236,197,2.859,198,2.321,212,2.868,213,2.352,216,2.352,252,2.334,458,2.719,611,2.868,618,2.868,702,3.236,711,4.466,718,5.096,727,3.718,790,5.48,812,4.945,813,4.945,877,3.79,993,3.825,994,6.963,995,6.361,996,4.44,997,5.74,998,4.422,999,5.74,1000,5.74,1001,4.44,1002,3.825,1003,5.74,1004,4.44,1005,5.74,1006,4.44,1007,4.44,1008,4.44,1009,4.44]],["title/injectables/LandmarkService.html",[217,0.867,983,2.625]],["body/injectables/LandmarkService.html",[3,0.108,4,0.093,5,0.093,7,0.383,10,1.957,12,0.189,13,1.318,15,1.7,16,1.379,17,1.511,19,1.111,20,1.014,21,1.014,22,1.162,25,0.018,34,0.45,39,1.536,40,0.77,41,0.349,42,0.527,43,1.867,44,1.629,45,1.784,51,1.303,55,1.731,58,1.519,59,2.036,60,2.993,61,0.795,62,1.162,67,0.795,68,0.726,69,1.162,70,0.82,74,1.332,77,1.529,82,2.085,83,0.251,86,0.795,87,1.511,88,1.777,90,0.497,95,0.726,96,0.302,97,0.795,101,1.209,102,1.494,110,0.108,111,0.093,112,1.607,113,1.444,114,1.196,116,1.511,122,0.76,125,2.088,127,2.088,131,1.464,146,0.01,147,0.01,158,0.656,217,1.014,218,1.209,222,1.957,223,1.339,224,2.92,225,2.544,226,2.827,231,1.957,234,3.765,236,3.68,238,0.999,239,1.151,241,1.957,242,1.339,243,1.151,244,1.272,245,1.339,246,1.339,249,1.413,250,1.413,252,2.218,253,1.957,254,1.413,255,1.339,256,1.957,257,1.584,258,1.584,259,1.339,260,1.272,261,1.957,262,1.339,263,1.339,264,1.339,265,1.494,266,1.957,267,1.339,268,1.339,269,1.339,270,1.339,271,1.339,272,1.339,496,1.494,497,1.494,500,1.686,501,1.584,503,1.494,714,3.069,718,5.147,869,3.069,887,2.576,973,4.895,974,5.617,982,2.576,983,3.989,1010,2.576,1011,3.069,1012,4.37,1013,2.99,1014,2.831,1015,3.765,1016,3.367,1017,2.99,1018,4.37,1019,2.99,1020,2.99,1021,2.99,1022,4.37,1023,2.1,1024,2.831]],["title/controllers/LayerController.html",[0,0.867,1025,2.88]],["body/controllers/LayerController.html",[0,0.98,2,1.099,3,0.103,4,0.089,5,0.089,7,0.464,8,2.805,10,1.891,12,0.181,13,0.98,14,3.237,15,1.708,16,1.349,17,1.477,18,1.996,19,1.277,20,0.98,21,1.289,22,0.759,24,0.981,25,0.018,29,3.151,30,1.891,31,1.411,32,2.488,33,1.891,34,0.429,36,1.891,38,2.545,39,1.507,40,0.756,41,0.32,42,0.517,43,1.754,44,1.632,45,1.578,47,2.545,48,3.069,52,1.935,53,1.349,55,2.088,56,1.891,58,1.434,61,0.759,62,1.477,63,1.278,64,2.488,65,1.278,67,1.477,68,1.221,69,0.759,70,0.747,72,1.845,74,1.287,75,1.996,77,0.999,79,2.247,81,1.278,83,0.239,84,1.796,85,1.278,86,0.759,87,1.123,88,1.754,89,1.214,90,0.474,91,2.877,92,3.017,93,1.278,94,1.214,95,0.693,96,0.197,97,0.759,105,1.154,106,1.278,107,1.214,110,0.103,111,0.156,112,0.759,113,0.725,114,0.524,116,0.759,117,1.214,118,1.891,121,2.78,122,1.676,123,1.891,124,1.278,131,1.44,132,2.251,134,1.278,135,1.349,137,1.512,138,1.512,140,1.278,141,1.278,143,1.278,144,1.278,146,0.01,147,0.01,228,1.849,252,2.787,385,1.609,388,1.512,392,1.512,397,1.512,403,1.512,404,1.512,409,1.512,484,4.949,494,2.199,767,1.849,770,1.512,771,1.512,772,1.512,773,1.512,774,1.512,775,1.512,877,1.609,878,2.199,1025,4.28,1026,2.459,1027,4.224,1028,2.855,1029,2.855,1030,2.855,1031,4.224,1032,2.855,1033,2.855,1034,2.855,1035,3.639,1036,2.855,1037,3.347,1038,2.855,1039,3.639,1040,2.855,1041,2.855,1042,2.199,1043,2.199,1044,2.199,1045,2.199,1046,2.199,1047,2.199]],["title/entities/LayerEntity.html",[148,0.326,877,2.108]],["body/entities/LayerEntity.html",[3,0.157,4,0.135,5,0.135,7,0.274,12,0.274,24,1.156,25,0.018,34,0.506,40,0.801,41,0.422,42,0.666,51,1.036,68,1.526,70,0.801,83,0.228,96,0.299,110,0.157,111,0.135,146,0.013,147,0.013,148,0.548,150,1.052,152,1.14,153,1.571,154,1.435,158,0.847,160,3.33,167,3.184,168,2.53,170,2.274,175,1.83,176,2.61,178,1.977,179,1.516,180,1.589,181,1.516,197,2.402,252,2.599,458,3.018,536,5.415,611,2.822,702,4.124,735,3.33,754,3.337,758,4.475,877,3.184,1039,3.732,1048,3.732,1049,6.285,1050,6.285,1051,6.285,1052,5.648,1053,4.332,1054,4.332,1055,4.332,1056,4.332,1057,5.648,1058,4.332,1059,4.332,1060,4.332,1061,4.332]],["title/injectables/LayerService.html",[217,0.867,1037,2.253]],["body/injectables/LayerService.html",[3,0.106,4,0.091,5,0.091,7,0.38,10,2.523,12,0.186,13,1.307,15,1.696,16,1.241,17,1.498,19,1.096,20,1.001,21,1.455,22,1.147,25,0.018,34,0.448,39,1.525,40,0.764,41,0.346,42,0.523,43,1.944,44,1.622,45,1.777,50,3.175,51,1.298,58,1.521,59,1.911,60,2.523,61,0.781,62,1.147,67,0.781,68,0.713,69,1.147,70,0.816,72,2.067,74,1.314,77,1.51,82,2.067,83,0.25,86,0.781,87,1.498,88,1.768,90,0.488,95,0.713,96,0.298,97,0.781,110,0.106,111,0.091,112,1.595,113,1.431,114,1.22,116,1.498,122,0.746,125,2.067,127,2.067,131,1.455,146,0.01,147,0.01,154,1.096,157,2.599,158,0.647,217,1.001,218,1.188,222,1.932,223,1.316,224,2.903,225,2.523,226,2.809,231,1.932,236,4.063,238,0.981,239,1.131,241,1.932,242,1.316,243,1.131,244,1.249,245,1.316,246,1.316,249,1.388,250,1.388,252,2.774,253,1.932,254,1.388,255,1.316,256,1.932,257,1.556,258,1.556,259,1.316,260,1.249,261,1.932,262,1.316,263,2.289,264,1.316,265,1.468,266,1.932,267,1.316,268,1.316,269,1.316,270,1.316,271,1.316,272,1.316,363,3.029,484,4.994,494,2.263,496,1.468,497,1.468,500,1.656,501,1.556,503,1.468,872,2.794,877,1.656,878,2.263,886,2.531,1011,3.029,1014,2.794,1023,3.029,1024,3.311,1037,3.779,1062,2.531,1063,4.314,1064,2.938,1065,2.938,1066,2.938,1067,4.314,1068,2.938,1069,2.938,1070,4.314,1071,2.938]],["title/modules/MySqlConfigModule.html",[273,1.44,1072,2.422]],["body/modules/MySqlConfigModule.html",[3,0.184,4,0.158,5,0.158,25,0.018,51,0.931,83,0.262,90,0.844,110,0.184,111,0.194,146,0.014,147,0.014,273,2.405,275,2.399,276,3.121,280,4.891,281,3.764,282,3.059,283,3.059,285,4.386,286,3.289,287,3.289,288,3.565,289,3.289,290,4.751,291,3.565,292,2.862,293,3.565,294,3.565,295,3.565,296,3.565,314,3.289,1072,4.78,1073,4.375,1074,4.375,1075,5.817,1076,5.078,1077,5.078,1078,5.078,1079,5.078,1080,5.078,1081,5.078,1082,5.078,1083,5.078,1084,5.078,1085,5.078,1086,5.078,1087,4.375,1088,5.382,1089,4.375,1090,4.375,1091,3.565]],["title/modules/MysqlDatabaseProviderModule.html",[273,1.44,1092,2.88]],["body/modules/MysqlDatabaseProviderModule.html",[3,0.186,4,0.16,5,0.16,15,1.195,25,0.018,41,0.297,51,1.156,83,0.263,90,0.856,96,0.435,110,0.186,111,0.212,146,0.014,147,0.014,150,1.251,243,1.983,273,2.732,275,2.434,292,3.553,364,3.968,1072,4.083,1075,5.465,1090,4.438,1091,3.617,1092,5.246,1093,5.152,1094,4.438,1095,5.43,1096,5.43,1097,4.438,1098,5.152,1099,5.152,1100,4.438,1101,4.438,1102,4.438,1103,4.438,1104,5.152,1105,5.152,1106,3.337,1107,5.152,1108,3.337,1109,5.152,1110,5.152,1111,4.438,1112,5.152,1113,4.438,1114,5.152,1115,4.438,1116,4.438,1117,4.438]],["title/controllers/NotificationController.html",[0,0.867,1118,2.88]],["body/controllers/NotificationController.html",[0,1.282,2,1.087,3,0.102,4,0.088,5,0.088,7,0.463,8,1.781,10,1.876,12,0.179,13,0.972,14,3.231,15,1.705,16,1.501,17,1.469,18,1.979,19,1.269,20,0.972,21,0.972,22,0.751,24,0.977,25,0.018,29,3.143,30,1.876,31,1.399,32,2.475,33,1.876,34,0.427,36,1.876,39,1.5,40,0.752,41,0.319,42,0.515,43,1.748,44,1.628,45,1.571,48,3.061,52,1.923,53,1.334,55,2.082,56,1.876,58,1.456,61,0.751,62,1.469,63,1.264,64,2.475,65,1.264,67,1.469,68,1.213,69,0.751,70,0.744,72,2.166,74,1.276,75,1.979,77,0.988,79,2.5,81,1.264,83,0.243,84,1.781,85,1.264,86,0.751,87,1.114,88,1.748,89,1.201,90,0.469,91,2.867,92,3.008,93,1.264,94,1.201,95,0.686,96,0.195,97,0.751,105,1.142,106,1.264,107,1.201,110,0.102,111,0.088,112,0.751,113,0.717,114,0.916,116,0.751,117,1.201,118,1.876,121,2.769,122,1.671,123,1.876,124,1.264,131,1.434,132,2.237,134,1.264,135,1.334,137,1.496,138,1.496,140,1.264,141,1.264,143,1.264,144,1.264,146,0.01,147,0.01,189,2.922,252,1.537,385,1.592,388,1.496,392,1.496,397,1.496,403,1.496,404,1.496,409,1.496,763,4.636,767,1.829,768,3.227,770,1.496,771,1.496,772,1.496,773,1.496,774,1.496,775,1.496,882,1.496,883,2.175,1037,2.524,1042,2.175,1043,2.175,1044,2.175,1045,2.175,1046,2.175,1047,2.175,1118,3.227,1119,2.432,1120,5.515,1121,2.823,1122,2.823,1123,2.823,1124,4.189,1125,2.823,1126,2.823,1127,2.823,1128,2.823,1129,2.432,1130,1.496,1131,1.982,1132,2.942,1133,2.823,1134,2.432,1135,2.823]],["title/entities/NotificationEmailEntity.html",[148,0.326,1136,2.422]],["body/entities/NotificationEmailEntity.html",[3,0.169,4,0.145,5,0.145,7,0.296,12,0.296,24,1.117,25,0.018,34,0.489,41,0.408,42,0.659,58,1.314,70,0.713,83,0.215,96,0.323,110,0.169,111,0.145,146,0.013,147,0.013,148,0.568,150,1.133,152,1.196,153,1.649,158,0.889,170,1.806,175,1.359,180,1.713,189,2.826,193,2.631,197,1.985,212,2.332,213,3.14,216,2.473,458,2.396,538,5.655,611,2.961,622,3.862,702,3.341,733,4.573,734,4.573,736,3.839,743,4.161,744,4.161,746,4.218,748,4.161,749,4.161,751,3.277,752,3.277,858,3.595,860,4.565,882,3.629,1136,3.839,1137,4.021,1138,4.667,1139,4.667,1140,4.667,1141,5.106,1142,4.667,1143,4.667,1144,4.021,1145,4.667]],["title/entities/NotificationEntity.html",[148,0.326,882,1.981]],["body/entities/NotificationEntity.html",[3,0.135,4,0.116,5,0.116,7,0.236,12,0.236,24,1.117,25,0.018,31,1.243,34,0.489,40,0.901,41,0.426,42,0.659,51,0.936,70,0.614,83,0.245,96,0.257,110,0.135,111,0.116,146,0.012,147,0.012,148,0.546,150,0.904,152,1.03,153,1.42,154,1.297,158,0.766,160,3.085,168,3.251,170,1.909,171,2.613,175,1.911,176,2.242,178,1.786,179,1.303,181,1.303,189,2.762,195,3.987,196,2.884,197,3.007,198,2.742,212,2.91,238,1.705,458,1.505,611,3.131,618,1.86,619,3.775,702,2.877,727,2.411,740,3.584,770,1.972,771,1.972,772,1.972,773,1.972,774,1.972,775,1.972,806,4.397,882,2.704,998,3.931,1130,3.801,1136,3.773,1146,3.207,1147,5.103,1148,5.824,1149,5.017,1150,5.017,1151,6.565,1152,4.089,1153,3.722,1154,5.103,1155,3.722,1156,6.266,1157,5.103,1158,3.722,1159,3.722,1160,5.103,1161,3.722,1162,3.722,1163,5.656,1164,3.722,1165,4.089,1166,5.103,1167,3.722,1168,3.722,1169,3.722,1170,3.722,1171,3.722,1172,3.722]],["title/injectables/NotificationService.html",[217,0.867,1132,2.625]],["body/injectables/NotificationService.html",[3,0.096,4,0.083,5,0.083,7,0.365,12,0.169,13,1.245,15,1.669,16,0.973,17,1.427,19,1.225,20,0.93,21,1.245,22,1.066,25,0.018,34,0.434,37,2.415,39,1.463,40,0.733,41,0.332,42,0.502,43,1.864,44,1.587,45,1.738,50,2.259,51,1.235,55,1.221,58,1.518,59,2.052,60,3.104,61,0.708,62,1.066,67,0.708,68,0.646,69,1.066,70,0.795,72,1.471,74,1.635,76,4.134,77,1.403,82,1.969,83,0.254,86,0.708,87,1.427,88,1.819,90,0.442,95,0.646,96,0.277,97,0.708,110,0.096,111,0.083,112,1.718,113,1.364,114,1.151,116,1.427,122,1.018,125,2.538,127,2.612,131,1.403,146,0.009,147,0.009,154,1.018,157,2.415,158,0.601,189,2.869,217,0.93,218,1.076,222,1.795,223,1.192,224,3.222,225,2.403,226,2.709,231,1.795,236,3.476,238,0.889,239,1.025,241,1.795,242,1.192,243,1.025,244,1.132,245,1.192,246,1.192,249,1.257,250,1.257,252,1.969,253,1.795,254,1.257,255,1.192,256,1.795,257,1.41,258,1.41,259,1.192,260,1.132,261,1.795,262,1.192,263,2.811,264,1.192,265,1.33,266,1.795,267,1.192,268,1.192,269,1.192,270,1.192,271,1.192,272,1.192,363,3.768,496,1.33,497,1.33,500,1.5,501,2.123,503,1.33,867,4.623,879,1.5,880,2.05,882,1.41,883,2.05,888,2.05,1011,2.815,1014,3.476,1023,2.815,1024,3.123,1120,5.408,1129,2.293,1130,1.41,1131,1.869,1132,3.768,1136,1.724,1149,3.453,1150,3.453,1173,2.293,1174,5.366,1175,5.366,1176,4.008,1177,2.661,1178,4.134,1179,4.008,1180,2.661,1181,2.661,1182,3.453,1183,2.661,1184,2.661,1185,4.008,1186,4.008,1187,2.661,1188,2.661,1189,2.293,1190,2.661,1191,2.661,1192,4.008,1193,2.661,1194,2.661,1195,2.661,1196,2.661,1197,2.661]],["title/controllers/NotificationTemplateController.html",[0,0.867,1198,2.88]],["body/controllers/NotificationTemplateController.html",[0,1.274,2,1.073,3,0.101,4,0.087,5,0.087,7,0.462,8,1.764,9,3.196,10,1.858,12,0.177,13,0.962,14,3.224,15,1.702,16,1.494,17,1.46,18,1.961,19,1.26,20,0.962,21,0.962,22,0.741,24,0.972,25,0.018,29,3.135,30,1.858,31,1.386,32,2.459,33,1.858,34,0.425,36,1.858,39,1.492,40,0.748,41,0.317,42,0.512,43,1.742,44,1.624,45,1.564,47,2.5,48,3.051,52,1.908,53,1.317,55,2.076,56,1.858,58,1.453,59,1.264,61,0.741,62,1.46,63,1.248,64,2.459,65,1.248,67,1.46,68,1.204,69,0.741,70,0.74,72,2.154,74,1.264,77,0.975,79,2.489,81,1.248,83,0.242,84,1.764,85,1.248,86,0.741,87,1.103,88,1.742,89,1.185,90,0.463,91,2.855,92,2.998,93,1.248,94,1.185,95,0.677,96,0.193,97,0.741,98,1.571,99,1.571,105,1.127,106,1.248,107,1.185,110,0.101,111,0.087,112,0.741,113,0.708,114,0.511,116,0.741,117,1.185,118,1.858,121,2.756,122,1.664,123,1.858,124,1.248,131,1.428,132,2.22,134,1.248,135,1.317,137,1.477,138,1.477,140,1.248,141,1.248,143,1.248,144,1.248,146,0.009,147,0.009,189,2.937,385,1.571,388,1.477,392,1.477,397,1.477,403,1.477,404,1.477,409,1.477,763,4.869,767,1.805,768,3.818,770,1.477,771,1.477,772,1.477,773,1.477,774,1.477,775,1.477,1037,2.5,1042,2.147,1043,2.147,1044,2.147,1045,2.147,1046,2.147,1047,2.147,1130,1.477,1131,1.957,1134,2.401,1198,4.23,1199,2.401,1200,5.492,1201,2.787,1202,2.787,1203,2.787,1204,2.787,1205,2.787,1206,2.787,1207,2.401,1208,2.914,1209,2.787,1210,2.787]],["title/entities/NotificationTemplateEntity.html",[148,0.326,1130,1.981]],["body/entities/NotificationTemplateEntity.html",[3,0.178,4,0.153,5,0.153,7,0.311,12,0.311,24,1.053,25,0.018,34,0.461,40,0.849,41,0.384,42,0.638,51,1.122,83,0.221,84,2.834,96,0.339,110,0.178,111,0.153,146,0.014,147,0.014,148,0.581,150,1.192,152,1.235,153,1.702,154,1.555,158,0.918,170,2.23,175,1.43,178,2.141,179,1.718,180,1.802,181,1.718,189,2.818,196,3.112,198,2.96,458,2.821,618,3.057,702,3.933,763,4.52,1130,3.241,1211,4.23,1212,6.665,1213,6.119,1214,4.91,1215,4.91,1216,4.91,1217,4.91]],["title/injectables/NotificationTemplateService.html",[217,0.867,1208,2.625]],["body/injectables/NotificationTemplateService.html",[3,0.101,4,0.087,5,0.087,7,0.372,8,1.768,12,0.177,13,0.965,15,1.702,16,1.335,17,1.462,19,1.666,20,1.276,21,1.276,22,1.106,25,0.018,34,0.453,39,1.566,40,0.785,41,0.355,42,0.537,43,1.915,44,1.625,45,1.78,50,3.1,51,1.31,55,1.675,58,1.513,59,2.177,60,2.936,61,1.106,62,1.462,67,0.743,68,1.335,69,1.106,70,0.806,72,1.526,74,1.267,77,1.455,79,1.682,82,2.018,83,0.247,86,0.743,87,1.462,88,1.743,90,0.465,95,0.679,96,0.287,97,0.743,110,0.101,111,0.171,112,1.563,113,1.397,114,1.269,116,1.462,122,0.71,125,2.008,127,2.008,131,1.429,146,0.009,147,0.009,157,3.313,158,0.624,189,2.903,217,0.965,218,1.13,222,1.862,223,1.252,224,2.857,225,2.463,226,2.759,231,1.862,238,0.934,239,1.076,241,1.862,242,1.252,243,1.076,244,1.189,245,1.252,246,1.252,249,1.321,250,1.321,252,2.018,253,1.862,254,1.321,255,1.252,256,1.862,257,1.481,258,1.481,259,1.252,260,1.189,261,1.862,262,1.252,263,2.224,264,1.252,266,1.862,267,1.252,268,1.252,269,1.252,270,1.252,271,1.252,272,1.252,490,3.203,496,1.397,497,1.397,500,1.576,501,1.481,503,1.397,763,3.217,872,3.562,1014,2.694,1016,3.203,1023,1.963,1024,1.811,1130,1.481,1131,1.963,1178,3.203,1189,2.408,1200,5.497,1207,2.408,1208,2.92,1218,2.408,1219,4.158,1220,4.158,1221,4.158,1222,2.795,1223,2.795,1224,2.795,1225,2.795,1226,4.158,1227,2.795,1228,5.499,1229,2.795,1230,4.158]],["title/entities/NotificationUserEntity.html",[148,0.326,1165,2.625]],["body/entities/NotificationUserEntity.html",[3,0.164,4,0.14,5,0.14,7,0.286,12,0.286,24,1.106,25,0.018,34,0.484,40,0.74,41,0.404,42,0.655,51,1.065,58,1.413,70,0.698,83,0.232,96,0.312,110,0.164,111,0.14,146,0.013,147,0.013,148,0.59,150,1.097,152,1.171,153,1.615,154,1.475,158,0.871,168,2.023,189,2.871,193,2.547,195,3.272,197,1.921,212,2.9,213,3.075,216,2.394,414,4.155,611,2.9,622,3.815,727,3.76,733,4.503,734,4.503,736,3.76,743,4.076,744,4.076,746,4.155,748,4.076,749,4.076,751,3.173,752,3.173,858,3.48,860,4.471,879,3.815,882,3.586,998,3.48,1002,3.893,1141,5.001,1144,3.893,1165,4.076,1231,3.893,1232,4.518,1233,4.518,1234,4.518,1235,4.518,1236,4.518,1237,4.518,1238,4.518]],["title/modules/PostgresDatabaseProviderModule.html",[273,1.44,336,2.422]],["body/modules/PostgresDatabaseProviderModule.html",[3,0.185,4,0.159,5,0.159,7,0.323,15,1.184,25,0.018,41,0.294,51,1.244,83,0.263,90,0.849,96,0.353,110,0.185,111,0.211,146,0.014,147,0.014,150,1.24,243,1.965,273,2.723,275,2.412,292,3.533,336,4.394,364,3.933,1091,3.585,1094,5.4,1095,5.4,1096,5.4,1097,4.398,1100,4.398,1101,4.398,1102,4.398,1103,4.398,1106,3.307,1108,3.307,1111,4.398,1113,4.398,1115,4.398,1116,4.398,1117,4.398,1239,5.105,1240,4.06,1241,5.105,1242,5.225,1243,5.105,1244,5.105,1245,5.4,1246,5.105,1247,5.105,1248,5.105,1249,5.105,1250,5.105,1251,5.105,1252,5.105,1253,5.105]],["title/modules/PostgresSQLConfigModule.html",[273,1.44,1240,2.422]],["body/modules/PostgresSQLConfigModule.html",[3,0.183,4,0.158,5,0.158,25,0.018,51,0.93,83,0.262,90,0.842,110,0.183,111,0.194,146,0.014,147,0.014,273,2.402,275,2.395,276,3.118,280,4.89,281,3.76,282,3.054,283,3.054,285,4.382,286,3.283,287,3.283,288,3.559,289,3.283,290,4.747,291,3.559,292,2.857,293,3.559,294,3.559,295,3.559,296,3.559,314,3.283,1087,4.367,1088,5.376,1089,4.367,1091,3.559,1240,4.778,1242,5.815,1245,4.367,1254,4.367,1255,4.367,1256,5.069,1257,5.069,1258,5.069,1259,5.069,1260,5.069,1261,5.069,1262,5.069,1263,5.069,1264,5.069,1265,5.069,1266,5.069,1267,5.069]],["title/controllers/UserController.html",[0,0.867,1268,2.88]],["body/controllers/UserController.html",[0,0.895,2,0.974,3,0.092,4,0.079,5,0.079,7,0.463,8,2.705,10,1.728,12,0.16,13,0.895,14,3.237,15,1.703,16,1.27,17,1.391,18,1.823,19,1.188,20,0.895,21,1.213,22,0.673,24,1.005,25,0.018,29,3.168,30,1.728,31,1.289,32,2.342,33,1.728,34,0.44,36,1.728,38,2.324,39,1.568,40,0.786,41,0.367,42,0.538,43,1.691,44,1.654,45,1.508,48,3.107,51,0.959,52,2.013,53,1.196,55,2.173,56,1.728,58,1.315,59,1.593,60,1.728,61,0.673,62,1.391,63,1.133,64,2.342,65,1.133,67,1.391,68,1.135,69,0.673,70,0.677,72,1.716,74,1.593,75,2.471,79,2.115,81,1.728,83,0.241,84,1.076,85,1.133,86,0.673,87,1.026,88,1.691,89,1.076,90,0.421,91,2.848,92,2.977,93,1.133,94,1.076,95,0.614,96,0.175,97,0.673,101,1.023,102,1.264,105,1.023,106,1.133,107,1.076,110,0.092,111,0.145,112,0.673,113,0.643,114,1.033,117,1.076,118,1.728,119,1.525,121,2.763,122,1.656,123,1.728,124,1.133,131,1.475,132,2.342,134,1.133,135,1.196,140,1.133,141,1.133,143,1.133,144,1.133,146,0.009,147,0.009,154,0.98,385,1.426,388,1.341,392,1.341,397,1.341,399,1.525,400,1.949,403,1.341,404,1.341,409,1.341,414,4.885,419,2.18,420,2.18,1035,3.324,1152,4.332,1268,4.029,1269,2.18,1270,3.858,1271,3.324,1272,5.316,1273,4.676,1274,2.53,1275,2.53,1276,2.53,1277,2.53,1278,3.672,1279,3.858,1280,2.53,1281,3.324,1282,2.53,1283,2.53,1284,4.337,1285,2.53,1286,2.53,1287,2.53,1288,2.53,1289,5.316,1290,2.53,1291,4.029,1292,2.53,1293,2.53,1294,1.949,1295,2.18,1296,2.18,1297,3.283,1298,2.53,1299,2.53,1300,2.53,1301,2.53,1302,2.53,1303,2.53,1304,2.53,1305,2.53,1306,2.53,1307,2.53,1308,2.53,1309,2.53,1310,2.53,1311,2.53,1312,2.53,1313,2.53,1314,2.53,1315,2.53,1316,2.53,1317,2.53]],["title/entities/UserEntity.html",[148,0.326,879,2.108]],["body/entities/UserEntity.html",[3,0.162,4,0.139,5,0.139,7,0.283,12,0.283,24,1.102,25,0.018,31,1.492,34,0.482,41,0.412,42,0.654,51,1.057,59,1.756,70,0.693,83,0.231,96,0.309,110,0.162,111,0.139,146,0.013,147,0.013,148,0.556,150,1.085,152,1.163,153,1.875,154,1.464,158,0.865,160,3.38,167,3.249,168,2.581,170,2.177,175,1.962,178,2.017,179,1.564,180,1.64,181,1.564,196,3.038,198,2.889,238,1.925,458,2.889,459,4.027,618,2.232,619,4.061,770,2.367,771,2.367,772,2.367,773,2.367,774,2.367,775,2.367,879,3.249,1106,4.133,1108,4.133,1152,4.899,1278,4.899,1284,4.914,1294,3.442,1318,3.85,1319,6.38,1320,4.468,1321,4.468,1322,4.468,1323,4.468,1324,4.468,1325,4.468]],["title/entities/UserLogin.html",[148,0.326,1326,2.88]],["body/entities/UserLogin.html",[3,0.178,4,0.153,5,0.153,7,0.311,12,0.311,15,1.139,24,1.053,25,0.018,34,0.461,41,0.384,45,1.248,51,1.122,58,1.345,70,0.802,83,0.178,96,0.339,110,0.178,111,0.153,114,1.223,131,1.139,146,0.014,147,0.014,148,0.608,150,1.192,152,1.235,153,1.702,154,1.555,158,0.918,170,2.23,175,2.161,260,2.088,348,3.782,736,3.181,746,4.318,1106,4.318,1108,4.318,1291,5.638,1326,4.713,1327,4.23,1328,4.91,1329,4.91,1330,4.91,1331,4.91,1332,4.91,1333,4.91,1334,4.91,1335,4.91,1336,4.91,1337,4.91]],["title/injectables/UserService.html",[217,0.867,1297,2.625]],["body/injectables/UserService.html",[3,0.085,4,0.073,5,0.073,7,0.381,12,0.149,13,1.168,15,1.708,16,1.399,17,1.339,19,1.579,20,1.168,21,1.168,22,0.97,25,0.018,34,0.45,37,3.033,38,2.199,39,1.579,40,0.792,41,0.383,42,0.542,43,1.652,44,1.657,45,1.755,51,1.31,52,0.906,55,2.054,58,1.459,59,1.893,60,2.255,61,0.97,62,1.533,67,0.626,68,0.886,69,0.97,70,0.747,72,1.339,79,2.036,82,1.847,83,0.244,86,0.626,87,1.339,88,1.765,90,0.391,95,0.571,96,0.252,97,0.626,110,0.085,111,0.156,112,1.449,113,1.279,114,1.236,116,1.339,122,1.384,125,2.431,127,2.203,131,1.441,146,0.008,147,0.008,153,1.015,157,2.199,158,0.547,217,0.846,218,0.952,222,1.634,223,1.054,224,2.693,225,2.255,226,2.581,228,2.364,231,1.634,236,1.525,238,0.786,239,0.906,241,2.001,242,1.054,243,0.906,244,1.001,245,1.054,246,1.054,249,1.112,250,1.724,252,1.847,253,1.634,254,1.112,255,1.054,256,1.634,259,1.054,260,1.001,261,2.255,262,1.634,263,2.581,264,1.054,266,1.634,267,1.054,268,1.054,269,1.054,270,1.054,271,1.054,272,1.054,321,3.144,363,2.562,399,2.199,414,4.968,490,1.813,496,1.176,497,1.176,500,1.327,501,1.933,502,1.813,503,1.176,563,2.811,872,3.734,879,1.327,880,1.813,888,1.813,968,3.144,1011,2.562,1014,3.261,1016,3.878,1024,1.525,1106,1.525,1108,2.364,1152,3.535,1178,2.811,1182,5.353,1271,4.337,1272,5.719,1278,3.535,1281,4.337,1284,4.44,1289,4.337,1291,4.44,1294,1.813,1295,2.028,1296,2.028,1297,3.138,1338,2.028,1339,3.649,1340,3.649,1341,3.649,1342,2.354,1343,3.649,1344,3.649,1345,2.354,1346,3.649,1347,3.649,1348,2.354,1349,2.354,1350,3.649,1351,2.354,1352,2.354,1353,3.649,1354,3.144,1355,2.354,1356,3.649,1357,2.354,1358,3.649,1359,3.649,1360,3.649,1361,3.649,1362,2.354,1363,2.354,1364,2.354,1365,2.354,1366,2.354,1367,2.354,1368,2.354,1369,2.354,1370,2.354,1371,2.354,1372,2.354]],["title/coverage.html",[1373,4.41]],["body/coverage.html",[0,1.722,1,2.952,5,0.119,6,3.302,25,0.018,41,0.221,101,1.55,103,2.483,114,0.703,146,0.012,147,0.012,148,0.672,149,2.483,151,3.302,155,2.952,162,2.691,182,3.302,217,1.722,219,3.302,319,2.691,320,3.302,322,2.309,371,3.302,380,2.952,381,3.302,406,2.691,424,2.309,425,3.302,459,4.429,480,3.302,507,2.952,508,3.302,523,2.691,534,2.483,535,3.302,547,3.302,558,2.952,559,3.302,571,2.309,573,2.691,578,3.302,590,3.302,608,2.691,631,3.302,644,2.691,645,3.302,675,2.691,697,3.302,711,2.691,712,3.302,729,2.483,730,3.302,735,2.031,756,2.952,757,3.302,778,2.691,788,3.302,828,2.483,853,3.302,864,3.302,877,2.161,879,2.161,882,2.031,921,2.952,922,3.302,933,2.691,945,2.691,946,3.302,949,3.302,971,2.952,972,3.302,983,2.691,993,3.302,1010,3.302,1025,2.952,1026,3.302,1037,2.309,1048,3.302,1062,3.302,1118,2.952,1119,3.302,1130,2.031,1132,2.691,1136,2.483,1137,3.302,1146,3.302,1165,2.691,1173,3.302,1198,2.952,1199,3.302,1208,2.691,1211,3.302,1218,3.302,1231,3.302,1268,2.952,1269,3.302,1297,2.691,1318,3.302,1326,2.952,1327,3.302,1338,3.302,1373,3.302,1374,3.302,1375,3.833,1376,3.833,1377,5.207,1378,7.3,1379,3.833,1380,7.706,1381,7.121,1382,7.121,1383,5.207,1384,5.207,1385,3.833,1386,3.833,1387,3.833]],["title/dependencies.html",[276,2.249,1388,2.683]],["body/dependencies.html",[19,1.272,25,0.018,90,0.832,94,2.129,95,1.215,96,0.428,111,0.192,146,0.014,147,0.014,243,1.927,276,2.501,286,3.243,287,3.243,289,3.243,347,4.313,348,4.77,1389,5.006,1390,5.006,1391,5.006,1392,6.723,1393,5.006,1394,5.006,1395,5.006,1396,5.006,1397,5.006,1398,5.335,1399,5.006,1400,5.006,1401,5.006,1402,5.006,1403,6.192,1404,5.006,1405,5.006,1406,5.006,1407,5.006,1408,5.006,1409,5.006,1410,5.006,1411,5.006,1412,5.006,1413,5.006,1414,5.006,1415,5.006,1416,6.192,1417,5.006,1418,6.192,1419,5.006,1420,5.006,1421,5.006,1422,5.006,1423,6.723,1424,5.006,1425,5.006,1426,5.006,1427,5.006,1428,5.006,1429,5.006,1430,5.006,1431,5.006,1432,5.006,1433,5.006,1434,5.006,1435,5.006,1436,5.006,1437,5.006,1438,5.006,1439,5.006,1440,5.006]],["title/miscellaneous/enumerations.html",[1441,2.683,1442,3.878]],["body/miscellaneous/enumerations.html",[12,0.299,25,0.018,41,0.409,122,1.198,146,0.014,147,0.014,152,1.32,189,1.815,190,5.138,239,3.021,244,2.536,326,5.138,414,4.238,538,4.594,560,3.31,617,4.594,619,4.485,798,4.061,809,5.138,831,5.138,833,5.138,869,4.594,1163,5.138,1278,4.188,1354,5.138,1441,4.061,1442,4.061,1443,5.964,1444,4.714,1445,4.714,1446,4.714,1447,4.714,1448,4.714,1449,5.964,1450,4.714,1451,4.714,1452,4.714,1453,4.714,1454,4.714,1455,4.714,1456,6.875,1457,6.875,1458,5.964,1459,4.714,1460,5.964,1461,4.714,1462,5.964,1463,4.714,1464,4.714,1465,5.964,1466,5.964,1467,5.964,1468,4.714,1469,4.714,1470,5.964,1471,5.964,1472,5.964,1473,4.714]],["title/index.html",[12,0.197,1474,3.114,1475,3.114]],["body/index.html",[4,0.116,16,0.908,25,0.015,114,0.939,146,0.012,147,0.012,276,1.869,303,3.223,304,5.031,317,5.991,318,4.413,357,3.223,362,3.223,378,3.223,1015,5.852,1374,3.223,1398,3.223,1476,5.84,1477,3.742,1478,5.84,1479,7.688,1480,3.742,1481,3.742,1482,3.742,1483,7.081,1484,3.742,1485,3.742,1486,5.84,1487,5.84,1488,3.742,1489,5.122,1490,6.578,1491,5.122,1492,3.742,1493,5.122,1494,3.742,1495,6.792,1496,3.742,1497,3.742,1498,3.742,1499,6.578,1500,3.742,1501,6.28,1502,3.742,1503,5.122,1504,3.742,1505,3.742,1506,6.792,1507,6.792,1508,6.954,1509,3.742,1510,3.742,1511,5.122,1512,3.742,1513,3.742,1514,3.742,1515,3.742,1516,3.742,1517,3.742,1518,3.742,1519,3.742,1520,3.742,1521,3.742,1522,6.954,1523,5.122,1524,7.266,1525,5.84,1526,3.742,1527,5.84,1528,5.122,1529,3.742,1530,3.742,1531,5.122,1532,3.742,1533,3.742,1534,3.742,1535,3.742,1536,3.742,1537,3.742,1538,5.122,1539,3.742,1540,3.742,1541,3.742,1542,3.742,1543,5.84,1544,3.742,1545,5.84,1546,3.742,1547,3.742,1548,5.122,1549,3.742,1550,3.742,1551,3.742,1552,3.742,1553,3.742,1554,3.742,1555,3.742,1556,5.84,1557,6.792,1558,6.28,1559,5.122,1560,3.742,1561,3.742,1562,5.122,1563,6.792,1564,3.742,1565,3.742,1566,3.742,1567,3.742,1568,4.413,1569,3.742,1570,3.742,1571,3.742,1572,3.742,1573,5.122,1574,5.122,1575,5.84,1576,6.28,1577,5.122,1578,3.742,1579,3.742,1580,3.742,1581,3.742,1582,3.742,1583,3.742,1584,3.742,1585,3.742,1586,3.742,1587,3.742,1588,3.742,1589,3.742,1590,5.122,1591,3.742,1592,3.742,1593,3.742,1594,3.742,1595,3.742,1596,3.742,1597,3.742,1598,3.742,1599,3.742,1600,3.742,1601,3.742,1602,3.742,1603,3.742,1604,3.742,1605,3.742,1606,3.742,1607,3.742,1608,3.742,1609,3.742,1610,3.742,1611,3.742,1612,3.742,1613,3.742]],["title/modules.html",[275,2.419]],["body/modules.html",[25,0.015,146,0.015,147,0.015,274,3.716,275,2.71,332,4.028,336,3.716,959,4.028,1072,3.716,1092,4.419,1240,3.716,1568,5.791,1614,7.494,1615,7.494,1616,7.494,1617,7.662,1618,6.722]],["title/overview.html",[1619,4.41]],["body/overview.html",[2,1.969,25,0.018,146,0.014,147,0.014,150,1.242,218,2.068,274,4.705,275,2.417,276,3.135,277,4.406,278,4.406,279,6.097,280,4.966,281,3.78,282,3.081,283,3.081,322,4.09,332,5.309,333,4.406,334,4.406,335,4.406,336,4.397,959,4.97,960,4.406,961,4.406,962,6.097,1072,4.585,1073,4.406,1074,4.406,1075,5.452,1240,4.585,1242,5.452,1254,4.406,1255,4.406,1619,4.406,1620,5.114,1621,6.275,1622,5.114]],["title/properties.html",[158,0.675,1388,2.683]],["body/properties.html",[25,0.017,105,2.454,146,0.016,147,0.016,158,0.91,1623,6.069,1624,6.069,1625,6.069]]],"invertedIndex":[["",{"_index":25,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0.0.0",{"_index":1623,"title":{},"body":{"properties.html":{}}}],["0.0.6",{"_index":1391,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1433,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1413,"title":{},"body":{"dependencies.html":{}}}],["0.2.44",{"_index":1440,"title":{},"body":{"dependencies.html":{}}}],["0.40.0",{"_index":1415,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1411,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1424,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":106,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["1.0.0",{"_index":1428,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":1393,"title":{},"body":{"dependencies.html":{}}}],["1.3.0",{"_index":1409,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1380,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1587,"title":{},"body":{"index.html":{}}}],["10/11",{"_index":1386,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":459,"title":{},"body":{"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GroupEntity.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["12",{"_index":1621,"title":{},"body":{"overview.html":{}}}],["128",{"_index":172,"title":{},"body":{"entities/AplEntity.html":{}}}],["16",{"_index":1005,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["17.1.1",{"_index":1389,"title":{},"body":{"dependencies.html":{}}}],["17.6.0",{"_index":1419,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":468,"title":{},"body":{"entities/AssetEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceEntity.html":{}}}],["2.0.0",{"_index":1439,"title":{},"body":{"dependencies.html":{}}}],["2.2.2",{"_index":1399,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":1421,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1377,"title":{},"body":{"coverage.html":{}}}],["21",{"_index":1622,"title":{},"body":{"overview.html":{}}}],["3",{"_index":835,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["3.1.0",{"_index":1406,"title":{},"body":{"dependencies.html":{}}}],["3.1.3",{"_index":1422,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":1426,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":1437,"title":{},"body":{"dependencies.html":{}}}],["4.5.0",{"_index":1417,"title":{},"body":{"dependencies.html":{}}}],["403",{"_index":29,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["5.0.0",{"_index":1403,"title":{},"body":{"dependencies.html":{}}}],["5.2.0",{"_index":1400,"title":{},"body":{"dependencies.html":{}}}],["512",{"_index":1052,"title":{},"body":{"entities/LayerEntity.html":{}}}],["6",{"_index":466,"title":{},"body":{"entities/AssetEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceEntity.html":{}}}],["64",{"_index":702,"title":{},"body":{"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{}}}],["7",{"_index":1620,"title":{},"body":{"overview.html":{}}}],["7.0.0",{"_index":1435,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1378,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":1382,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":1392,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":1401,"title":{},"body":{"dependencies.html":{}}}],["8.8.0",{"_index":1430,"title":{},"body":{"dependencies.html":{}}}],["8/9",{"_index":1384,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":1381,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":1383,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":1396,"title":{},"body":{"dependencies.html":{}}}],["9/9",{"_index":1379,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1385,"title":{},"body":{"coverage.html":{}}}],["_",{"_index":496,"title":{},"body":{"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["_.omit(data",{"_index":503,"title":{},"body":{"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["_.omit(o",{"_index":893,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["_.result(data,'id',0",{"_index":502,"title":{},"body":{"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/UserService.html":{}}}],["a.geofence_id",{"_index":909,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["above",{"_index":1528,"title":{},"body":{"index.html":{}}}],["account",{"_index":1281,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["accounttype",{"_index":1284,"title":{},"body":{"controllers/UserController.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["active",{"_index":1470,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["actualarrivaltime",{"_index":648,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["actualdeparturetime",{"_index":649,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["add",{"_index":1491,"title":{},"body":{"index.html":{}}}],["adding",{"_index":1485,"title":{},"body":{"index.html":{}}}],["address",{"_index":536,"title":{},"body":{"entities/CustomerEntity.html":{},"entities/LayerEntity.html":{}}}],["advanced",{"_index":1604,"title":{},"body":{"index.html":{}}}],["advantage",{"_index":1597,"title":{},"body":{"index.html":{}}}],["affected",{"_index":1562,"title":{},"body":{"index.html":{}}}],["affected:e2e",{"_index":1566,"title":{},"body":{"index.html":{}}}],["affected:test",{"_index":1561,"title":{},"body":{"index.html":{}}}],["age",{"_index":1335,"title":{},"body":{"entities/UserLogin.html":{}}}],["aircraftid",{"_index":592,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["aircraftmodel",{"_index":650,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["alias",{"_index":426,"title":{},"body":{"entities/AssetEntity.html":{}}}],["all_groups",{"_index":948,"title":{},"body":{"entities/GroupEntity.html":{}}}],["alongside",{"_index":1602,"title":{},"body":{"index.html":{}}}],["alpha.3",{"_index":1404,"title":{},"body":{"dependencies.html":{}}}],["altitude",{"_index":593,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{}}}],["angular",{"_index":1514,"title":{},"body":{"index.html":{}}}],["api",{"_index":74,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{}}}],["apioperation",{"_index":91,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary:'for",{"_index":1312,"title":{},"body":{"controllers/UserController.html":{}}}],["apiresponse",{"_index":92,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["apiresponse({status:403",{"_index":1314,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags",{"_index":93,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["apitags('apl",{"_index":109,"title":{},"body":{"controllers/AplController.html":{}}}],["apitags('assets",{"_index":408,"title":{},"body":{"controllers/AssetController.html":{}}}],["apitags('customer",{"_index":525,"title":{},"body":{"controllers/CustomerController.html":{}}}],["apitags('event",{"_index":575,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["apitags('geofence",{"_index":780,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["apitags('groups",{"_index":936,"title":{},"body":{"controllers/GroupController.html":{}}}],["apitags('landmarks",{"_index":985,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["apitags('layers",{"_index":1040,"title":{},"body":{"controllers/LayerController.html":{}}}],["apitags('notification",{"_index":1134,"title":{},"body":{"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["apitags('users",{"_index":1299,"title":{},"body":{"controllers/UserController.html":{}}}],["apl",{"_index":11,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{}}}],["apl'})@apiresponse({status",{"_index":28,"title":{},"body":{"controllers/AplController.html":{}}}],["apl.aplitems",{"_index":194,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apl.entity",{"_index":214,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apl.item.entity",{"_index":177,"title":{},"body":{"entities/AplEntity.html":{}}}],["apl_id",{"_index":200,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apl_items",{"_index":183,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["aplcontroller",{"_index":1,"title":{"controllers/AplController.html":{}},"body":{"controllers/AplController.html":{},"coverage.html":{}}}],["apldto",{"_index":23,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{}}}],["aplentity",{"_index":149,"title":{"entities/AplEntity.html":{}},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"coverage.html":{}}}],["aplitementity",{"_index":162,"title":{"entities/AplItemEntity.html":{}},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"coverage.html":{}}}],["aplitems",{"_index":159,"title":{},"body":{"entities/AplEntity.html":{}}}],["aplservice",{"_index":103,"title":{"injectables/AplService.html":{}},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/EventDetailController.html":{},"coverage.html":{}}}],["app",{"_index":317,"title":{},"body":{"modules/AppConfigModule.html":{},"index.html":{}}}],["app.controller",{"_index":350,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":328,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.test",{"_index":309,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["app_env",{"_index":300,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["app_name",{"_index":297,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["app_port",{"_index":310,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["app_url",{"_index":307,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["appconfigmodule",{"_index":274,"title":{"modules/AppConfigModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appconfigservice",{"_index":279,"title":{},"body":{"modules/AppConfigModule.html":{},"overview.html":{}}}],["appcontroller",{"_index":319,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1523,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1495,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":332,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps/.../confirmenum.ts",{"_index":1444,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/.../event.severity.enum.ts",{"_index":1445,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/.../notification.type.enum.ts",{"_index":1446,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/.../notify.enum.ts",{"_index":1447,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/.../packet.type.enum.ts",{"_index":1448,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/.../severity.enum.ts",{"_index":1450,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/.../status.enum.ts",{"_index":1451,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/.../user.type.enum.ts",{"_index":1452,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/starnavigationapi/src/app/app.controller.ts",{"_index":320,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/app.controller.ts:20",{"_index":325,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/starnavigationapi/src/app/app.module.ts",{"_index":337,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/starnavigationapi/src/app/app.module.ts:34",{"_index":341,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/starnavigationapi/src/app/app.service.ts",{"_index":371,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/app.service.ts:13",{"_index":373,"title":{},"body":{"injectables/AppService.html":{}}}],["apps/starnavigationapi/src/app/config/app/config.module.ts",{"_index":284,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["apps/starnavigationapi/src/app/config/database/mysql/config.module.ts",{"_index":1076,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["apps/starnavigationapi/src/app/config/database/postgres/config.module.ts",{"_index":1256,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["apps/starnavigationapi/src/app/config/http/config.module.ts",{"_index":963,"title":{},"body":{"modules/HttpConfigModule.html":{}}}],["apps/starnavigationapi/src/app/enum/confirmenum.ts",{"_index":1453,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/starnavigationapi/src/app/enum/event.severity.enum.ts",{"_index":1455,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/starnavigationapi/src/app/enum/notification.type.enum.ts",{"_index":1459,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/starnavigationapi/src/app/enum/notify.enum.ts",{"_index":1461,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/starnavigationapi/src/app/enum/packet.type.enum.ts",{"_index":1463,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/starnavigationapi/src/app/enum/severity.enum.ts",{"_index":1468,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/starnavigationapi/src/app/enum/status.enum.ts",{"_index":1469,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/starnavigationapi/src/app/enum/user.type.enum.ts",{"_index":1473,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts",{"_index":6,"title":{},"body":{"controllers/AplController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:110",{"_index":66,"title":{},"body":{"controllers/AplController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:39",{"_index":35,"title":{},"body":{"controllers/AplController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:54",{"_index":49,"title":{},"body":{"controllers/AplController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:68",{"_index":57,"title":{},"body":{"controllers/AplController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:84",{"_index":80,"title":{},"body":{"controllers/AplController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:98",{"_index":73,"title":{},"body":{"controllers/AplController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts",{"_index":381,"title":{},"body":{"controllers/AssetController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:103",{"_index":398,"title":{},"body":{"controllers/AssetController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:115",{"_index":396,"title":{},"body":{"controllers/AssetController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:40",{"_index":387,"title":{},"body":{"controllers/AssetController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:52",{"_index":389,"title":{},"body":{"controllers/AssetController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:76",{"_index":394,"title":{},"body":{"controllers/AssetController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:90",{"_index":401,"title":{},"body":{"controllers/AssetController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts",{"_index":508,"title":{},"body":{"controllers/CustomerController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:106",{"_index":517,"title":{},"body":{"controllers/CustomerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:42",{"_index":512,"title":{},"body":{"controllers/CustomerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:54",{"_index":513,"title":{},"body":{"controllers/CustomerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:67",{"_index":516,"title":{},"body":{"controllers/CustomerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:81",{"_index":519,"title":{},"body":{"controllers/CustomerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:94",{"_index":518,"title":{},"body":{"controllers/CustomerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts",{"_index":559,"title":{},"body":{"controllers/EventDetailController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:102",{"_index":568,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:114",{"_index":567,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:42",{"_index":564,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:57",{"_index":565,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:71",{"_index":566,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:87",{"_index":569,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts",{"_index":757,"title":{},"body":{"controllers/GeofenceController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:109",{"_index":765,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:41",{"_index":761,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:54",{"_index":762,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:68",{"_index":764,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:84",{"_index":769,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:97",{"_index":766,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts",{"_index":922,"title":{},"body":{"controllers/GroupController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:109",{"_index":929,"title":{},"body":{"controllers/GroupController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:40",{"_index":926,"title":{},"body":{"controllers/GroupController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:53",{"_index":927,"title":{},"body":{"controllers/GroupController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:67",{"_index":928,"title":{},"body":{"controllers/GroupController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:83",{"_index":931,"title":{},"body":{"controllers/GroupController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:97",{"_index":930,"title":{},"body":{"controllers/GroupController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts",{"_index":972,"title":{},"body":{"controllers/LandmarkController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:108",{"_index":979,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:42",{"_index":976,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:54",{"_index":977,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:67",{"_index":978,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:83",{"_index":981,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:96",{"_index":980,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts",{"_index":1026,"title":{},"body":{"controllers/LayerController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:106",{"_index":1033,"title":{},"body":{"controllers/LayerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:40",{"_index":1028,"title":{},"body":{"controllers/LayerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:52",{"_index":1030,"title":{},"body":{"controllers/LayerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:66",{"_index":1032,"title":{},"body":{"controllers/LayerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:81",{"_index":1036,"title":{},"body":{"controllers/LayerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:94",{"_index":1034,"title":{},"body":{"controllers/LayerController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts",{"_index":1119,"title":{},"body":{"controllers/NotificationController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:107",{"_index":1126,"title":{},"body":{"controllers/NotificationController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:42",{"_index":1122,"title":{},"body":{"controllers/NotificationController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:54",{"_index":1123,"title":{},"body":{"controllers/NotificationController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:67",{"_index":1125,"title":{},"body":{"controllers/NotificationController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:82",{"_index":1128,"title":{},"body":{"controllers/NotificationController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:95",{"_index":1127,"title":{},"body":{"controllers/NotificationController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts",{"_index":1199,"title":{},"body":{"controllers/NotificationTemplateController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:104",{"_index":1204,"title":{},"body":{"controllers/NotificationTemplateController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:39",{"_index":1201,"title":{},"body":{"controllers/NotificationTemplateController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:51",{"_index":1202,"title":{},"body":{"controllers/NotificationTemplateController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:64",{"_index":1203,"title":{},"body":{"controllers/NotificationTemplateController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:79",{"_index":1206,"title":{},"body":{"controllers/NotificationTemplateController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:92",{"_index":1205,"title":{},"body":{"controllers/NotificationTemplateController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts",{"_index":1269,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:104",{"_index":1286,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:116",{"_index":1285,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:128",{"_index":1293,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:37",{"_index":1274,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:49",{"_index":1275,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:63",{"_index":1276,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:76",{"_index":1283,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:90",{"_index":1287,"title":{},"body":{"controllers/UserController.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts",{"_index":151,"title":{},"body":{"entities/AplEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts:13",{"_index":173,"title":{},"body":{"entities/AplEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts:15",{"_index":169,"title":{},"body":{"entities/AplEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts:17",{"_index":174,"title":{},"body":{"entities/AplEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts:19",{"_index":166,"title":{},"body":{"entities/AplEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts",{"_index":182,"title":{},"body":{"entities/AplItemEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:13",{"_index":207,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:15",{"_index":211,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:17",{"_index":206,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:19",{"_index":205,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:21",{"_index":210,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:23",{"_index":202,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:25",{"_index":204,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:27",{"_index":208,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:29",{"_index":209,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:32",{"_index":201,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts",{"_index":425,"title":{},"body":{"entities/AssetEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:12",{"_index":460,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:14",{"_index":477,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:16",{"_index":457,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:18",{"_index":453,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:20",{"_index":454,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:22",{"_index":447,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:24",{"_index":455,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:26",{"_index":471,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:28",{"_index":470,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:30",{"_index":472,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:32",{"_index":463,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:34",{"_index":461,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:36",{"_index":469,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:38",{"_index":473,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:40",{"_index":475,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:42",{"_index":474,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:44",{"_index":478,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:46",{"_index":452,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:48",{"_index":451,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:50",{"_index":449,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:52",{"_index":450,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:54",{"_index":448,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:56",{"_index":476,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:58",{"_index":462,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:60",{"_index":456,"title":{},"body":{"entities/AssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts",{"_index":535,"title":{},"body":{"entities/CustomerEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:12",{"_index":544,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:13",{"_index":543,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:14",{"_index":541,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:15",{"_index":546,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:16",{"_index":545,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:17",{"_index":542,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts",{"_index":590,"title":{},"body":{"entities/EventDetailsEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:15",{"_index":616,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:17",{"_index":620,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:18",{"_index":605,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:20",{"_index":624,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:22",{"_index":613,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:24",{"_index":614,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:25",{"_index":606,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:26",{"_index":625,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:27",{"_index":615,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:28",{"_index":626,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:29",{"_index":627,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:30",{"_index":621,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:31",{"_index":607,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:33",{"_index":612,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts",{"_index":631,"title":{},"body":{"entities/EventParamDetailsEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts:15",{"_index":640,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts:16",{"_index":641,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts:17",{"_index":642,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts:20",{"_index":639,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts",{"_index":645,"title":{},"body":{"entities/FlighLocationEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:13",{"_index":690,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:14",{"_index":694,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:15",{"_index":681,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:17",{"_index":680,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:19",{"_index":683,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:20",{"_index":670,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:21",{"_index":686,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:22",{"_index":671,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:23",{"_index":672,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:24",{"_index":691,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:25",{"_index":693,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:28",{"_index":679,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:30",{"_index":684,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:32",{"_index":689,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:33",{"_index":669,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:34",{"_index":685,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:36",{"_index":674,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:38",{"_index":673,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:40",{"_index":668,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:42",{"_index":667,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:43",{"_index":687,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:44",{"_index":688,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:45",{"_index":682,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:46",{"_index":692,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts",{"_index":697,"title":{},"body":{"entities/FlighPlanEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts:14",{"_index":708,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts:16",{"_index":703,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts:18",{"_index":707,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts:20",{"_index":706,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts",{"_index":730,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts:14",{"_index":747,"title":{},"body":{"entities/GeofenceAssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts:16",{"_index":745,"title":{},"body":{"entities/GeofenceAssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts:18",{"_index":750,"title":{},"body":{"entities/GeofenceAssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts:22",{"_index":739,"title":{},"body":{"entities/GeofenceAssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts:25",{"_index":742,"title":{},"body":{"entities/GeofenceAssetEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts",{"_index":712,"title":{},"body":{"entities/GeoObjectEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:14",{"_index":726,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:15",{"_index":720,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:16",{"_index":722,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:17",{"_index":721,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:18",{"_index":725,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:20",{"_index":724,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts",{"_index":788,"title":{},"body":{"entities/GeofenceEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:17",{"_index":827,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:19",{"_index":832,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:21",{"_index":805,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:23",{"_index":838,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:25",{"_index":836,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:27",{"_index":808,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:29",{"_index":824,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:31",{"_index":820,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:33",{"_index":826,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:35",{"_index":822,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:37",{"_index":811,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:39",{"_index":842,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:41",{"_index":840,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:43",{"_index":807,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:45",{"_index":814,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:48",{"_index":844,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:51",{"_index":818,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:54",{"_index":816,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:57",{"_index":830,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts",{"_index":853,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts:13",{"_index":856,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts:15",{"_index":855,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts:17",{"_index":862,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts:21",{"_index":859,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts:25",{"_index":861,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/group.entity.ts",{"_index":946,"title":{},"body":{"entities/GroupEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/group.entity.ts:14",{"_index":947,"title":{},"body":{"entities/GroupEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts",{"_index":993,"title":{},"body":{"entities/LandmarkEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts:15",{"_index":1007,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts:17",{"_index":996,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts:19",{"_index":1006,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts:23",{"_index":1004,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts:27",{"_index":1001,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts",{"_index":1048,"title":{},"body":{"entities/LayerEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:14",{"_index":1059,"title":{},"body":{"entities/LayerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:16",{"_index":1053,"title":{},"body":{"entities/LayerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:18",{"_index":1054,"title":{},"body":{"entities/LayerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:20",{"_index":1055,"title":{},"body":{"entities/LayerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:22",{"_index":1061,"title":{},"body":{"entities/LayerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:24",{"_index":1060,"title":{},"body":{"entities/LayerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:26",{"_index":1056,"title":{},"body":{"entities/LayerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:28",{"_index":1058,"title":{},"body":{"entities/LayerEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/login.entity.ts",{"_index":1327,"title":{},"body":{"entities/UserLogin.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/login.entity.ts:15",{"_index":1328,"title":{},"body":{"entities/UserLogin.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/login.entity.ts:18",{"_index":1330,"title":{},"body":{"entities/UserLogin.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/login.entity.ts:21",{"_index":1329,"title":{},"body":{"entities/UserLogin.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts",{"_index":1137,"title":{},"body":{"entities/NotificationEmailEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts:13",{"_index":1140,"title":{},"body":{"entities/NotificationEmailEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts:15",{"_index":1138,"title":{},"body":{"entities/NotificationEmailEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts:17",{"_index":1143,"title":{},"body":{"entities/NotificationEmailEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts:19",{"_index":1139,"title":{},"body":{"entities/NotificationEmailEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts:22",{"_index":1142,"title":{},"body":{"entities/NotificationEmailEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts",{"_index":1146,"title":{},"body":{"entities/NotificationEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:18",{"_index":1159,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:20",{"_index":1162,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:22",{"_index":1164,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:24",{"_index":1153,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:26",{"_index":1155,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:29",{"_index":1158,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:32",{"_index":1161,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:35",{"_index":1167,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.template.entity.ts",{"_index":1211,"title":{},"body":{"entities/NotificationTemplateEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.template.entity.ts:13",{"_index":1214,"title":{},"body":{"entities/NotificationTemplateEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.template.entity.ts:15",{"_index":1215,"title":{},"body":{"entities/NotificationTemplateEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.template.entity.ts:17",{"_index":1216,"title":{},"body":{"entities/NotificationTemplateEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts",{"_index":1231,"title":{},"body":{"entities/NotificationUserEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts:14",{"_index":1233,"title":{},"body":{"entities/NotificationUserEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts:16",{"_index":1232,"title":{},"body":{"entities/NotificationUserEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts:18",{"_index":1235,"title":{},"body":{"entities/NotificationUserEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts:21",{"_index":1234,"title":{},"body":{"entities/NotificationUserEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts:25",{"_index":1236,"title":{},"body":{"entities/NotificationUserEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts",{"_index":1318,"title":{},"body":{"entities/UserEntity.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts:15",{"_index":1324,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts:17",{"_index":1323,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts:19",{"_index":1322,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts:21",{"_index":1320,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts:23",{"_index":1321,"title":{},"body":{"entities/UserEntity.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts",{"_index":219,"title":{},"body":{"injectables/AplService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:17",{"_index":227,"title":{},"body":{"injectables/AplService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:31",{"_index":229,"title":{},"body":{"injectables/AplService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:39",{"_index":232,"title":{},"body":{"injectables/AplService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:46",{"_index":230,"title":{},"body":{"injectables/AplService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:55",{"_index":233,"title":{},"body":{"injectables/AplService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:67",{"_index":235,"title":{},"body":{"injectables/AplService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts",{"_index":480,"title":{},"body":{"injectables/AssetService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:18",{"_index":482,"title":{},"body":{"injectables/AssetService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:34",{"_index":485,"title":{},"body":{"injectables/AssetService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:43",{"_index":487,"title":{},"body":{"injectables/AssetService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:50",{"_index":486,"title":{},"body":{"injectables/AssetService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:59",{"_index":491,"title":{},"body":{"injectables/AssetService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:70",{"_index":492,"title":{},"body":{"injectables/AssetService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:89",{"_index":489,"title":{},"body":{"injectables/AssetService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts",{"_index":547,"title":{},"body":{"injectables/CustomerService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:18",{"_index":548,"title":{},"body":{"injectables/CustomerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:33",{"_index":549,"title":{},"body":{"injectables/CustomerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:42",{"_index":551,"title":{},"body":{"injectables/CustomerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:50",{"_index":550,"title":{},"body":{"injectables/CustomerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:58",{"_index":552,"title":{},"body":{"injectables/CustomerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:69",{"_index":553,"title":{},"body":{"injectables/CustomerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts",{"_index":578,"title":{},"body":{"injectables/EventDetailService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:18",{"_index":580,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:33",{"_index":581,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:41",{"_index":585,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:48",{"_index":583,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:57",{"_index":586,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:68",{"_index":587,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts",{"_index":864,"title":{},"body":{"injectables/GeofenceService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:103",{"_index":874,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:116",{"_index":875,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:27",{"_index":868,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:48",{"_index":870,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:67",{"_index":873,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:85",{"_index":871,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/group.service.ts",{"_index":949,"title":{},"body":{"injectables/GroupService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:18",{"_index":950,"title":{},"body":{"injectables/GroupService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:33",{"_index":951,"title":{},"body":{"injectables/GroupService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:42",{"_index":953,"title":{},"body":{"injectables/GroupService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:49",{"_index":952,"title":{},"body":{"injectables/GroupService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:57",{"_index":954,"title":{},"body":{"injectables/GroupService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:69",{"_index":955,"title":{},"body":{"injectables/GroupService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts",{"_index":1010,"title":{},"body":{"injectables/LandmarkService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:18",{"_index":1012,"title":{},"body":{"injectables/LandmarkService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:33",{"_index":1013,"title":{},"body":{"injectables/LandmarkService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:41",{"_index":1019,"title":{},"body":{"injectables/LandmarkService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:48",{"_index":1017,"title":{},"body":{"injectables/LandmarkService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:57",{"_index":1020,"title":{},"body":{"injectables/LandmarkService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:69",{"_index":1021,"title":{},"body":{"injectables/LandmarkService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts",{"_index":1062,"title":{},"body":{"injectables/LayerService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:19",{"_index":1063,"title":{},"body":{"injectables/LayerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:33",{"_index":1064,"title":{},"body":{"injectables/LayerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:42",{"_index":1066,"title":{},"body":{"injectables/LayerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:49",{"_index":1065,"title":{},"body":{"injectables/LayerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:58",{"_index":1068,"title":{},"body":{"injectables/LayerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:70",{"_index":1069,"title":{},"body":{"injectables/LayerService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts",{"_index":1173,"title":{},"body":{"injectables/NotificationService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:20",{"_index":1176,"title":{},"body":{"injectables/NotificationService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:41",{"_index":1177,"title":{},"body":{"injectables/NotificationService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:55",{"_index":1181,"title":{},"body":{"injectables/NotificationService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:63",{"_index":1180,"title":{},"body":{"injectables/NotificationService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:73",{"_index":1183,"title":{},"body":{"injectables/NotificationService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:85",{"_index":1184,"title":{},"body":{"injectables/NotificationService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts",{"_index":1218,"title":{},"body":{"injectables/NotificationTemplateService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:20",{"_index":1220,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:35",{"_index":1222,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:44",{"_index":1224,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:52",{"_index":1223,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:61",{"_index":1227,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:73",{"_index":1229,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:92",{"_index":1225,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/user.service.ts",{"_index":1338,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:100",{"_index":1351,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:111",{"_index":1357,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:23",{"_index":1341,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:38",{"_index":1342,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:47",{"_index":1349,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:55",{"_index":1348,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:62",{"_index":1345,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:70",{"_index":1352,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:81",{"_index":1355,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/starnavigationapi/src/app/providers/database/mysql/provider.module.ts",{"_index":1093,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{}}}],["apps/starnavigationapi/src/app/providers/database/postgres/provider.module.ts",{"_index":1239,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["appservice",{"_index":322,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["artifacts",{"_index":1550,"title":{},"body":{"index.html":{}}}],["asset",{"_index":382,"title":{},"body":{"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceEntity.html":{}}}],["asset'})@apiresponse({status",{"_index":386,"title":{},"body":{"controllers/AssetController.html":{}}}],["asset.entity",{"_index":753,"title":{},"body":{"entities/GeofenceAssetEntity.html":{}}}],["asset.id",{"_index":912,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["asset_id",{"_index":741,"title":{},"body":{"entities/GeofenceAssetEntity.html":{}}}],["assetcolor",{"_index":427,"title":{},"body":{"entities/AssetEntity.html":{}}}],["assetcontroller",{"_index":380,"title":{"controllers/AssetController.html":{}},"body":{"controllers/AssetController.html":{},"coverage.html":{}}}],["assetdto",{"_index":384,"title":{},"body":{"controllers/AssetController.html":{}}}],["assetentity",{"_index":424,"title":{"entities/AssetEntity.html":{}},"body":{"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"entities/GeofenceAssetEntity.html":{},"injectables/GeofenceService.html":{},"coverage.html":{}}}],["assetentity,'asset','a.asset_id",{"_index":911,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["assetid",{"_index":732,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"injectables/GeofenceService.html":{}}}],["assetmake",{"_index":428,"title":{},"body":{"entities/AssetEntity.html":{}}}],["assetmodel",{"_index":429,"title":{},"body":{"entities/AssetEntity.html":{}}}],["assetregistrationnumber",{"_index":430,"title":{},"body":{"entities/AssetEntity.html":{}}}],["assets",{"_index":390,"title":{},"body":{"controllers/AssetController.html":{},"injectables/AssetService.html":{}}}],["assets/apl",{"_index":108,"title":{},"body":{"controllers/AplController.html":{}}}],["assetserialnumber",{"_index":431,"title":{},"body":{"entities/AssetEntity.html":{}}}],["assetservice",{"_index":406,"title":{"injectables/AssetService.html":{}},"body":{"controllers/AssetController.html":{},"injectables/AssetService.html":{},"coverage.html":{}}}],["assetservices",{"_index":483,"title":{},"body":{"injectables/AssetService.html":{}}}],["async",{"_index":15,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"modules/PostgresDatabaseProviderModule.html":{},"controllers/UserController.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["authentication",{"_index":1313,"title":{},"body":{"controllers/UserController.html":{}}}],["authentication'})@apiresponse({status",{"_index":1292,"title":{},"body":{"controllers/UserController.html":{}}}],["automatically",{"_index":1541,"title":{},"body":{"index.html":{}}}],["available",{"_index":1618,"title":{},"body":{"modules.html":{}}}],["await",{"_index":127,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["backend",{"_index":1612,"title":{},"body":{"index.html":{}}}],["based",{"_index":59,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["below",{"_index":1504,"title":{},"body":{"index.html":{}}}],["body",{"_index":84,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":203,"title":{},"body":{"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{}}}],["both",{"_index":1610,"title":{},"body":{"index.html":{}}}],["brakes",{"_index":1405,"title":{},"body":{"dependencies.html":{}}}],["browse",{"_index":1617,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1614,"title":{},"body":{"modules.html":{}}}],["buffer_distance",{"_index":804,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["bufferdistance",{"_index":715,"title":{},"body":{"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{}}}],["bufferheight",{"_index":651,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["bufferwidth",{"_index":652,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["build",{"_index":1483,"title":{},"body":{"index.html":{}}}],["builder",{"_index":1407,"title":{},"body":{"dependencies.html":{}}}],["building",{"_index":1598,"title":{},"body":{"index.html":{}}}],["caching",{"_index":1579,"title":{},"body":{"index.html":{}}}],["capabilities",{"_index":1486,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":197,"title":{},"body":{"entities/AplItemEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["cascade'})@joincolumn({name",{"_index":858,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["catch(err){console.log(err.message",{"_index":1372,"title":{},"body":{"injectables/UserService.html":{}}}],["change",{"_index":1543,"title":{},"body":{"index.html":{}}}],["checks",{"_index":236,"title":{},"body":{"injectables/AplService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["city",{"_index":1049,"title":{},"body":{"entities/LayerEntity.html":{}}}],["class",{"_index":111,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["client",{"_index":358,"title":{},"body":{"modules/AppModule.html":{}}}],["cloud",{"_index":1576,"title":{},"body":{"index.html":{}}}],["cluster_appconfigmodule",{"_index":277,"title":{},"body":{"modules/AppConfigModule.html":{},"overview.html":{}}}],["cluster_appconfigmodule_exports",{"_index":278,"title":{},"body":{"modules/AppConfigModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":333,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":334,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":335,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_httpconfigmodule",{"_index":960,"title":{},"body":{"modules/HttpConfigModule.html":{},"overview.html":{}}}],["cluster_httpconfigmodule_exports",{"_index":961,"title":{},"body":{"modules/HttpConfigModule.html":{},"overview.html":{}}}],["cluster_mysqlconfigmodule",{"_index":1073,"title":{},"body":{"modules/MySqlConfigModule.html":{},"overview.html":{}}}],["cluster_mysqlconfigmodule_exports",{"_index":1074,"title":{},"body":{"modules/MySqlConfigModule.html":{},"overview.html":{}}}],["cluster_postgressqlconfigmodule",{"_index":1254,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{},"overview.html":{}}}],["cluster_postgressqlconfigmodule_exports",{"_index":1255,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{},"overview.html":{}}}],["code",{"_index":1545,"title":{},"body":{"index.html":{}}}],["color",{"_index":184,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["column",{"_index":175,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{}}}],["column(\"decimal",{"_index":479,"title":{},"body":{"entities/AssetEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceEntity.html":{}}}],["column('decimal",{"_index":464,"title":{},"body":{"entities/AssetEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceEntity.html":{}}}],["column({length",{"_index":458,"title":{},"body":{"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/UserEntity.html":{}}}],["column({name",{"_index":740,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NotificationEntity.html":{}}}],["column({nullable",{"_index":167,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceEntity.html":{},"entities/LayerEntity.html":{},"entities/UserEntity.html":{}}}],["column({type",{"_index":618,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeofenceEntity.html":{},"entities/LandmarkEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/UserEntity.html":{}}}],["community",{"_index":1521,"title":{},"body":{"index.html":{}}}],["component",{"_index":1548,"title":{},"body":{"index.html":{}}}],["computation",{"_index":1578,"title":{},"body":{"index.html":{}}}],["config",{"_index":1267,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["config/app/config.module",{"_index":351,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database/mysql/config.module",{"_index":1098,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{}}}],["config/database/mysql/configuration.service",{"_index":1099,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{}}}],["config/database/postgres/config.module",{"_index":1241,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["config/database/postgres/configuration.service",{"_index":1243,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["configmodule",{"_index":288,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["configmodule.forroot",{"_index":293,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["configservice",{"_index":280,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{},"overview.html":{}}}],["configuration",{"_index":290,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["configuration.service",{"_index":291,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["configure",{"_index":338,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":339,"title":{},"body":{"modules/AppModule.html":{}}}],["confirm",{"_index":1454,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["confirmenum",{"_index":1443,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["connect",{"_index":1591,"title":{},"body":{"index.html":{}}}],["connecting",{"_index":1244,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["connectivity",{"_index":1091,"title":{},"body":{"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["consist",{"_index":1011,"title":{},"body":{"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["console.log('account",{"_index":1363,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log('data",{"_index":1191,"title":{},"body":{"injectables/NotificationService.html":{}}}],["console.log('id",{"_index":917,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["console.log(logindata",{"_index":1368,"title":{},"body":{"injectables/UserService.html":{}}}],["const",{"_index":125,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":116,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AppController.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":117,"title":{},"body":{"controllers/AplController.html":{},"controllers/AppController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["constructor(repository",{"_index":223,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["consul",{"_index":1414,"title":{},"body":{"dependencies.html":{}}}],["consumer",{"_index":342,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(loggermiddleware).forroutes",{"_index":369,"title":{},"body":{"modules/AppModule.html":{}}}],["contains",{"_index":152,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/NotificationUserEntity.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"miscellaneous/enumerations.html":{}}}],["controller",{"_index":0,"title":{"controllers/AplController.html":{},"controllers/AppController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AplController.html":{},"controllers/AppController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AplController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{},"overview.html":{}}}],["core",{"_index":1505,"title":{},"body":{"index.html":{}}}],["country",{"_index":1050,"title":{},"body":{"entities/LayerEntity.html":{}}}],["countrycode",{"_index":537,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["countryid",{"_index":432,"title":{},"body":{"entities/AssetEntity.html":{}}}],["coverage",{"_index":1373,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":16,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["create(@body",{"_index":124,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["create(data",{"_index":22,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["created",{"_index":33,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["created_at",{"_index":744,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["createdat",{"_index":733,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["createdatecolumn",{"_index":751,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["createdatecolumn({name",{"_index":743,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["createquerybuilder",{"_index":1226,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["creates",{"_index":154,"title":{},"body":{"entities/AplEntity.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"entities/FlighLocationEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"entities/NotificationTemplateEntity.html":{},"entities/NotificationUserEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{}}}],["creation",{"_index":38,"title":{},"body":{"controllers/AplController.html":{},"controllers/CustomerController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["customer",{"_index":395,"title":{},"body":{"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{}}}],["customer'})@apiresponse({status",{"_index":511,"title":{},"body":{"controllers/CustomerController.html":{}}}],["customer.id",{"_index":898,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["customer_id",{"_index":806,"title":{},"body":{"entities/GeofenceEntity.html":{},"entities/NotificationEntity.html":{}}}],["customercontroller",{"_index":507,"title":{"controllers/CustomerController.html":{}},"body":{"controllers/CustomerController.html":{},"coverage.html":{}}}],["customerdto",{"_index":510,"title":{},"body":{"controllers/CustomerController.html":{},"injectables/CustomerService.html":{}}}],["customerentity",{"_index":534,"title":{"entities/CustomerEntity.html":{}},"body":{"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"injectables/GeofenceService.html":{},"coverage.html":{}}}],["customerid",{"_index":160,"title":{},"body":{"entities/AplEntity.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"entities/GeofenceEntity.html":{},"entities/LayerEntity.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{}}}],["customerid'})@apiresponse({status",{"_index":393,"title":{},"body":{"controllers/AssetController.html":{}}}],["customers",{"_index":509,"title":{},"body":{"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{}}}],["customerservice",{"_index":523,"title":{"injectables/CustomerService.html":{}},"body":{"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"coverage.html":{}}}],["cypress",{"_index":1565,"title":{},"body":{"index.html":{}}}],["d",{"_index":126,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{}}}],["data",{"_index":43,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["data.emailtemplate",{"_index":1195,"title":{},"body":{"injectables/NotificationService.html":{}}}],["data.emailtemplateid",{"_index":1193,"title":{},"body":{"injectables/NotificationService.html":{}}}],["data.notifications.foreach(o",{"_index":894,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["data.smstemplate",{"_index":1196,"title":{},"body":{"injectables/NotificationService.html":{}}}],["data.smstemplateid",{"_index":1194,"title":{},"body":{"injectables/NotificationService.html":{}}}],["data.vehicles.foreach(o",{"_index":889,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["database",{"_index":51,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceEntity.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["databasetype",{"_index":1096,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["date",{"_index":622,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["db_logging",{"_index":1089,"title":{},"body":{"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["db_synchronize",{"_index":1087,"title":{},"body":{"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["decorators",{"_index":24,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"controllers/AppController.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"controllers/EventDetailController.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"entities/NotificationUserEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{}}}],["default",{"_index":238,"title":{},"body":{"injectables/AplService.html":{},"modules/AppModule.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/GeofenceEntity.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["default('development",{"_index":306,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["defined",{"_index":34,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["defines",{"_index":315,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["delete",{"_index":72,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(':id",{"_index":140,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["delete(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":397,"title":{},"body":{"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/GeofenceController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["delete(':id')@httpcode(httpstatus.ok)@useinterceptors(new",{"_index":71,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{},"controllers/GroupController.html":{}}}],["deleted",{"_index":1354,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["deletes",{"_index":76,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"injectables/NotificationService.html":{}}}],["deletion",{"_index":1035,"title":{},"body":{"controllers/LayerController.html":{},"controllers/UserController.html":{}}}],["dependencies",{"_index":276,"title":{"dependencies.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":1606,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["description:'forbidden",{"_index":1315,"title":{},"body":{"controllers/UserController.html":{}}}],["detail",{"_index":563,"title":{},"body":{"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"injectables/UserService.html":{}}}],["detail'})@apiresponse({status",{"_index":562,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["details",{"_index":521,"title":{},"body":{"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{}}}],["dev",{"_index":1508,"title":{},"body":{"index.html":{}}}],["developers",{"_index":1613,"title":{},"body":{"index.html":{}}}],["developing",{"_index":1492,"title":{},"body":{"index.html":{}}}],["development",{"_index":1537,"title":{},"body":{"index.html":{}}}],["devicestate",{"_index":433,"title":{},"body":{"entities/AssetEntity.html":{}}}],["devicetype",{"_index":434,"title":{},"body":{"entities/AssetEntity.html":{}}}],["devtools",{"_index":1502,"title":{},"body":{"index.html":{}}}],["diagram",{"_index":1570,"title":{},"body":{"index.html":{}}}],["different",{"_index":1493,"title":{},"body":{"index.html":{}}}],["directory",{"_index":1553,"title":{},"body":{"index.html":{}}}],["disable",{"_index":771,"title":{},"body":{"controllers/GeofenceController.html":{},"entities/GroupEntity.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationTemplateController.html":{},"entities/UserEntity.html":{}}}],["disabled",{"_index":1471,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["displayoption",{"_index":185,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["dist",{"_index":1552,"title":{},"body":{"index.html":{}}}],["distributed",{"_index":1577,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1374,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dto/apl.dto",{"_index":100,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{}}}],["dto/asset.dto",{"_index":405,"title":{},"body":{"controllers/AssetController.html":{}}}],["dto/customer.dto",{"_index":522,"title":{},"body":{"controllers/CustomerController.html":{},"injectables/CustomerService.html":{}}}],["dto/event.detail.dto",{"_index":570,"title":{},"body":{"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{}}}],["dto/geofence.dto",{"_index":776,"title":{},"body":{"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{}}}],["dto/group.dto",{"_index":932,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["dto/landmark.create.dto",{"_index":982,"title":{},"body":{"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{}}}],["dto/layer.create.dto",{"_index":494,"title":{},"body":{"injectables/AssetService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{}}}],["dto/login.dto",{"_index":1295,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/notification.dto",{"_index":1129,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["dto/notification.template.dto",{"_index":1207,"title":{},"body":{"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{}}}],["dto/state.interface",{"_index":97,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/user.dto",{"_index":1296,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e2e",{"_index":1564,"title":{},"body":{"index.html":{}}}],["eager",{"_index":195,"title":{},"body":{"entities/AplItemEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceEntity.html":{},"entities/LandmarkEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["email",{"_index":538,"title":{},"body":{"entities/CustomerEntity.html":{},"entities/NotificationEmailEntity.html":{},"miscellaneous/enumerations.html":{}}}],["email_template_id",{"_index":1157,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["emails",{"_index":1148,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["emailtemplate",{"_index":1149,"title":{},"body":{"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{}}}],["enable",{"_index":1584,"title":{},"body":{"index.html":{}}}],["end",{"_index":1563,"title":{},"body":{"index.html":{}}}],["entities",{"_index":150,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"modules/MysqlDatabaseProviderModule.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"overview.html":{}}}],["entity",{"_index":148,"title":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/NotificationUserEntity.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{}},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/NotificationUserEntity.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"coverage.html":{}}}],["entity({name",{"_index":180,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/UserEntity.html":{}}}],["entity/apl.entity",{"_index":247,"title":{},"body":{"injectables/AplService.html":{}}}],["entity/asset.entity",{"_index":495,"title":{},"body":{"injectables/AssetService.html":{},"injectables/GeofenceService.html":{}}}],["entity/customer.entity",{"_index":556,"title":{},"body":{"injectables/CustomerService.html":{},"injectables/GeofenceService.html":{}}}],["entity/event.details.entity",{"_index":572,"title":{},"body":{"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{}}}],["entity/genfence.asset.entity",{"_index":884,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["entity/geofence.entity",{"_index":777,"title":{},"body":{"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{}}}],["entity/geofence.notification.entity",{"_index":881,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["entity/group.entity",{"_index":957,"title":{},"body":{"injectables/GroupService.html":{}}}],["entity/landmark.entity",{"_index":102,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/UserController.html":{}}}],["entity/layer.entity",{"_index":878,"title":{},"body":{"injectables/GeofenceService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{}}}],["entity/notification.email.entity",{"_index":1187,"title":{},"body":{"injectables/NotificationService.html":{}}}],["entity/notification.entity",{"_index":883,"title":{},"body":{"injectables/GeofenceService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["entity/notification.template.entity",{"_index":1131,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{}}}],["entity/user.entity",{"_index":880,"title":{},"body":{"injectables/GeofenceService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["entries",{"_index":872,"title":{},"body":{"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LayerService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["entry",{"_index":714,"title":{},"body":{"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{},"injectables/GeofenceService.html":{},"injectables/LandmarkService.html":{}}}],["enum",{"_index":619,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/GeofenceEntity.html":{},"entities/NotificationEntity.html":{},"entities/UserEntity.html":{},"miscellaneous/enumerations.html":{}}}],["enum/event.severity.enum",{"_index":845,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["enum/notification.type.enum",{"_index":1168,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["enum/notify.enum",{"_index":846,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["enum/packet.type.enum",{"_index":628,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{}}}],["enum/status.enum",{"_index":245,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["enum/user.type.enum",{"_index":1294,"title":{},"body":{"controllers/UserController.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["enumerations",{"_index":1442,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":262,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["error(\"method",{"_index":1332,"title":{},"body":{"entities/UserLogin.html":{}}}],["eslint",{"_index":770,"title":{},"body":{"controllers/GeofenceController.html":{},"entities/GroupEntity.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationTemplateController.html":{},"entities/UserEntity.html":{}}}],["eslint/no",{"_index":773,"title":{},"body":{"controllers/GeofenceController.html":{},"entities/GroupEntity.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationTemplateController.html":{},"entities/UserEntity.html":{}}}],["esn",{"_index":161,"title":{},"body":{"entities/AplEntity.html":{},"entities/AssetEntity.html":{}}}],["estimatedarrivaltime",{"_index":653,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["estimateddeparturetime",{"_index":654,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["etc",{"_index":1500,"title":{},"body":{"index.html":{}}}],["even",{"_index":1589,"title":{},"body":{"index.html":{}}}],["event",{"_index":560,"title":{},"body":{"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventParamDetailsEntity.html":{},"miscellaneous/enumerations.html":{}}}],["event.details.entity",{"_index":643,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["event.eventparamdetails",{"_index":636,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["event.param.details.entity",{"_index":629,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["event_details",{"_index":591,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["event_id",{"_index":638,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["event_param",{"_index":633,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["event_param_details",{"_index":632,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["event_severity",{"_index":810,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["eventdetaial",{"_index":579,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["eventdetail",{"_index":582,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["eventdetailcontroller",{"_index":558,"title":{"controllers/EventDetailController.html":{}},"body":{"controllers/EventDetailController.html":{},"coverage.html":{}}}],["eventdetaildto",{"_index":561,"title":{},"body":{"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{}}}],["eventdetails",{"_index":610,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{}}}],["eventdetailsentity",{"_index":571,"title":{"entities/EventDetailsEntity.html":{}},"body":{"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"coverage.html":{}}}],["eventdetailservice",{"_index":573,"title":{"injectables/EventDetailService.html":{}},"body":{"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"coverage.html":{}}}],["eventid",{"_index":594,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["eventparamdetails",{"_index":595,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["eventparamdetailsentity",{"_index":608,"title":{"entities/EventParamDetailsEntity.html":{}},"body":{"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"coverage.html":{}}}],["events",{"_index":584,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["eventseverity",{"_index":789,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["eventseverity?:eventseverityenum",{"_index":852,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["eventseverityenum",{"_index":809,"title":{},"body":{"entities/GeofenceEntity.html":{},"miscellaneous/enumerations.html":{}}}],["eventseverityenum.low",{"_index":851,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["exception",{"_index":1360,"title":{},"body":{"injectables/UserService.html":{}}}],["execute",{"_index":1558,"title":{},"body":{"index.html":{}}}],["execution",{"_index":1581,"title":{},"body":{"index.html":{}}}],["exist",{"_index":1346,"title":{},"body":{"injectables/UserService.html":{}}}],["existing",{"_index":402,"title":{},"body":{"controllers/AssetController.html":{}}}],["experience",{"_index":1609,"title":{},"body":{"index.html":{}}}],["export",{"_index":110,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["exported",{"_index":1100,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["exports",{"_index":285,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["express",{"_index":1398,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["extend.entity",{"_index":179,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/UserEntity.html":{}}}],["extendentity",{"_index":178,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/UserEntity.html":{}}}],["extends",{"_index":181,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/UserEntity.html":{}}}],["extensible",{"_index":1482,"title":{},"body":{"index.html":{}}}],["false",{"_index":196,"title":{},"body":{"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GroupEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/UserEntity.html":{}}}],["false})@joincolumn({name",{"_index":199,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["fast",{"_index":1481,"title":{},"body":{"index.html":{}}}],["fastify",{"_index":1416,"title":{},"body":{"dependencies.html":{}}}],["field",{"_index":554,"title":{},"body":{"injectables/CustomerService.html":{},"entities/GeofenceNotificationEntity.html":{}}}],["fields",{"_index":153,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/NotificationUserEntity.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["files",{"_index":1544,"title":{},"body":{"index.html":{}}}],["fin",{"_index":47,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/EventDetailController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationTemplateController.html":{}}}],["find",{"_index":55,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall",{"_index":17,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findassetofuser",{"_index":383,"title":{},"body":{"controllers/AssetController.html":{}}}],["findassetofuser(@param('id",{"_index":418,"title":{},"body":{"controllers/AssetController.html":{}}}],["findassetofuser(id",{"_index":391,"title":{},"body":{"controllers/AssetController.html":{}}}],["findbyaccounttype",{"_index":1340,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyaccounttype(accounttype",{"_index":1347,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid",{"_index":222,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["findbyid(id",{"_index":231,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["finding",{"_index":515,"title":{},"body":{"controllers/CustomerController.html":{}}}],["findone",{"_index":18,"title":{},"body":{"controllers/AplController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["findone(@param('id",{"_index":135,"title":{},"body":{"controllers/AplController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["findone(id",{"_index":53,"title":{},"body":{"controllers/AplController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["findonebyaccounttype",{"_index":1270,"title":{},"body":{"controllers/UserController.html":{}}}],["findonebyaccounttype(@param('accounttype",{"_index":1305,"title":{},"body":{"controllers/UserController.html":{}}}],["findonebyaccounttype(accounttype",{"_index":1277,"title":{},"body":{"controllers/UserController.html":{}}}],["finds",{"_index":50,"title":{},"body":{"controllers/AplController.html":{},"injectables/AssetService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{}}}],["finduserasset",{"_index":481,"title":{},"body":{"injectables/AssetService.html":{}}}],["finduserasset(@param",{"_index":415,"title":{},"body":{"controllers/AssetController.html":{}}}],["finduserasset(customerid",{"_index":488,"title":{},"body":{"injectables/AssetService.html":{}}}],["finduserasset(customerid:number):promise",{"_index":505,"title":{},"body":{"injectables/AssetService.html":{}}}],["firstly",{"_index":237,"title":{},"body":{"injectables/AplService.html":{}}}],["flag",{"_index":1555,"title":{},"body":{"index.html":{}}}],["fligh.location.entity",{"_index":709,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["fligh_location",{"_index":696,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["fligh_plan",{"_index":710,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["flighlocationentity",{"_index":644,"title":{"entities/FlighLocationEntity.html":{}},"body":{"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"coverage.html":{}}}],["flighplanentity",{"_index":675,"title":{"entities/FlighPlanEntity.html":{}},"body":{"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"coverage.html":{}}}],["flight",{"_index":647,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["flight.plan.entity",{"_index":695,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["flight_plan",{"_index":698,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["flight_plan_id",{"_index":678,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["flightlocation",{"_index":646,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["flightnumber",{"_index":699,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["flightplan",{"_index":655,"title":{},"body":{"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{}}}],["folder",{"_index":359,"title":{},"body":{"modules/AppModule.html":{}}}],["forbidden",{"_index":48,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["forbidden.'})@apiresponse({status",{"_index":30,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["found",{"_index":263,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":1511,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":1611,"title":{},"body":{"index.html":{}}}],["frontend_app_path",{"_index":312,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["frontends",{"_index":1512,"title":{},"body":{"index.html":{}}}],["full",{"_index":1599,"title":{},"body":{"index.html":{}}}],["function",{"_index":1343,"title":{},"body":{"injectables/UserService.html":{}}}],["functions",{"_index":490,"title":{},"body":{"injectables/AssetService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["further",{"_index":1571,"title":{},"body":{"index.html":{}}}],["g",{"_index":1525,"title":{},"body":{"index.html":{}}}],["g_landmark_id",{"_index":815,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["g_layer_id",{"_index":817,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["gain",{"_index":1596,"title":{},"body":{"index.html":{}}}],["generate",{"_index":1522,"title":{},"body":{"index.html":{}}}],["generated",{"_index":1477,"title":{},"body":{"index.html":{}}}],["generating",{"_index":1498,"title":{},"body":{"index.html":{}}}],["generation",{"_index":1605,"title":{},"body":{"index.html":{}}}],["genfence.asset.entity",{"_index":847,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["geo.object.entity",{"_index":1008,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["geo_object",{"_index":713,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["geo_object_id",{"_index":999,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["geofence",{"_index":758,"title":{},"body":{"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"entities/LayerEntity.html":{}}}],["geofence'})@apiresponse({status",{"_index":760,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["geofence.entity",{"_index":754,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/LayerEntity.html":{}}}],["geofence.notification.entity",{"_index":848,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["geofence_assets",{"_index":731,"title":{},"body":{"entities/GeofenceAssetEntity.html":{}}}],["geofence_id",{"_index":738,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{}}}],["geofence_notifications",{"_index":863,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{}}}],["geofenceassetentity",{"_index":729,"title":{"entities/GeofenceAssetEntity.html":{}},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceEntity.html":{},"injectables/GeofenceService.html":{},"coverage.html":{}}}],["geofencecontroller",{"_index":756,"title":{"controllers/GeofenceController.html":{}},"body":{"controllers/GeofenceController.html":{},"coverage.html":{}}}],["geofencedto",{"_index":759,"title":{},"body":{"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{}}}],["geofenceentity",{"_index":735,"title":{"entities/GeofenceEntity.html":{}},"body":{"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"entities/LayerEntity.html":{},"coverage.html":{}}}],["geofencenotificationentity",{"_index":828,"title":{"entities/GeofenceNotificationEntity.html":{}},"body":{"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"coverage.html":{}}}],["geofenceservice",{"_index":778,"title":{"injectables/GeofenceService.html":{}},"body":{"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"coverage.html":{}}}],["geoformat",{"_index":716,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["geojsonobject",{"_index":790,"title":{},"body":{"entities/GeofenceEntity.html":{},"entities/LandmarkEntity.html":{}}}],["geom",{"_index":717,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["geoobject",{"_index":994,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["geoobjectentity",{"_index":711,"title":{"entities/GeoObjectEntity.html":{}},"body":{"entities/GeoObjectEntity.html":{},"entities/LandmarkEntity.html":{},"coverage.html":{}}}],["get(':id",{"_index":134,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["get(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":392,"title":{},"body":{"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/GeofenceController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["get(':id')@httpcode(httpstatus.ok)@useinterceptors(new",{"_index":54,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{},"controllers/GroupController.html":{}}}],["get('by",{"_index":1279,"title":{},"body":{"controllers/UserController.html":{}}}],["get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":388,"title":{},"body":{"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/GeofenceController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["get()@httpcode(httpstatus.ok)@useinterceptors(new",{"_index":46,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{},"controllers/GroupController.html":{}}}],["get()@useinterceptors(new",{"_index":324,"title":{},"body":{"controllers/AppController.html":{}}}],["getdata",{"_index":323,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmany",{"_index":916,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["getmetadataargsstorage",{"_index":1097,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["getmetadataargsstorage().tables.map(tbl",{"_index":1115,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["getone",{"_index":914,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["getting",{"_index":1474,"title":{"index.html":{}},"body":{}}],["gpslatitude",{"_index":596,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["gpslongitude",{"_index":597,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["graph",{"_index":1568,"title":{},"body":{"index.html":{},"modules.html":{}}}],["group",{"_index":923,"title":{},"body":{"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{}}}],["group'})@apiresponse({status",{"_index":925,"title":{},"body":{"controllers/GroupController.html":{}}}],["groupcontroller",{"_index":921,"title":{"controllers/GroupController.html":{}},"body":{"controllers/GroupController.html":{},"coverage.html":{}}}],["groupdto",{"_index":924,"title":{},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{}}}],["groupentity",{"_index":945,"title":{"entities/GroupEntity.html":{}},"body":{"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"coverage.html":{}}}],["groups",{"_index":935,"title":{},"body":{"controllers/GroupController.html":{}}}],["groupservice",{"_index":933,"title":{"injectables/GroupService.html":{}},"body":{"controllers/GroupController.html":{},"injectables/GroupService.html":{},"coverage.html":{}}}],["gui",{"_index":363,"title":{},"body":{"modules/AppModule.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["h",{"_index":1465,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["handles",{"_index":8,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{}}}],["hanldes",{"_index":514,"title":{},"body":{"controllers/CustomerController.html":{}}}],["hapi/joi",{"_index":287,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{},"dependencies.html":{}}}],["heading",{"_index":598,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["help",{"_index":1572,"title":{},"body":{"index.html":{}}}],["high",{"_index":1457,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["host",{"_index":1103,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["http",{"_index":968,"title":{},"body":{"modules/HttpConfigModule.html":{},"injectables/UserService.html":{}}}],["http://localhost:4200",{"_index":1540,"title":{},"body":{"index.html":{}}}],["http_max_redirects",{"_index":966,"title":{},"body":{"modules/HttpConfigModule.html":{}}}],["http_timeout",{"_index":964,"title":{},"body":{"modules/HttpConfigModule.html":{}}}],["httpcode",{"_index":85,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.created",{"_index":118,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.ok",{"_index":132,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["httpconfigmodule",{"_index":959,"title":{"modules/HttpConfigModule.html":{}},"body":{"modules/HttpConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["httpconfigservice",{"_index":962,"title":{},"body":{"modules/HttpConfigModule.html":{},"overview.html":{}}}],["httpexception",{"_index":241,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["httpstatus",{"_index":86,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["httpstatus.created",{"_index":123,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["httpstatus.forbidden",{"_index":261,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["id",{"_index":58,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"controllers/UserController.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["id'})@apiresponse({status",{"_index":56,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["id:number",{"_index":419,"title":{},"body":{"controllers/AssetController.html":{},"controllers/UserController.html":{}}}],["id:number):promise",{"_index":416,"title":{},"body":{"controllers/AssetController.html":{}}}],["identifier",{"_index":1375,"title":{},"body":{"coverage.html":{}}}],["id}).execute",{"_index":920,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["if(user){return",{"_index":1370,"title":{},"body":{"injectables/UserService.html":{}}}],["ignore",{"_index":265,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{}}}],["im",{"_index":156,"title":{},"body":{"entities/AplEntity.html":{}}}],["implemented",{"_index":1333,"title":{},"body":{"entities/UserLogin.html":{}}}],["implements",{"_index":368,"title":{},"body":{"modules/AppModule.html":{}}}],["import",{"_index":83,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["imported",{"_index":1535,"title":{},"body":{"index.html":{}}}],["imports",{"_index":292,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["include",{"_index":1497,"title":{},"body":{"index.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["individual",{"_index":1350,"title":{},"body":{"injectables/UserService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":1117,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["injectable",{"_index":217,"title":{"injectables/AplService.html":{},"injectables/AppService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AplService.html":{},"injectables/AppService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":218,"title":{},"body":{"injectables/AplService.html":{},"injectables/AppService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":242,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["injectrepository(aplentity",{"_index":248,"title":{},"body":{"injectables/AplService.html":{}}}],["injectrepository(assetentity",{"_index":498,"title":{},"body":{"injectables/AssetService.html":{}}}],["injectrepository(customerentity",{"_index":557,"title":{},"body":{"injectables/CustomerService.html":{}}}],["injectrepository(eventdetailsentity",{"_index":589,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["injectrepository(geofenceentity",{"_index":885,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["injectrepository(groupentity",{"_index":958,"title":{},"body":{"injectables/GroupService.html":{}}}],["injectrepository(landmarkentity",{"_index":887,"title":{},"body":{"injectables/GeofenceService.html":{},"injectables/LandmarkService.html":{}}}],["injectrepository(layerentity",{"_index":886,"title":{},"body":{"injectables/GeofenceService.html":{},"injectables/LayerService.html":{}}}],["injectrepository(notificationemailentity",{"_index":1190,"title":{},"body":{"injectables/NotificationService.html":{}}}],["injectrepository(notificationentity",{"_index":1188,"title":{},"body":{"injectables/NotificationService.html":{}}}],["injectrepository(notificationtemplateentity",{"_index":1189,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{}}}],["injectrepository(userentity",{"_index":888,"title":{},"body":{"injectables/GeofenceService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["input",{"_index":1178,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["insert",{"_index":215,"title":{},"body":{"entities/AplItemEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{}}}],["inside",{"_index":326,"title":{},"body":{"controllers/AppController.html":{},"miscellaneous/enumerations.html":{}}}],["install",{"_index":1507,"title":{},"body":{"index.html":{}}}],["instantly",{"_index":1595,"title":{},"body":{"index.html":{}}}],["integrate",{"_index":367,"title":{},"body":{"modules/AppModule.html":{}}}],["interceptors/response.interceptor",{"_index":404,"title":{},"body":{"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/GeofenceController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["interceptors/transform.interceptor",{"_index":99,"title":{},"body":{"controllers/AplController.html":{},"controllers/AppController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/NotificationTemplateController.html":{}}}],["isnull",{"_index":1186,"title":{},"body":{"injectables/NotificationService.html":{}}}],["item",{"_index":164,"title":{},"body":{"entities/AplEntity.html":{}}}],["item.apl",{"_index":165,"title":{},"body":{"entities/AplEntity.html":{}}}],["jest",{"_index":1560,"title":{},"body":{"index.html":{}}}],["joi",{"_index":286,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{},"dependencies.html":{}}}],["joi.boolean().default(true",{"_index":1088,"title":{},"body":{"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["joi.number().default('3306",{"_index":1080,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["joi.number().default('5432",{"_index":1260,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["joi.number().default(3333",{"_index":311,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.number().default(5",{"_index":967,"title":{},"body":{"modules/HttpConfigModule.html":{}}}],["joi.number().default(5000",{"_index":965,"title":{},"body":{"modules/HttpConfigModule.html":{}}}],["joi.object",{"_index":296,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["joi.string",{"_index":301,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string().default",{"_index":1084,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["joi.string().default('/client",{"_index":313,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string().default('103.10.234.158",{"_index":1258,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["joi.string().default('admin@123",{"_index":1264,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["joi.string().default('application",{"_index":298,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string().default('http://my",{"_index":308,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["joi.string().default('localhost",{"_index":1078,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["joi.string().default('root",{"_index":1082,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["joi.string().default('star",{"_index":1262,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["joi.string().default('star_s",{"_index":1086,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["joi.string().default('starapi",{"_index":1266,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["join",{"_index":349,"title":{},"body":{"modules/AppModule.html":{}}}],["joincolumn",{"_index":212,"title":{},"body":{"entities/AplItemEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/LandmarkEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["joincolumn({name",{"_index":216,"title":{},"body":{"entities/AplItemEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/LandmarkEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["json",{"_index":813,"title":{},"body":{"entities/GeofenceEntity.html":{},"entities/LandmarkEntity.html":{}}}],["json.stringify(d",{"_index":130,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{}}}],["json.stringify(layer",{"_index":258,"title":{},"body":{"injectables/AplService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{}}}],["json}payload",{"_index":1364,"title":{},"body":{"injectables/UserService.html":{}}}],["jwt",{"_index":1425,"title":{},"body":{"dependencies.html":{}}}],["landmark",{"_index":718,"title":{},"body":{"entities/GeoObjectEntity.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{}}}],["landmark'})@apiresponse({status",{"_index":975,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["landmark.entity",{"_index":728,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["landmark.id",{"_index":902,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["landmark_layer_id",{"_index":1003,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["landmarkcontroller",{"_index":971,"title":{"controllers/LandmarkController.html":{}},"body":{"controllers/LandmarkController.html":{},"coverage.html":{}}}],["landmarkcreatedto",{"_index":974,"title":{},"body":{"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{}}}],["landmarkentity",{"_index":101,"title":{"entities/LandmarkEntity.html":{}},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"entities/GeoObjectEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["landmarkid",{"_index":791,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["landmarkrepository",{"_index":866,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["landmarks",{"_index":973,"title":{},"body":{"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{}}}],["landmarkservice",{"_index":983,"title":{"injectables/LandmarkService.html":{}},"body":{"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"coverage.html":{}}}],["lastname",{"_index":1319,"title":{},"body":{"entities/UserEntity.html":{}}}],["latitude",{"_index":656,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["layer",{"_index":252,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["layer'})@apiresponse({status",{"_index":1027,"title":{},"body":{"controllers/LayerController.html":{}}}],["layer.entity",{"_index":1009,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["layer.id",{"_index":900,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["layer.status",{"_index":254,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["layercontroller",{"_index":1025,"title":{"controllers/LayerController.html":{}},"body":{"controllers/LayerController.html":{},"coverage.html":{}}}],["layercreatedto",{"_index":484,"title":{},"body":{"injectables/AssetService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{}}}],["layerentity",{"_index":877,"title":{"entities/LayerEntity.html":{}},"body":{"injectables/GeofenceService.html":{},"entities/LandmarkEntity.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"coverage.html":{}}}],["layerid",{"_index":792,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["layermodule",{"_index":354,"title":{},"body":{"modules/AppModule.html":{}}}],["layerrepository",{"_index":865,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["layers",{"_index":1039,"title":{},"body":{"controllers/LayerController.html":{},"entities/LayerEntity.html":{}}}],["layers'})@apiresponse({status",{"_index":1029,"title":{},"body":{"controllers/LayerController.html":{}}}],["layerservice",{"_index":1037,"title":{"injectables/LayerService.html":{}},"body":{"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"coverage.html":{}}}],["learn",{"_index":1574,"title":{},"body":{"index.html":{}}}],["leftjoinandmapmany('t.notifications',geofencenotificationentity,'n','t.id",{"_index":903,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["leftjoinandmapmany('t.vehicles',geofenceassetentity,'a','t.id",{"_index":908,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["leftjoinandmapone('a.asset",{"_index":910,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["leftjoinandmapone('n.notification",{"_index":905,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["leftjoinandmapone('t.customer',customerentity,'customer','t.customer_id",{"_index":897,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["leftjoinandmapone('t.landmark',landmarkentity,'landmark','t.g_landmark_id",{"_index":901,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["leftjoinandmapone('t.layer',layerentity,'layer','t.g_layer_id",{"_index":899,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["legtime",{"_index":657,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["length",{"_index":171,"title":{},"body":{"entities/AplEntity.html":{},"entities/AssetEntity.html":{},"entities/GeofenceEntity.html":{},"entities/NotificationEntity.html":{}}}],["lib",{"_index":1533,"title":{},"body":{"index.html":{}}}],["libraries",{"_index":1499,"title":{},"body":{"index.html":{}}}],["library",{"_index":1531,"title":{},"body":{"index.html":{}}}],["license",{"_index":1624,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":269,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["list",{"_index":64,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["load",{"_index":294,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["local",{"_index":1427,"title":{},"body":{"dependencies.html":{}}}],["location",{"_index":704,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["location.flightplan",{"_index":705,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["locationradius",{"_index":658,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["locations",{"_index":700,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["locationtype",{"_index":995,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["lodash",{"_index":497,"title":{},"body":{"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["logged",{"_index":413,"title":{},"body":{"controllers/AssetController.html":{}}}],["logger",{"_index":87,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["logger(aplcontroller.name",{"_index":115,"title":{},"body":{"controllers/AplController.html":{}}}],["logger(aplservice.name",{"_index":240,"title":{},"body":{"injectables/AplService.html":{}}}],["logger(assetcontroller.name",{"_index":410,"title":{},"body":{"controllers/AssetController.html":{}}}],["logger(assetservice.name",{"_index":493,"title":{},"body":{"injectables/AssetService.html":{}}}],["logger(customercontroller.name",{"_index":526,"title":{},"body":{"controllers/CustomerController.html":{}}}],["logger(customerservice.name",{"_index":555,"title":{},"body":{"injectables/CustomerService.html":{}}}],["logger(eventdetailcontroller.name",{"_index":576,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["logger(eventdetailservice.name",{"_index":588,"title":{},"body":{"injectables/EventDetailService.html":{}}}],["logger(geofencecontroller.name",{"_index":781,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["logger(geofenceservice.name",{"_index":876,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["logger(groupcontroller.name",{"_index":937,"title":{},"body":{"controllers/GroupController.html":{}}}],["logger(groupservice.name",{"_index":956,"title":{},"body":{"injectables/GroupService.html":{}}}],["logger(landmarkcontroller.name",{"_index":986,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["logger(landmarkservice.name",{"_index":1022,"title":{},"body":{"injectables/LandmarkService.html":{}}}],["logger(layercontroller.name",{"_index":1041,"title":{},"body":{"controllers/LayerController.html":{}}}],["logger(layerservice.name",{"_index":1070,"title":{},"body":{"injectables/LayerService.html":{}}}],["logger(notificationcontroller.name",{"_index":1135,"title":{},"body":{"controllers/NotificationController.html":{}}}],["logger(notificationservice.name",{"_index":1185,"title":{},"body":{"injectables/NotificationService.html":{}}}],["logger(notificationtemplatecontroller.name",{"_index":1210,"title":{},"body":{"controllers/NotificationTemplateController.html":{}}}],["logger(notificationtemplateservice.name",{"_index":1230,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["logger(usercontroller.name",{"_index":1300,"title":{},"body":{"controllers/UserController.html":{}}}],["logger(userservice.name",{"_index":1361,"title":{},"body":{"injectables/UserService.html":{}}}],["loggermiddleware",{"_index":352,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":1111,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["login",{"_index":1291,"title":{},"body":{"controllers/UserController.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["logindata",{"_index":1366,"title":{},"body":{"injectables/UserService.html":{}}}],["logindata.findone({username",{"_index":1369,"title":{},"body":{"injectables/UserService.html":{}}}],["logindto",{"_index":1289,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["longitude",{"_index":659,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["low",{"_index":1456,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["made",{"_index":1344,"title":{},"body":{"injectables/UserService.html":{}}}],["many",{"_index":1489,"title":{},"body":{"index.html":{}}}],["manytoone",{"_index":213,"title":{},"body":{"entities/AplItemEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/LandmarkEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["manytoone(undefined",{"_index":193,"title":{},"body":{"entities/AplItemEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["map",{"_index":736,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{},"entities/UserLogin.html":{}}}],["map.emails",{"_index":1141,"title":{},"body":{"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["map.notifications",{"_index":857,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{}}}],["map.vehicles",{"_index":755,"title":{},"body":{"entities/GeofenceAssetEntity.html":{}}}],["map.vehicles)@joincolumn({name",{"_index":737,"title":{},"body":{"entities/GeofenceAssetEntity.html":{}}}],["match",{"_index":1359,"title":{},"body":{"injectables/UserService.html":{}}}],["matched",{"_index":1067,"title":{},"body":{"injectables/LayerService.html":{}}}],["matching",{"_index":147,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["max_altitude",{"_index":819,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["max_velocity",{"_index":821,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["maxaltitude",{"_index":793,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["maxredirects",{"_index":970,"title":{},"body":{"modules/HttpConfigModule.html":{}}}],["maxval",{"_index":186,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["maxvelocity",{"_index":794,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["medium",{"_index":1458,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["message",{"_index":372,"title":{},"body":{"injectables/AppService.html":{}}}],["message.dto",{"_index":329,"title":{},"body":{"controllers/AppController.html":{}}}],["messagedto",{"_index":327,"title":{},"body":{"controllers/AppController.html":{}}}],["metadata",{"_index":1432,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":37,"title":{},"body":{"controllers/AplController.html":{},"modules/AppModule.html":{},"injectables/AssetService.html":{},"injectables/GeofenceService.html":{},"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["methods",{"_index":13,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["middleware/logs.middleware",{"_index":353,"title":{},"body":{"modules/AppModule.html":{}}}],["middlewareconsumer",{"_index":340,"title":{},"body":{"modules/AppModule.html":{}}}],["min_altitude",{"_index":823,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["min_velocity",{"_index":825,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["minaltitude",{"_index":795,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["minval",{"_index":187,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["minvelocity",{"_index":796,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["miscellaneous",{"_index":1441,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["mit",{"_index":1625,"title":{},"body":{"properties.html":{}}}],["module",{"_index":273,"title":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["modules",{"_index":275,"title":{"modules.html":{}},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/layers/layer.module",{"_index":355,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":1575,"title":{},"body":{"index.html":{}}}],["mplid",{"_index":188,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["msg.res.dto",{"_index":376,"title":{},"body":{"injectables/AppService.html":{}}}],["msgresdto",{"_index":374,"title":{},"body":{"injectables/AppService.html":{}}}],["multiple",{"_index":1529,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":1090,"title":{},"body":{"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{}}}],["mysql2",{"_index":1420,"title":{},"body":{"dependencies.html":{}}}],["mysql_dbname",{"_index":1085,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["mysql_host",{"_index":1077,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["mysql_password",{"_index":1083,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["mysql_port",{"_index":1079,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["mysql_username",{"_index":1081,"title":{},"body":{"modules/MySqlConfigModule.html":{}}}],["mysqlconfigmodule",{"_index":1072,"title":{"modules/MySqlConfigModule.html":{}},"body":{"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"modules.html":{},"overview.html":{}}}],["mysqlconfigservice",{"_index":1075,"title":{},"body":{"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"overview.html":{}}}],["mysqlconfigservice.dbname",{"_index":1110,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{}}}],["mysqlconfigservice.host",{"_index":1104,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{}}}],["mysqlconfigservice.logging",{"_index":1112,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{}}}],["mysqlconfigservice.password",{"_index":1109,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{}}}],["mysqlconfigservice.port",{"_index":1105,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{}}}],["mysqlconfigservice.synchronize",{"_index":1114,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{}}}],["mysqlconfigservice.username",{"_index":1107,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{}}}],["mysqldatabaseprovidermodule",{"_index":1092,"title":{"modules/MysqlDatabaseProviderModule.html":{}},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules.html":{}}}],["n.geofence_id",{"_index":904,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["name",{"_index":40,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["name:'userlogin",{"_index":1331,"title":{},"body":{"entities/UserLogin.html":{}}}],["name:string",{"_index":375,"title":{},"body":{"injectables/AppService.html":{}}}],["navigate",{"_index":1539,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1516,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":95,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"modules/AppModule.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/axios",{"_index":1390,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":90,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":289,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1394,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":1395,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":1397,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":347,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":94,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":243,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"modules/MysqlDatabaseProviderModule.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"modules/PostgresDatabaseProviderModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjsx/crud",{"_index":1402,"title":{},"body":{"dependencies.html":{}}}],["nestmodule",{"_index":344,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":114,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/FlighLocationEntity.html":{},"entities/GeoObjectEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["node",{"_index":1519,"title":{},"body":{"index.html":{}}}],["nofitication",{"_index":1179,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notiemailrepository",{"_index":1175,"title":{},"body":{"injectables/NotificationService.html":{}}}],["notifciation",{"_index":1221,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["notification",{"_index":189,"title":{},"body":{"entities/AplItemEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"miscellaneous/enumerations.html":{}}}],["notification'})@apiresponse({status",{"_index":1121,"title":{},"body":{"controllers/NotificationController.html":{}}}],["notification.email.entity",{"_index":1169,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["notification.entity",{"_index":1144,"title":{},"body":{"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["notification.id",{"_index":907,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["notification.template.entity",{"_index":1170,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["notification.user.entity",{"_index":1171,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["notification_emails",{"_index":1145,"title":{},"body":{"entities/NotificationEmailEntity.html":{}}}],["notification_id",{"_index":860,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["notification_template",{"_index":1217,"title":{},"body":{"entities/NotificationTemplateEntity.html":{}}}],["notification_users",{"_index":1238,"title":{},"body":{"entities/NotificationUserEntity.html":{}}}],["notificationcontroller",{"_index":1118,"title":{"controllers/NotificationController.html":{}},"body":{"controllers/NotificationController.html":{},"coverage.html":{}}}],["notificationdto",{"_index":1120,"title":{},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{}}}],["notificationemailentity",{"_index":1136,"title":{"entities/NotificationEmailEntity.html":{}},"body":{"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"coverage.html":{}}}],["notificationentity",{"_index":882,"title":{"entities/NotificationEntity.html":{}},"body":{"injectables/GeofenceService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"entities/NotificationUserEntity.html":{},"coverage.html":{}}}],["notificationentity,'notification','n.notification_id",{"_index":906,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["notificationid",{"_index":854,"title":{},"body":{"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{}}}],["notifications",{"_index":797,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["notificationservice",{"_index":1132,"title":{"injectables/NotificationService.html":{}},"body":{"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"coverage.html":{}}}],["notificationtemplatecontroller",{"_index":1198,"title":{"controllers/NotificationTemplateController.html":{}},"body":{"controllers/NotificationTemplateController.html":{},"coverage.html":{}}}],["notificationtemplatedto",{"_index":1200,"title":{},"body":{"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{}}}],["notificationtemplateentity",{"_index":1130,"title":{"entities/NotificationTemplateEntity.html":{}},"body":{"controllers/NotificationController.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"coverage.html":{}}}],["notificationtemplateservice",{"_index":1208,"title":{"injectables/NotificationTemplateService.html":{}},"body":{"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"coverage.html":{}}}],["notificationtypeenum",{"_index":1163,"title":{},"body":{"entities/NotificationEntity.html":{},"miscellaneous/enumerations.html":{}}}],["notificationtypeenum.email",{"_index":1172,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["notificationuserentity",{"_index":1165,"title":{"entities/NotificationUserEntity.html":{}},"body":{"entities/NotificationEntity.html":{},"entities/NotificationUserEntity.html":{},"coverage.html":{}}}],["notify",{"_index":798,"title":{},"body":{"entities/GeofenceEntity.html":{},"miscellaneous/enumerations.html":{}}}],["notify?:notifyenum",{"_index":850,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["notify_email",{"_index":834,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["notify_map",{"_index":837,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["notifyemail",{"_index":799,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["notifyenum",{"_index":831,"title":{},"body":{"entities/GeofenceEntity.html":{},"miscellaneous/enumerations.html":{}}}],["notifyenum.inside",{"_index":849,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["notifymap",{"_index":800,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["notitifcation",{"_index":1124,"title":{},"body":{"controllers/NotificationController.html":{}}}],["npm",{"_index":1506,"title":{},"body":{"index.html":{}}}],["npotification",{"_index":1147,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["nrwl/angular",{"_index":1515,"title":{},"body":{"index.html":{}}}],["nrwl/express",{"_index":1518,"title":{},"body":{"index.html":{}}}],["nrwl/nest",{"_index":1517,"title":{},"body":{"index.html":{}}}],["nrwl/node",{"_index":1520,"title":{},"body":{"index.html":{}}}],["nrwl/react",{"_index":1509,"title":{},"body":{"index.html":{}}}],["nrwl/react:app",{"_index":1526,"title":{},"body":{"index.html":{}}}],["nrwl/react:component",{"_index":1547,"title":{},"body":{"index.html":{}}}],["nrwl/react:lib",{"_index":1532,"title":{},"body":{"index.html":{}}}],["nrwl/web",{"_index":1513,"title":{},"body":{"index.html":{}}}],["null",{"_index":259,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["nullable",{"_index":198,"title":{},"body":{"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/UserEntity.html":{}}}],["number",{"_index":70,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["number}customerid",{"_index":504,"title":{},"body":{"injectables/AssetService.html":{}}}],["number}id",{"_index":1024,"title":{},"body":{"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["nx",{"_index":1479,"title":{},"body":{"index.html":{}}}],["nx’s",{"_index":1603,"title":{},"body":{"index.html":{}}}],["o",{"_index":890,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["o.id",{"_index":892,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["object",{"_index":1362,"title":{},"body":{"injectables/UserService.html":{}}}],["object.assign(data",{"_index":895,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["object.assign(layer",{"_index":264,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["object.assign(o",{"_index":891,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["object}data",{"_index":1023,"title":{},"body":{"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{}}}],["ondelete",{"_index":611,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["onetomany",{"_index":176,"title":{},"body":{"entities/AplEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeofenceEntity.html":{},"entities/LayerEntity.html":{},"entities/NotificationEntity.html":{}}}],["onetomany('eventparamdetailsentity",{"_index":609,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["onetomany('geofenceassetentity",{"_index":843,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["onetomany('geofenceentity",{"_index":1057,"title":{},"body":{"entities/LayerEntity.html":{}}}],["onetomany('geofencenotificationentity",{"_index":829,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["onetomany('notificationemailentity",{"_index":1154,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["onetomany('notificationuserentity",{"_index":1166,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["onetomany(undefined",{"_index":163,"title":{},"body":{"entities/AplEntity.html":{},"entities/FlighPlanEntity.html":{}}}],["onetoone",{"_index":727,"title":{},"body":{"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/LandmarkEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["onetoone('geoobjectentity",{"_index":997,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["onetoone('landmarkentity",{"_index":723,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["onetoone(type",{"_index":1156,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["onetoone(undefined",{"_index":1002,"title":{},"body":{"entities/LandmarkEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["optional",{"_index":42,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"modules/AppModule.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["options",{"_index":266,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["order",{"_index":1583,"title":{},"body":{"index.html":{}}}],["out",{"_index":283,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{},"overview.html":{}}}],["outside",{"_index":1462,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["overview",{"_index":1619,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":1467,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["package",{"_index":1388,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packed",{"_index":1464,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["packettype",{"_index":599,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{}}}],["packettypeenum",{"_index":617,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"miscellaneous/enumerations.html":{}}}],["packettypeenum.a",{"_index":630,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{}}}],["page",{"_index":267,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["paginate",{"_index":19,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["paginate(@body",{"_index":144,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["paginate(state",{"_index":61,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["paginate(this.querybuilderservice.getquery(state",{"_index":272,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["pagination",{"_index":67,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["pagination'})@apiresponse({status",{"_index":65,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["pairs",{"_index":1582,"title":{},"body":{"index.html":{}}}],["param",{"_index":88,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["paramcount",{"_index":600,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["parameters",{"_index":39,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"modules/AppModule.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["paramid",{"_index":634,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["paramvalue",{"_index":635,"title":{},"body":{"entities/EventParamDetailsEntity.html":{}}}],["passport",{"_index":1423,"title":{},"body":{"dependencies.html":{}}}],["password",{"_index":1108,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["password===this.password?true:false",{"_index":1337,"title":{},"body":{"entities/UserLogin.html":{}}}],["path",{"_index":107,"title":{},"body":{"controllers/AplController.html":{},"modules/AppModule.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["pattern",{"_index":1408,"title":{},"body":{"dependencies.html":{}}}],["payload",{"_index":1358,"title":{},"body":{"injectables/UserService.html":{}}}],["pending",{"_index":1472,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pg",{"_index":1429,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":435,"title":{},"body":{"entities/AssetEntity.html":{}}}],["phonenumber",{"_index":539,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["pilots",{"_index":660,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["plan",{"_index":676,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["plan.locations",{"_index":677,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["plugins",{"_index":1490,"title":{},"body":{"index.html":{}}}],["plus",{"_index":1607,"title":{},"body":{"index.html":{}}}],["port",{"_index":364,"title":{},"body":{"modules/AppModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["post",{"_index":36,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["post('paginate",{"_index":143,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["post('paginate')@apioperation({summary",{"_index":63,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["post('user/authenticate",{"_index":1311,"title":{},"body":{"controllers/UserController.html":{}}}],["post('user/authenticate')@apioperation({summary",{"_index":1290,"title":{},"body":{"controllers/UserController.html":{}}}],["post()@httpcode(httpstatus.created)@apioperation({summary",{"_index":385,"title":{},"body":{"controllers/AssetController.html":{},"controllers/GeofenceController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["post()@httpcode(httpstatus.created)@useinterceptors(new",{"_index":26,"title":{},"body":{"controllers/AplController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GroupController.html":{}}}],["postgres",{"_index":1245,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["postgres_dbname",{"_index":1265,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["postgres_host",{"_index":1257,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["postgres_password",{"_index":1263,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["postgres_port",{"_index":1259,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["postgres_username",{"_index":1261,"title":{},"body":{"modules/PostgresSQLConfigModule.html":{}}}],["postgresconfigservice",{"_index":1246,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["postgresconfigservice.dbname",{"_index":1251,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["postgresconfigservice.host",{"_index":1247,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["postgresconfigservice.logging",{"_index":1252,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["postgresconfigservice.password",{"_index":1250,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["postgresconfigservice.port",{"_index":1248,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["postgresconfigservice.synchronize",{"_index":1253,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["postgresconfigservice.username",{"_index":1249,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{}}}],["postgresdatabaseprovidermodule",{"_index":336,"title":{"modules/PostgresDatabaseProviderModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules.html":{},"overview.html":{}}}],["postgressqlconfigmodule",{"_index":1240,"title":{"modules/PostgresSQLConfigModule.html":{}},"body":{"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["postgressqlconfigservice",{"_index":1242,"title":{},"body":{"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"overview.html":{}}}],["precision",{"_index":465,"title":{},"body":{"entities/AssetEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceEntity.html":{}}}],["preferred",{"_index":1601,"title":{},"body":{"index.html":{}}}],["primarygeneratedcolumn",{"_index":746,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{},"entities/UserLogin.html":{}}}],["private",{"_index":112,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["prod",{"_index":1554,"title":{},"body":{"index.html":{}}}],["production",{"_index":303,"title":{},"body":{"modules/AppConfigModule.html":{},"index.html":{}}}],["project",{"_index":1476,"title":{},"body":{"index.html":{}}}],["project=my",{"_index":1549,"title":{},"body":{"index.html":{}}}],["projects",{"_index":1503,"title":{},"body":{"index.html":{}}}],["promise",{"_index":45,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":158,"title":{"properties.html":{}},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"properties.html":{}}}],["property",{"_index":1071,"title":{},"body":{"injectables/LayerService.html":{}}}],["provided",{"_index":60,"title":{},"body":{"controllers/AplController.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["providers",{"_index":314,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["providers/database/postgres/provider.module",{"_index":356,"title":{},"body":{"modules/AppModule.html":{}}}],["provides",{"_index":220,"title":{},"body":{"injectables/AplService.html":{}}}],["provision",{"_index":305,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["provoded",{"_index":1353,"title":{},"body":{"injectables/UserService.html":{}}}],["public",{"_index":14,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["put",{"_index":81,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["put(':id",{"_index":137,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["put(':id')@httpcode(httpstatus.created)@apioperation({summary",{"_index":767,"title":{},"body":{"controllers/GeofenceController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["put(':id')@httpcode(httpstatus.created)@useinterceptors(new",{"_index":78,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{},"controllers/GroupController.html":{}}}],["put()@httpcode(httpstatus.created)@apioperation({summary",{"_index":400,"title":{},"body":{"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/UserController.html":{}}}],["queries",{"_index":1219,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["query",{"_index":221,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{}}}],["querybuilder",{"_index":226,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["querybuilderservice",{"_index":225,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["radius",{"_index":661,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["rapidly",{"_index":1585,"title":{},"body":{"index.html":{}}}],["react",{"_index":362,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["readonly",{"_index":113,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AppController.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["referencedcolumnname",{"_index":1000,"title":{},"body":{"entities/LandmarkEntity.html":{}}}],["reflect",{"_index":1431,"title":{},"body":{"dependencies.html":{}}}],["related",{"_index":10,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["reload",{"_index":1542,"title":{},"body":{"index.html":{}}}],["remove",{"_index":20,"title":{},"body":{"controllers/AplController.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":141,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":69,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["removes",{"_index":234,"title":{},"body":{"injectables/AplService.html":{},"injectables/LandmarkService.html":{}}}],["repository",{"_index":224,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["request",{"_index":75,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/UserController.html":{}}}],["requestmethod",{"_index":345,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":370,"title":{},"body":{"modules/AppModule.html":{}}}],["requests",{"_index":9,"title":{},"body":{"controllers/AplController.html":{},"controllers/CustomerController.html":{},"controllers/NotificationTemplateController.html":{}}}],["reset",{"_index":282,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{},"overview.html":{}}}],["respective",{"_index":157,"title":{},"body":{"entities/AplEntity.html":{},"entities/AssetEntity.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["restransforminterceptor",{"_index":403,"title":{},"body":{"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/GeofenceController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["results",{"_index":146,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":131,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":44,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["role",{"_index":1334,"title":{},"body":{"entities/UserLogin.html":{}}}],["root",{"_index":360,"title":{},"body":{"modules/AppModule.html":{}}}],["rootpath",{"_index":366,"title":{},"body":{"modules/AppModule.html":{}}}],["routebufferheight",{"_index":662,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["routebufferwidth",{"_index":663,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["rquest",{"_index":1031,"title":{},"body":{"controllers/LayerController.html":{}}}],["run",{"_index":1524,"title":{},"body":{"index.html":{}}}],["running",{"_index":318,"title":{},"body":{"modules/AppConfigModule.html":{},"index.html":{}}}],["rxjs",{"_index":1434,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":1530,"title":{},"body":{"index.html":{}}}],["save",{"_index":1015,"title":{},"body":{"injectables/LandmarkService.html":{},"index.html":{}}}],["saved",{"_index":1018,"title":{},"body":{"injectables/LandmarkService.html":{}}}],["saves",{"_index":1016,"title":{},"body":{"injectables/LandmarkService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["saving",{"_index":1593,"title":{},"body":{"index.html":{}}}],["scaffolding",{"_index":1546,"title":{},"body":{"index.html":{}}}],["scale",{"_index":467,"title":{},"body":{"entities/AssetEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceEntity.html":{}}}],["schedule_end_time",{"_index":839,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["schedule_start_time",{"_index":841,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["scheduledarrivaltime",{"_index":664,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["scheduleddeparturetime",{"_index":601,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/FlighPlanEntity.html":{}}}],["scheduleendtime",{"_index":801,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["schedulestarttime",{"_index":802,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["search",{"_index":1228,"title":{},"body":{"injectables/NotificationTemplateService.html":{}}}],["see",{"_index":1569,"title":{},"body":{"index.html":{}}}],["sequence",{"_index":665,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["serve",{"_index":357,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["server",{"_index":1538,"title":{},"body":{"index.html":{}}}],["servestaticmodule",{"_index":346,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":365,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":869,"title":{},"body":{"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"miscellaneous/enumerations.html":{}}}],["service/apl.service",{"_index":104,"title":{},"body":{"controllers/AplController.html":{}}}],["service/asset.service",{"_index":407,"title":{},"body":{"controllers/AssetController.html":{}}}],["service/customer.service",{"_index":524,"title":{},"body":{"controllers/CustomerController.html":{}}}],["service/event.detail.service",{"_index":574,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["service/geofence.service",{"_index":779,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["service/group.service",{"_index":934,"title":{},"body":{"controllers/GroupController.html":{}}}],["service/landmark.service",{"_index":984,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["service/layer.service",{"_index":1038,"title":{},"body":{"controllers/LayerController.html":{}}}],["service/notification.service",{"_index":1133,"title":{},"body":{"controllers/NotificationController.html":{}}}],["service/notification.template.service",{"_index":1209,"title":{},"body":{"controllers/NotificationTemplateController.html":{}}}],["service/query.builder.service",{"_index":246,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["service/secured",{"_index":299,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["service/user.service",{"_index":1298,"title":{},"body":{"controllers/UserController.html":{}}}],["services",{"_index":228,"title":{},"body":{"injectables/AplService.html":{},"injectables/CustomerService.html":{},"injectables/GeofenceService.html":{},"controllers/LayerController.html":{},"injectables/UserService.html":{}}}],["serving",{"_index":361,"title":{},"body":{"modules/AppModule.html":{}}}],["severity",{"_index":190,"title":{},"body":{"entities/AplItemEntity.html":{},"miscellaneous/enumerations.html":{}}}],["severityenum",{"_index":1449,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["shareable",{"_index":1534,"title":{},"body":{"index.html":{}}}],["simple",{"_index":812,"title":{},"body":{"entities/GeofenceEntity.html":{},"entities/LandmarkEntity.html":{}}}],["smart",{"_index":1480,"title":{},"body":{"index.html":{}}}],["sms",{"_index":1460,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sms_template_id",{"_index":1160,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["smstemplate",{"_index":1150,"title":{},"body":{"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"modules/AppConfigModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"modules/HttpConfigModule.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MySqlConfigModule.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"modules/PostgresSQLConfigModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"index.html":{}}}],["speed",{"_index":602,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["srid",{"_index":719,"title":{},"body":{"entities/GeoObjectEntity.html":{}}}],["stack",{"_index":1600,"title":{},"body":{"index.html":{}}}],["stage",{"_index":666,"title":{},"body":{"entities/FlighLocationEntity.html":{}}}],["starnavigationapi",{"_index":378,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["starnavigationapi/mylib",{"_index":1536,"title":{},"body":{"index.html":{}}}],["starnavigationsystem",{"_index":379,"title":{},"body":{"injectables/AppService.html":{}}}],["start",{"_index":1592,"title":{},"body":{"index.html":{}}}],["started",{"_index":1475,"title":{"index.html":{}},"body":{}}],["starttime",{"_index":603,"title":{},"body":{"entities/EventDetailsEntity.html":{}}}],["state",{"_index":68,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/FlighLocationEntity.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["state.page.current",{"_index":268,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["state.page.size",{"_index":270,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["statedto",{"_index":62,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["statements",{"_index":1376,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":348,"title":{},"body":{"modules/AppModule.html":{},"entities/UserLogin.html":{},"dependencies.html":{}}}],["status",{"_index":122,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["statusenum",{"_index":244,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["statusenum.active",{"_index":501,"title":{},"body":{"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/GeofenceService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["statusenum.deleted",{"_index":255,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["stoptime",{"_index":604,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{}}}],["stored",{"_index":1551,"title":{},"body":{"index.html":{}}}],["string",{"_index":170,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AppService.html":{},"entities/AssetEntity.html":{},"entities/CustomerEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceEntity.html":{},"entities/GroupEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationTemplateEntity.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{}}}],["subject",{"_index":1212,"title":{},"body":{"entities/NotificationTemplateEntity.html":{}}}],["successfully",{"_index":32,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["summary",{"_index":121,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["support",{"_index":1615,"title":{},"body":{"modules.html":{}}}],["supports",{"_index":1488,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1616,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1418,"title":{},"body":{"dependencies.html":{}}}],["symbolcolor",{"_index":436,"title":{},"body":{"entities/AssetEntity.html":{}}}],["symbolsize",{"_index":437,"title":{},"body":{"entities/AssetEntity.html":{}}}],["symbolstrokecolor",{"_index":438,"title":{},"body":{"entities/AssetEntity.html":{}}}],["symbolstrokesize",{"_index":439,"title":{},"body":{"entities/AssetEntity.html":{}}}],["synchronize",{"_index":1113,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["system",{"_index":1484,"title":{},"body":{"index.html":{}}}],["t",{"_index":1466,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["table",{"_index":155,"title":{},"body":{"entities/AplEntity.html":{},"entities/AssetEntity.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1387,"title":{},"body":{"coverage.html":{}}}],["tailnumber",{"_index":701,"title":{},"body":{"entities/FlighPlanEntity.html":{}}}],["takes",{"_index":1014,"title":{},"body":{"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["task",{"_index":1580,"title":{},"body":{"index.html":{}}}],["tbl.target",{"_index":1116,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["teams",{"_index":1590,"title":{},"body":{"index.html":{}}}],["template",{"_index":763,"title":{},"body":{"controllers/GeofenceController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{}}}],["template'})@apiresponse({status",{"_index":768,"title":{},"body":{"controllers/GeofenceController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["templaterepository",{"_index":1174,"title":{},"body":{"injectables/NotificationService.html":{}}}],["test",{"_index":304,"title":{},"body":{"modules/AppConfigModule.html":{},"index.html":{}}}],["tests",{"_index":1557,"title":{},"body":{"index.html":{}}}],["text",{"_index":1213,"title":{},"body":{"entities/NotificationTemplateEntity.html":{}}}],["this.aplservice.create(data",{"_index":128,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{}}}],["this.aplservice.findall",{"_index":133,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{}}}],["this.aplservice.findbyid(id",{"_index":136,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{}}}],["this.aplservice.paginate(state",{"_index":145,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{}}}],["this.aplservice.remove(id",{"_index":142,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{}}}],["this.aplservice.update(id",{"_index":139,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{}}}],["this.appservice.getdata",{"_index":331,"title":{},"body":{"controllers/AppController.html":{}}}],["this.assetservice.create(data",{"_index":411,"title":{},"body":{"controllers/AssetController.html":{}}}],["this.assetservice.findall",{"_index":412,"title":{},"body":{"controllers/AssetController.html":{}}}],["this.assetservice.finduserasset(id",{"_index":417,"title":{},"body":{"controllers/AssetController.html":{}}}],["this.assetservice.paginate(state",{"_index":423,"title":{},"body":{"controllers/AssetController.html":{}}}],["this.assetservice.remove(id",{"_index":422,"title":{},"body":{"controllers/AssetController.html":{}}}],["this.assetservice.update(data",{"_index":421,"title":{},"body":{"controllers/AssetController.html":{}}}],["this.customerservice.create(data",{"_index":528,"title":{},"body":{"controllers/CustomerController.html":{}}}],["this.customerservice.findall",{"_index":529,"title":{},"body":{"controllers/CustomerController.html":{}}}],["this.customerservice.findbyid(id",{"_index":530,"title":{},"body":{"controllers/CustomerController.html":{}}}],["this.customerservice.paginate(state",{"_index":533,"title":{},"body":{"controllers/CustomerController.html":{}}}],["this.customerservice.remove(id",{"_index":532,"title":{},"body":{"controllers/CustomerController.html":{}}}],["this.customerservice.update(data",{"_index":531,"title":{},"body":{"controllers/CustomerController.html":{}}}],["this.findbyid(id",{"_index":253,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["this.geofenceservice.create(data",{"_index":782,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["this.geofenceservice.findall",{"_index":783,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["this.geofenceservice.findbyid(id",{"_index":784,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["this.geofenceservice.paginate(state",{"_index":787,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["this.geofenceservice.remove(id",{"_index":786,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["this.geofenceservice.update(id",{"_index":785,"title":{},"body":{"controllers/GeofenceController.html":{}}}],["this.groupservice.create(data",{"_index":939,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.findall",{"_index":940,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.findbyid(id",{"_index":941,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.paginate(state",{"_index":944,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.remove(id",{"_index":943,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.update(id",{"_index":942,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.landmarkservice.create(data",{"_index":987,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["this.landmarkservice.findall",{"_index":988,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["this.landmarkservice.findbyid(id",{"_index":989,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["this.landmarkservice.paginate(state",{"_index":992,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["this.landmarkservice.remove(id",{"_index":991,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["this.landmarkservice.update(id",{"_index":990,"title":{},"body":{"controllers/LandmarkController.html":{}}}],["this.layerservice.create(data",{"_index":1042,"title":{},"body":{"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["this.layerservice.findall",{"_index":1043,"title":{},"body":{"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["this.layerservice.findbyid(id",{"_index":1044,"title":{},"body":{"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["this.layerservice.paginate(state",{"_index":1047,"title":{},"body":{"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["this.layerservice.remove(id",{"_index":1046,"title":{},"body":{"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["this.layerservice.update(id",{"_index":1045,"title":{},"body":{"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["this.logger.log(`data",{"_index":129,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{}}}],["this.logger.log(`update",{"_index":257,"title":{},"body":{"injectables/AplService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{}}}],["this.notiemailrepository.delete({notification",{"_index":1197,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.repository",{"_index":1367,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repository.createquerybuilder('t",{"_index":271,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["this.repository.createquerybuilder('t').update(geofenceentity).set({status",{"_index":918,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["this.repository.find",{"_index":251,"title":{},"body":{"injectables/AplService.html":{},"injectables/EventDetailService.html":{},"injectables/GroupService.html":{}}}],["this.repository.find({customerid",{"_index":506,"title":{},"body":{"injectables/AssetService.html":{}}}],["this.repository.find({status",{"_index":500,"title":{},"body":{"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["this.repository.findone",{"_index":250,"title":{},"body":{"injectables/AplService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["this.repository.findone({id",{"_index":499,"title":{},"body":{"injectables/AssetService.html":{}}}],["this.repository.save(data",{"_index":249,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["this.repository.save(geofence",{"_index":896,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["this.repository.save(layer",{"_index":256,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["this.templaterepository.findone({id",{"_index":1192,"title":{},"body":{"injectables/NotificationService.html":{}}}],["this.userservice.create(data",{"_index":1301,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":1302,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyaccounttype(accounttype",{"_index":1306,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyid(id",{"_index":1303,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.paginate(state",{"_index":1310,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(id",{"_index":1309,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(data",{"_index":1307,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.validate(logindto",{"_index":1317,"title":{},"body":{"controllers/UserController.html":{}}}],["threshold",{"_index":191,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["throw",{"_index":260,"title":{},"body":{"injectables/AplService.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["time",{"_index":1594,"title":{},"body":{"index.html":{}}}],["timeout",{"_index":969,"title":{},"body":{"modules/HttpConfigModule.html":{}}}],["times",{"_index":1588,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":623,"title":{},"body":{"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{}}}],["timezone",{"_index":1151,"title":{},"body":{"entities/NotificationEntity.html":{}}}],["tools",{"_index":1496,"title":{},"body":{"index.html":{}}}],["trackcolor",{"_index":440,"title":{},"body":{"entities/AssetEntity.html":{}}}],["trackwidth",{"_index":441,"title":{},"body":{"entities/AssetEntity.html":{}}}],["transformer",{"_index":1410,"title":{},"body":{"dependencies.html":{}}}],["transforminterceptor",{"_index":98,"title":{},"body":{"controllers/AplController.html":{},"controllers/AppController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/NotificationTemplateController.html":{}}}],["transforminterceptor())@apioperation({summary",{"_index":27,"title":{},"body":{"controllers/AplController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GroupController.html":{}}}],["transforminterceptor(apldto",{"_index":120,"title":{},"body":{"controllers/AplController.html":{}}}],["transforminterceptor(customerdto",{"_index":527,"title":{},"body":{"controllers/CustomerController.html":{}}}],["transforminterceptor(eventdetaildto",{"_index":577,"title":{},"body":{"controllers/EventDetailController.html":{}}}],["transforminterceptor(groupdto",{"_index":938,"title":{},"body":{"controllers/GroupController.html":{}}}],["transforminterceptor(messagedto",{"_index":330,"title":{},"body":{"controllers/AppController.html":{}}}],["transforminterceptor(userdto",{"_index":1308,"title":{},"body":{"controllers/UserController.html":{}}}],["true",{"_index":168,"title":{},"body":{"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"entities/AssetEntity.html":{},"entities/EventDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/GeofenceEntity.html":{},"entities/LandmarkEntity.html":{},"entities/LayerEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationUserEntity.html":{},"entities/UserEntity.html":{}}}],["true})@joincolumn({name",{"_index":998,"title":{},"body":{"entities/LandmarkEntity.html":{},"entities/NotificationEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["try",{"_index":1365,"title":{},"body":{"injectables/UserService.html":{}}}],["tslib",{"_index":1438,"title":{},"body":{"dependencies.html":{}}}],["twowaymessagemaxlength",{"_index":442,"title":{},"body":{"entities/AssetEntity.html":{}}}],["twowaymessaging",{"_index":443,"title":{},"body":{"entities/AssetEntity.html":{}}}],["type",{"_index":41,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"modules/AppModule.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["type'})@apiresponse({status",{"_index":1282,"title":{},"body":{"controllers/UserController.html":{}}}],["type/:accounttype",{"_index":1304,"title":{},"body":{"controllers/UserController.html":{}}}],["type/:accounttype')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1280,"title":{},"body":{"controllers/UserController.html":{}}}],["typeorm",{"_index":96,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"entities/AssetEntity.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"entities/CustomerEntity.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"entities/FlighPlanEntity.html":{},"entities/GeoObjectEntity.html":{},"entities/GeofenceAssetEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"entities/GroupEntity.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"entities/LayerEntity.html":{},"injectables/LayerService.html":{},"modules/MysqlDatabaseProviderModule.html":{},"controllers/NotificationController.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationEntity.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"entities/NotificationTemplateEntity.html":{},"injectables/NotificationTemplateService.html":{},"entities/NotificationUserEntity.html":{},"modules/PostgresDatabaseProviderModule.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":1094,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1101,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["typeormmoduleasyncoptions",{"_index":1095,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["types",{"_index":1494,"title":{},"body":{"index.html":{}}}],["typescript",{"_index":772,"title":{},"body":{"controllers/GeofenceController.html":{},"entities/GroupEntity.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationTemplateController.html":{},"entities/UserEntity.html":{}}}],["ui",{"_index":1436,"title":{},"body":{"dependencies.html":{}}}],["undefined",{"_index":31,"title":{},"body":{"controllers/AplController.html":{},"entities/AplItemEntity.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"entities/EventDetailsEntity.html":{},"entities/EventParamDetailsEntity.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{}}}],["undefined})@joincolumn({name",{"_index":637,"title":{},"body":{"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{}}}],["understand",{"_index":1567,"title":{},"body":{"index.html":{}}}],["unified",{"_index":1608,"title":{},"body":{"index.html":{}}}],["unit",{"_index":1556,"title":{},"body":{"index.html":{}}}],["units",{"_index":192,"title":{},"body":{"entities/AplItemEntity.html":{}}}],["unknown",{"_index":52,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"entities/GeofenceEntity.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"entities/LandmarkEntity.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["unused",{"_index":774,"title":{},"body":{"controllers/GeofenceController.html":{},"entities/GroupEntity.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationTemplateController.html":{},"entities/UserEntity.html":{}}}],["up",{"_index":1586,"title":{},"body":{"index.html":{}}}],["update",{"_index":21,"title":{},"body":{"controllers/AplController.html":{},"entities/AplItemEntity.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"entities/EventParamDetailsEntity.html":{},"entities/FlighLocationEntity.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@body",{"_index":420,"title":{},"body":{"controllers/AssetController.html":{},"controllers/UserController.html":{}}}],["update(@param('id",{"_index":138,"title":{},"body":{"controllers/AplController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{}}}],["update(data",{"_index":399,"title":{},"body":{"controllers/AssetController.html":{},"injectables/AssetService.html":{},"controllers/CustomerController.html":{},"injectables/CustomerService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(id",{"_index":77,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"controllers/GeofenceController.html":{},"injectables/GeofenceService.html":{},"controllers/GroupController.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"controllers/LayerController.html":{},"injectables/LayerService.html":{},"controllers/NotificationController.html":{},"injectables/NotificationService.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{}}}],["updated",{"_index":79,"title":{},"body":{"controllers/AplController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"injectables/NotificationTemplateService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updated_at",{"_index":749,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["updatedat",{"_index":734,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["updatedatecolumn",{"_index":752,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["updatedatecolumn({name",{"_index":748,"title":{},"body":{"entities/GeofenceAssetEntity.html":{},"entities/GeofenceNotificationEntity.html":{},"entities/NotificationEmailEntity.html":{},"entities/NotificationUserEntity.html":{}}}],["updates",{"_index":82,"title":{},"body":{"controllers/AplController.html":{},"injectables/AplService.html":{},"controllers/AssetController.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"controllers/EventDetailController.html":{},"injectables/EventDetailService.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"controllers/LandmarkController.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{}}}],["updating",{"_index":520,"title":{},"body":{"controllers/CustomerController.html":{}}}],["url",{"_index":316,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{}}}],["use",{"_index":1527,"title":{},"body":{"index.html":{}}}],["used",{"_index":1182,"title":{},"body":{"injectables/NotificationService.html":{},"injectables/UserService.html":{}}}],["usefactory",{"_index":1102,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{}}}],["useinterceptors",{"_index":89,"title":{},"body":{"controllers/AplController.html":{},"controllers/AppController.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["useinterceptors(new",{"_index":119,"title":{},"body":{"controllers/AplController.html":{},"controllers/AppController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GroupController.html":{},"controllers/UserController.html":{}}}],["useinterceptors(restransforminterceptor",{"_index":409,"title":{},"body":{"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/GeofenceController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":414,"title":{},"body":{"controllers/AssetController.html":{},"entities/NotificationUserEntity.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["user'})@apiresponse({status",{"_index":1273,"title":{},"body":{"controllers/UserController.html":{}}}],["user.entity",{"_index":1237,"title":{},"body":{"entities/NotificationUserEntity.html":{}}}],["usercontroller",{"_index":1268,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["userdto",{"_index":1272,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userentity",{"_index":879,"title":{"entities/UserEntity.html":{}},"body":{"injectables/GeofenceService.html":{},"injectables/NotificationService.html":{},"entities/NotificationUserEntity.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userlogin",{"_index":1326,"title":{"entities/UserLogin.html":{}},"body":{"entities/UserLogin.html":{},"coverage.html":{}}}],["username",{"_index":1106,"title":{},"body":{"modules/MysqlDatabaseProviderModule.html":{},"modules/PostgresDatabaseProviderModule.html":{},"entities/UserEntity.html":{},"entities/UserLogin.html":{},"injectables/UserService.html":{}}}],["userrepository",{"_index":867,"title":{},"body":{"injectables/GeofenceService.html":{},"injectables/NotificationService.html":{}}}],["users",{"_index":1152,"title":{},"body":{"entities/NotificationEntity.html":{},"controllers/UserController.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{}}}],["userservice",{"_index":1297,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["usertypeenum",{"_index":1278,"title":{},"body":{"controllers/UserController.html":{},"entities/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["usertypeenum.user",{"_index":1325,"title":{},"body":{"entities/UserEntity.html":{}}}],["user}else",{"_index":1371,"title":{},"body":{"injectables/UserService.html":{}}}],["uses",{"_index":321,"title":{},"body":{"controllers/AppController.html":{},"injectables/UserService.html":{}}}],["using",{"_index":1478,"title":{},"body":{"index.html":{}}}],["valid('development",{"_index":302,"title":{},"body":{"modules/AppConfigModule.html":{}}}],["validate",{"_index":1271,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["validate(@body",{"_index":1316,"title":{},"body":{"controllers/UserController.html":{}}}],["validate(logindto",{"_index":1288,"title":{},"body":{"controllers/UserController.html":{}}}],["validate(payload",{"_index":1356,"title":{},"body":{"injectables/UserService.html":{}}}],["validatelogin(password",{"_index":1336,"title":{},"body":{"entities/UserLogin.html":{}}}],["validationschema",{"_index":295,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{}}}],["validator",{"_index":1412,"title":{},"body":{"dependencies.html":{}}}],["value",{"_index":239,"title":{},"body":{"injectables/AplService.html":{},"controllers/AppController.html":{},"injectables/AssetService.html":{},"injectables/CustomerService.html":{},"injectables/EventDetailService.html":{},"entities/GeofenceEntity.html":{},"injectables/GeofenceService.html":{},"injectables/GroupService.html":{},"injectables/LandmarkService.html":{},"injectables/LayerService.html":{},"injectables/NotificationService.html":{},"injectables/NotificationTemplateService.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["vars",{"_index":775,"title":{},"body":{"controllers/GeofenceController.html":{},"entities/GroupEntity.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"entities/NotificationEntity.html":{},"controllers/NotificationTemplateController.html":{},"entities/UserEntity.html":{}}}],["vehicles",{"_index":803,"title":{},"body":{"entities/GeofenceEntity.html":{}}}],["vehicleserialnumber",{"_index":444,"title":{},"body":{"entities/AssetEntity.html":{}}}],["vehicletype",{"_index":445,"title":{},"body":{"entities/AssetEntity.html":{}}}],["verify",{"_index":1339,"title":{},"body":{"injectables/UserService.html":{}}}],["version",{"_index":105,"title":{},"body":{"controllers/AplController.html":{},"entities/AplEntity.html":{},"controllers/AssetController.html":{},"controllers/CustomerController.html":{},"controllers/EventDetailController.html":{},"controllers/GeofenceController.html":{},"controllers/GroupController.html":{},"controllers/LandmarkController.html":{},"controllers/LayerController.html":{},"controllers/NotificationController.html":{},"controllers/NotificationTemplateController.html":{},"controllers/UserController.html":{},"properties.html":{}}}],["via",{"_index":1559,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1573,"title":{},"body":{"index.html":{}}}],["void",{"_index":343,"title":{},"body":{"modules/AppModule.html":{}}}],["web",{"_index":1510,"title":{},"body":{"index.html":{}}}],["weblink",{"_index":446,"title":{},"body":{"entities/AssetEntity.html":{}}}],["website",{"_index":540,"title":{},"body":{"entities/CustomerEntity.html":{}}}],["welcome",{"_index":377,"title":{},"body":{"injectables/AppService.html":{}}}],["well",{"_index":1501,"title":{},"body":{"index.html":{}}}],["where(\"id",{"_index":919,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["where('t.id",{"_index":913,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["where('t.status",{"_index":915,"title":{},"body":{"injectables/GeofenceService.html":{}}}],["workspace",{"_index":1487,"title":{},"body":{"index.html":{}}}],["yes",{"_index":833,"title":{},"body":{"entities/GeofenceEntity.html":{},"miscellaneous/enumerations.html":{}}}],["zip",{"_index":1051,"title":{},"body":{"entities/LayerEntity.html":{}}}],["zoom",{"_index":281,"title":{},"body":{"modules/AppConfigModule.html":{},"modules/AppModule.html":{},"modules/HttpConfigModule.html":{},"modules/MySqlConfigModule.html":{},"modules/PostgresSQLConfigModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AplController.html":{"url":"controllers/AplController.html","title":"controller - AplController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AplController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Handles requests related to apl\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: AplDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Create Apl'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The apl has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:39\n                \n            \n\n\n            \n                \n                    Post method of apl for apl creation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            AplDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Fin all apl'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:54\n                \n            \n\n\n            \n                \n                    Get method of apl. Finds all the apl in database\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Find apl by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:68\n                \n            \n\n\n            \n                \n                    Get apl by id . Finds apl  based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find apl list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:110\n                \n            \n\n\n            \n                \n                    Find apl list by pagination\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Delete apl by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:98\n                \n            \n\n\n            \n                \n                    Delete api request of apl. Deletes apl by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: AplDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@HttpCode(HttpStatus.CREATED)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Updated apl'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The apl has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts:84\n                \n            \n\n\n            \n                \n                    Put method of apl . Updates apl based on id and data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            AplDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { TransformInterceptor } from \"../../../interceptors/transform.interceptor\";\nimport { AplDto } from \"../dto/apl.dto\";\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\nimport { AplService } from \"../service/apl.service\";\n\n\n/**\n * Handles requests related to apl \n */\n\n@Controller({\n    version: ['1'],\n    path: 'assets/apl'\n})\n@ApiTags('apl-controller')\n\nexport class AplController {\n    private readonly logger = new Logger(AplController.name);\n    /**\n     * Constructor for apl controller \n     * @param aplService \n     */\n    constructor(private aplService: AplService) { }\n/**\n * Post method of apl for apl creation \n * @param data \n * @returns \n */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @UseInterceptors(new TransformInterceptor(AplDto))\n    @ApiOperation({ summary: 'Create Apl' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The apl has been successfully created.'})\n    public async create(@Body() data: AplDto): Promise {\n        const d = await this.aplService.create(data);\n        this.logger.log(`data: ${JSON.stringify(d)}`);\n        return this.aplService.create(data);\n    }\n\n    /**\n     * Get method of apl. Finds all the apl in database\n     * @returns \n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(new TransformInterceptor(AplDto))\n    @ApiOperation({ summary: 'Fin all apl' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.aplService.findAll();\n    }\n\n    /**\n     * Get apl by id . Finds apl  based on id provided\n     * @param id \n     * @returns \n     */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(new TransformInterceptor(AplDto))\n    @ApiOperation({ summary: 'Find apl by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOne(@Param('id') id) {\n        return this.aplService.findById(id);\n    }\n\n    /**\n     * Put method of apl . Updates apl based on id and data\n     * @param id \n     * @param data \n     * @returns \n     */\n    @Put(':id')\n    @HttpCode(HttpStatus.CREATED)\n    @UseInterceptors(new TransformInterceptor(AplDto))\n    @ApiOperation({ summary: 'Updated apl' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The apl has been successfully updated.'})\n    public async update(@Param('id') id: number, @Body() data: AplDto) {\n        return this.aplService.update(id, data);\n    }\n\n    /**\n     * Delete api request of apl. Deletes apl by id\n     * @param id \n     * @returns \n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(new TransformInterceptor(AplDto))\n    @ApiOperation({ summary: 'Delete apl by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.aplService.remove(id);\n    }\n \n    /**\n     * Find apl list by pagination\n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find apl list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.aplService.paginate(state);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/AplEntity.html":{"url":"entities/AplEntity.html","title":"entity - AplEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  AplEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is apl entity\nContains apl fields , Creates  apl table im database with respective fields\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                aplItems\n                            \n                            \n                                    Optional\n                                customerId\n                            \n                            \n                                    Optional\n                                esn\n                            \n                            \n                                    Optional\n                                version\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        aplItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AplItemEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, item => item.apl)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        esn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, length: 128})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, length: 128})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { AplItemEntity } from './apl.item.entity';\nimport { ExtendEntity } from './extend.entity';\n\n/**\n * This is apl entity \n * Contains apl fields , Creates  apl table im database with respective fields\n */\n\n@Entity({name: \"apl\"})\nexport class AplEntity extends ExtendEntity {\n    @Column({nullable: true, length: 128})\n    esn?: string;\n    @Column({nullable: true})\n    customerId?: number;\n    @Column({nullable: true, length: 128})\n    version?: string;\n    @OneToMany(() => AplItemEntity, (item) => item.apl)\n    aplItems: AplItemEntity[]    \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/AplItemEntity.html":{"url":"entities/AplItemEntity.html","title":"entity - AplItemEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  AplItemEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is apl_items entity\nContains apl_items fields\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                apl\n                            \n                            \n                                    Optional\n                                color\n                            \n                            \n                                    Optional\n                                displayOption\n                            \n                            \n                                    Optional\n                                maxVal\n                            \n                            \n                                    Optional\n                                minVal\n                            \n                            \n                                    Optional\n                                mplId\n                            \n                            \n                                    Optional\n                                notification\n                            \n                            \n                                    Optional\n                                severity\n                            \n                            \n                                    Optional\n                                thresHold\n                            \n                            \n                                    Optional\n                                units\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        apl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AplEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, apl => apl.aplItems, {eager: false, cascade: undefined, nullable: false})@JoinColumn({name: 'apl_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        displayOption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        maxVal\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        minVal\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        mplId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        notification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        severity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        thresHold\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        units\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { AplEntity } from './apl.entity';\nimport { ExtendEntity } from './extend.entity';\n\n/**\n * This is apl_items entity\n * Contains apl_items fields \n */\n\n@Entity({name: \"apl_items\"})\nexport class AplItemEntity extends ExtendEntity {\n    @Column({nullable: true})\n    mplId?: number;\n    @Column({nullable: true})\n    units?: string;\n    @Column({nullable: true})\n    minVal?: number;\n    @Column({nullable: true})\n    maxVal?: number;\n    @Column({nullable: true})\n    thresHold?: number;\n    @Column({nullable: true})\n    color?: string;\n    @Column({nullable: true})\n    displayOption?: boolean;\n    @Column({nullable: true})\n    notification?: string;\n    @Column({nullable: true})\n    severity?: number;\n    @ManyToOne(() => AplEntity, (apl) => apl.aplItems , {eager: false, cascade: ['insert', 'update', 'remove'], nullable: false})\n    @JoinColumn({name: \"apl_id\"})\n    apl?: AplEntity;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AplService.html":{"url":"injectables/AplService.html","title":"injectable - AplService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AplService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This provides AplService methods for API Query\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor for apl services\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: AplDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:31\n                \n            \n\n\n            \n                \n                    Creates new Api based on data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            AplDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:46\n                \n            \n\n\n            \n                \n                    Find all the apl in database\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:39\n                \n            \n\n\n            \n                \n                    Find APl based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:55\n                \n            \n\n\n            \n                \n                    This query removes apl based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: AplDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:67\n                \n            \n\n\n            \n                \n                    Updates apl with new data checks firstly with id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            AplDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(AplService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\nimport { Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { AplDto } from \"../dto/apl.dto\";\nimport { AplEntity } from \"../entity/apl.entity\";\n\n\n/**\n * This provides AplService methods for API Query\n */\n@Injectable()\nexport class AplService {\n    private readonly logger = new Logger(AplService.name);\n    /**\n     * Constructor for apl services \n     * @param repository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(AplEntity) private repository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n     /**\n      * Creates new Api based on data \n      * @param data \n      * @returns \n      */\n    async create(data: AplDto): Promise {\n        return this.repository.save(data);\n    }\n    /**\n     * Find APl based on id\n     * @param id \n     * @returns \n     */\n    async findById(id: number): Promise {\n        return this.repository.findOne({ id });\n    }\n    /**\n     * Find all the apl in database\n     * @returns \n     */\n    async findAll(): Promise> {\n        return this.repository.find();\n    }\n\n    /**\n     * This query removes apl based on id \n     * @param id \n     * @returns \n     */\n    async remove(id: number): Promise {\n        const layer = await this.findById(id);\n        layer.status = StatusEnum.DELETED;\n        return this.repository.save(layer);\n    }\n\n    /**\n     * Updates apl with new data checks firstly with id \n     * @param id \n     * @param data \n     * @returns \n     */\n    async update(id: number, data: AplDto): Promise {\n        let layer = await this.findById(id);\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `Apl id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        return this.repository.save(layer);\n    }\n\n    /**\n     * @ignore\n     * @param state \n     * @returns \n     */\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppConfigModule.html":{"url":"modules/AppConfigModule.html","title":"module - AppConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    AppConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppConfigModule\n\n\n\ncluster_AppConfigModule_exports\n\n\n\n\nAppConfigService \n\nAppConfigService \n\n\n\nConfigService \n\nConfigService \n\n\n\nAppConfigModule\n\nAppConfigModule\n\nAppConfigService  -->\n\nAppConfigModule->AppConfigService \n\n\n\nConfigService  -->\n\nAppConfigModule->ConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/config/app/config.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            AppConfigService\n                        \n                        \n                            ConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport * as Joi from '@hapi/joi';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport configuration from './configuration';\nimport { AppConfigService } from './configuration.service';\n\n\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            load: [configuration],\n            validationSchema: Joi.object({\n                APP_NAME: Joi.string().default('application-service/secured'),\n                APP_ENV: Joi.string()\n                    .valid('development', 'production', 'test', 'provision')\n                    .default('development'),\n                APP_URL: Joi.string().default('http://my-app.test'),\n                APP_PORT: Joi.number().default(3333),\n                FRONTEND_APP_PATH: Joi.string().default('/client'),\n            })\n        })\n    ],\n    providers: [ConfigService, AppConfigService],\n    exports: [ConfigService, AppConfigService]\n})\n\n/**\n * AppConfigModule class defines at which url the app is running \n */\nexport class AppConfigModule {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This is controller class  uses Appservice as constructor .\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseInterceptors(new TransformInterceptor())\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/app.controller.ts:20\n                \n            \n\n\n            \n                \n                    With value inside MessageDto.\n\n\n                    \n                    \n                    \n                        Returns :     MessageDto\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseInterceptors, } from '@nestjs/common';\n\nimport { AppService } from './app.service';\nimport { TransformInterceptor } from './interceptors/transform.interceptor';\nimport { MessageDto } from './message.dto';\n/**\n * This is controller class  uses Appservice as constructor .\n * \n */\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n/**\n * With value inside MessageDto.\n * @returns \n */\n  @Get()\n  @UseInterceptors(new TransformInterceptor(MessageDto))\n  getData(): MessageDto{\n    return this.appService.getData();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppConfigModule\n\nAppConfigModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nPostgresDatabaseProviderModule\n\nPostgresDatabaseProviderModule\n\nAppModule -->\n\nPostgresDatabaseProviderModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppConfigModule\n                        \n                        \n                            PostgresDatabaseProviderModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/app.module.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule, RequestMethod } from '@nestjs/common';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AppConfigModule } from './config/app/config.module';\nimport { LoggerMiddleware } from './middleware/logs.middleware';\nimport { LayerModule } from './modules/layers/layer.module';\nimport { PostgresDatabaseProviderModule } from './providers/database/postgres/provider.module';\n\n/**\n * @description This module serve the client folder on root URL\n * @module This module is serving react GUI on root port \n */\n@Module({\n  imports: [\n    ServeStaticModule.forRoot({\n      \n      rootPath: join('', 'client')\n    }),\n   \n    PostgresDatabaseProviderModule,\n    LayerModule,\n    AppConfigModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\n\n/**\n * @class AppModule integrate AppModule with nestjs default NestModule \n */\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LoggerMiddleware).forRoutes({ path: '*', method: RequestMethod.ALL });\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This class returns with a message and name\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/app.service.ts:13\n                \n            \n\n\n            \n                \n                    This returns message and name\n\n\n                    \n                    \n                    \n                        Returns :     MsgResDto\n\n                    \n                    \n                        : string , name:string}\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { MsgResDto } from './msg.res.dto';\n\n/**\n * This class returns with a message and name \n */\n@Injectable()\nexport class AppService {\n  /**\n   * This returns message and name \n   * @returns {message: string , name:string}\n   */\n  getData(): MsgResDto {\n    return { message: 'Welcome to starnavigationapi!', name: 'StarNavigationSystem' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AssetController.html":{"url":"controllers/AssetController.html","title":"controller - AssetController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AssetController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Handles api request related to asset\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findAssetOfUser\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: AssetDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create Asset'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The asset has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:40\n                \n            \n\n\n            \n                \n                    Creates new asset\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            AssetDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Fin all asset'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:52\n                \n            \n\n\n            \n                \n                    Find all the assets in database\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAssetOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAssetOfUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find asset by customerId'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:76\n                \n            \n\n\n            \n                \n                    Find asset based on customer id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find asset list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:115\n                \n            \n\n\n            \n                \n                    Find asset list by pagination\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete asset by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:103\n                \n            \n\n\n            \n                \n                    Deletes asset based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(data: AssetDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Updated asset'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The asset has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts:90\n                \n            \n\n\n            \n                \n                    Updates existing asset with new data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            AssetDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\nimport { AssetDto } from \"../dto/asset.dto\";\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\nimport { AssetService } from \"../service/asset.service\";\n\n\n/**\n * Handles api request related to asset \n */\n@Controller({\n    version: ['1'],\n    path: 'assets'\n})\n@ApiTags('assets')\n@UseInterceptors(ResTransformInterceptor)\n\n\nexport class AssetController {\n    private readonly logger = new Logger(AssetController.name);\n    /**\n     * Constructor for asset controller \n     * @param assetService \n     */\n    constructor(private assetService: AssetService) { }\n\n    /**\n     * Creates new asset\n     * @param data \n     * @returns \n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Create Asset' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The asset has been successfully created.'})\n    public async create(@Body() data: AssetDto): Promise {\n        return this.assetService.create(data);\n    }\n\n    /**\n     * Find all the assets in database\n     * @returns \n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Fin all asset' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.assetService.findAll();\n    }\n\n    // Find asset for logged in user \n\n    // @Get(':id')\n    // @HttpCode(HttpStatus.OK)\n    // @ApiOperation({ summary: 'Find asset for logged User' })\n    // @ApiResponse({ status: 403, description: 'Forbidden.' })\n    // public async findUserAsset(@Param() id:number):Promise {\n    //     return this.assetService.findUserAsset(id);\n    // }\n\n\n/**\n * Find asset based on customer id \n * @param id \n * @returns \n */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find asset by customerId' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAssetOfUser(@Param('id') id:number) {\n        return this.assetService.findUserAsset(id);\n    }\n\n    /**\n     * Updates existing asset with new data \n     * @param data \n     * @returns \n     */\n    @Put()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Updated asset' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The asset has been successfully updated.'})\n    public async update(@Body() data: AssetDto) {\n        return this.assetService.update(data);\n    }\n\n    /**\n     * Deletes asset based on id \n     * @param id \n     * @returns \n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Delete asset by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.assetService.remove(id);\n    }\n\n    /**\n     * Find asset list by pagination \n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find asset list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.assetService.paginate(state);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/AssetEntity.html":{"url":"entities/AssetEntity.html","title":"entity - AssetEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  AssetEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is asset entity\nContains asset fields . Creates asset table in database with respective fields\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                    Optional\n                                assetColor\n                            \n                            \n                                    Optional\n                                assetMake\n                            \n                            \n                                    Optional\n                                assetModel\n                            \n                            \n                                    Optional\n                                assetRegistrationNumber\n                            \n                            \n                                    Optional\n                                assetSerialNumber\n                            \n                            \n                                    Optional\n                                countryId\n                            \n                            \n                                    Optional\n                                customerId\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                deviceState\n                            \n                            \n                                    Optional\n                                deviceType\n                            \n                            \n                                    Optional\n                                esn\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                phone\n                            \n                            \n                                    Optional\n                                symbolColor\n                            \n                            \n                                    Optional\n                                symbolSize\n                            \n                            \n                                    Optional\n                                symbolStrokeColor\n                            \n                            \n                                    Optional\n                                symbolStrokeSize\n                            \n                            \n                                    Optional\n                                trackColor\n                            \n                            \n                                    Optional\n                                trackwidth\n                            \n                            \n                                    Optional\n                                twoWayMessageMaxLength\n                            \n                            \n                                    Optional\n                                twoWayMessaging\n                            \n                            \n                                    Optional\n                                vehicleSerialNumber\n                            \n                            \n                                    Optional\n                                vehicletype\n                            \n                            \n                                    Optional\n                                weblink\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        assetColor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        assetMake\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        assetModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        assetRegistrationNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        assetSerialNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        countryId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        deviceState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        deviceType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        esn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        symbolColor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        symbolSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 6, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        symbolStrokeColor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        symbolStrokeSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        trackColor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        trackwidth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 6, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        twoWayMessageMaxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        twoWayMessaging\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        vehicleSerialNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        vehicletype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        weblink\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\nimport { ExtendEntity } from './extend.entity';\n\n/**\n * This is asset entity\n * Contains asset fields . Creates asset table in database with respective fields\n */\n\n@Entity({ name: \"asset\" })\nexport class AssetEntity extends ExtendEntity {\n    @Column({ length: 100, nullable: false })\n    esn?: string;\n    @Column({nullable: true})\n    vehicletype?: string;\n    @Column({nullable: true})\n    deviceType?: string;\n    @Column({nullable: true})\n    countryId?: number;\n    @Column({nullable: false})\n    customerId?: number;\n    @Column({nullable: true})\n    alias?: string;\n    @Column({nullable: true})\n    description?: string;\n    @Column({nullable: true})\n    symbolStrokeSize?: number;\n    @Column({nullable: true})\n    symbolStrokeColor?: string;\n    @Column({nullable: true})\n    trackColor?: string;\n    @Column({nullable: true})\n    symbolColor?: string;\n    @Column({nullable: false})\n    name?: string;\n    @Column(\"decimal\", { precision: 6, scale: 2 })\n    symbolSize?: number;\n    @Column(\"decimal\", { precision: 6, scale: 2 })\n    trackwidth?: number;\n    @Column({nullable: true})\n    twoWayMessaging?: boolean;\n    @Column({nullable: true})\n    twoWayMessageMaxLength?: number;\n    @Column({nullable: true})\n    weblink?: string;\n    @Column({nullable: true})\n    assetSerialNumber?: string;\n    @Column({nullable: true})\n    assetRegistrationNumber?: string;\n    @Column({nullable: true})\n    assetMake?: string;\n    @Column({nullable: true})\n    assetModel?: string;\n    @Column({nullable: true})\n    assetColor?: string;\n    @Column({nullable: true})\n    vehicleSerialNumber?: string;\n    @Column({nullable: true})\n    phone?: string;\n    @Column({nullable: true})\n    deviceState?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AssetService.html":{"url":"injectables/AssetService.html","title":"injectable - AssetService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AssetService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This class contains methods for AssetService API Query\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findUserAsset\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for AssetServices\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: LayerCreateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:34\n                \n            \n\n\n            \n                \n                    Creates new asset in database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            LayerCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:50\n                \n            \n\n\n            \n                \n                    Find all the assets from database\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:43\n                \n            \n\n\n            \n                \n                    Find a asset based on id of asset\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserAsset\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserAsset(customerId: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:89\n                \n            \n\n\n            \n                \n                    This method finds all the assets based on Customer ID.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    customerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Functions to find customer asset based on id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:59\n                \n            \n\n\n            \n                \n                    Remove a asset from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(data: LayerCreateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:70\n                \n            \n\n\n            \n                \n                    Updates asset with new data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            LayerCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(AssetService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\nimport { Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { LayerCreateDto } from \"../dto/layer.create.dto\";\nimport { AssetEntity } from \"../entity/asset.entity\";\nimport * as _ from \"lodash\";\n\n\n/**\n * This class contains methods for AssetService API Query\n */\n@Injectable()\nexport class AssetService {\n    private readonly logger = new Logger(AssetService.name);\n    /**\n     * Constructor for AssetServices \n     * @param repository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(AssetEntity) private repository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n\n\n        /**\n         * Creates new asset in database\n         * @param data \n         * @returns \n         */\n    async create(data: LayerCreateDto): Promise {\n        return this.repository.save(data);\n    }\n\n    /**\n     * Find a asset based on id of asset\n     * @param id \n     * @returns \n     */\n    async findById(id: number): Promise {\n        return this.repository.findOne({id});\n    }\n    /**\n     * Find all the assets from database\n     * @returns \n     */\n    async findAll(): Promise> {\n        return this.repository.find({status: StatusEnum.ACTIVE});\n    }\n\n    /**\n     * Remove a asset from database\n     * @param id \n     * @returns \n     */\n    async remove(id: number): Promise {\n        const layer = await this.findById(id);\n        layer.status = StatusEnum.DELETED;\n        return this.repository.save(layer);\n    }\n\n    /**\n     * Updates asset with new data \n     * @param data \n     * @returns \n     */\n    async update(data: LayerCreateDto): Promise {\n        const id: number = _.result(data,'id',0);\n        data = _.omit(data, ['id']);\n        let layer = await this.findById(id);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `Asset id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        return this.repository.save(layer);\n    }\n\n/**\n * This method finds all the assets based on Customer ID.\n * @param {number}customerId  Functions to find customer asset based on id\n * @returns \n */\n   async findUserAsset(customerId:number):Promise> {\n       return this.repository.find({customerId})\n       \n   }\n\n\n    /**\n     * @ignore\n     * @param state \n     * @returns \n     */\n\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CustomerController.html":{"url":"controllers/CustomerController.html","title":"controller - CustomerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CustomerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Handles api requests related to customers\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CustomerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Create Customer'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The customer has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:42\n                \n            \n\n\n            \n                \n                    Handles api request for customer creation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            CustomerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find all customer'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:54\n                \n            \n\n\n            \n                \n                    Hanldes api request for finding all the customer\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find customer by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:67\n                \n            \n\n\n            \n                \n                    Find a customer based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find customer list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:106\n                \n            \n\n\n            \n                \n                    customer list by pagination\nFind\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete customer by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:94\n                \n            \n\n\n            \n                \n                    Handles api request for customer delete request\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(data: CustomerDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Updated customer'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The customer has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts:81\n                \n            \n\n\n            \n                \n                    Handles api request for updating customer details\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            CustomerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\nimport { TransformInterceptor } from \"../../../interceptors/transform.interceptor\";\nimport { CustomerDto } from \"../dto/customer.dto\";\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\nimport { CustomerService } from \"../service/customer.service\";\n\n\n/**\n * Handles api requests related to customers \n */\n\n@Controller({\n    version: ['1'],\n    path: 'customers'\n})\n@ApiTags('customer-controller')\n@UseInterceptors(ResTransformInterceptor)\n\nexport class CustomerController {\n    private readonly logger = new Logger(CustomerController.name);\n    /**\n     * Constructor for customer controller \n     * @param customerService \n     */\n    constructor(private customerService: CustomerService) { }\n\n    /**\n     * Handles api request for customer creation \n     * @param data \n     * @returns \n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @UseInterceptors(new TransformInterceptor(CustomerDto))\n    @ApiOperation({ summary: 'Create Customer' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The customer has been successfully created.'})\n    public async create(@Body() data: CustomerDto): Promise {\n        return this.customerService.create(data);\n    }\n\n    /**\n     * Hanldes api request for finding all the customer\n     * @returns \n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find all customer' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.customerService.findAll();\n    }\n\n    /**\n     * Find a customer based on id \n     * @param id \n     * @returns \n     */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find customer by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOne(@Param('id') id) {\n        return this.customerService.findById(id);\n    }\n\n    /**\n     * Handles api request for updating customer details \n     * @param data \n     * @returns \n     */\n    @Put()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Updated customer' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The customer has been successfully updated.'})\n    public async update( @Body() data: CustomerDto) {\n        return this.customerService.update(data);\n    }\n\n    /**\n     * Handles api request for customer delete request \n     * @param id \n     * @returns \n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Delete customer by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.customerService.remove(id);\n    }\n\n    /** customer list by pagination \n     * Find \n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find customer list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.customerService.paginate(state);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CustomerEntity.html":{"url":"entities/CustomerEntity.html","title":"entity - CustomerEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CustomerEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is customer entity\nContains customer fields, Create customer in database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                    Optional\n                                countryCode\n                            \n                            \n                                    Optional\n                                email\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    Optional\n                                website\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        countryCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        website\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\nimport { ExtendEntity } from './extend.entity';\n\n/**\n * This is customer entity\n * Contains customer fields, Create customer in database \n */\n\n@Entity({name: \"customers\"})\nexport class CustomerEntity extends ExtendEntity {\n    @Column({length: 100, nullable: false})\n    name?: string;\n    email?: string;\n    address?: string;\n    website?: string;\n    phoneNumber?: string;\n    countryCode?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CustomerService.html":{"url":"injectables/CustomerService.html","title":"injectable - CustomerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CustomerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This class contains methods for CustomerService API.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for Customer services\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CustomerDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:33\n                \n            \n\n\n            \n                \n                    Creates new customer in database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            CustomerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:50\n                \n            \n\n\n            \n                \n                    Find all the customers\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:42\n                \n            \n\n\n            \n                \n                    Find a customer based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:58\n                \n            \n\n\n            \n                \n                    Remove a customer from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(data: CustomerDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:69\n                \n            \n\n\n            \n                \n                    Updates a customer field based on new data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            CustomerDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(CustomerService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\nimport { Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { CustomerDto } from \"../dto/customer.dto\";\nimport { CustomerEntity } from \"../entity/customer.entity\";\nimport * as _ from \"lodash\";\n\n/**\n * This class contains methods for CustomerService API.\n */\n\n@Injectable()\nexport class CustomerService {\n    private readonly logger = new Logger(CustomerService.name);\n    /**\n     * Constructor for Customer services \n     * @param repository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(CustomerEntity) private repository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n\n        /**\n         * Creates new customer in database\n         * @param data \n         * @returns \n         */\n    async create(data: CustomerDto): Promise {\n        return this.repository.save(data);\n    }\n\n    /**\n     * Find a customer based on id\n     * @param id \n     * @returns \n     */\n    async findById(id: number): Promise {\n        return this.repository.findOne({ id });\n    }\n\n    /**\n     * Find all the customers \n     * @returns \n     */\n    async findAll(): Promise> {\n        return this.repository.find({status: StatusEnum.ACTIVE});\n    }\n    /**\n     * Remove a customer from database\n     * @param id \n     * @returns \n     */\n    async remove(id: number): Promise {\n        const layer = await this.findById(id);\n        layer.status = StatusEnum.DELETED;\n        return this.repository.save(layer);\n    }\n\n    /**\n     * Updates a customer field based on new data \n     * @param data \n     * @returns \n     */\n    async update(data: CustomerDto): Promise {\n        const id: number = _.result(data,'id',0);\n        data = _.omit(data, ['id']);\n        let layer = await this.findById(id);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `Customer id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        return this.repository.save(layer);\n    }\n\n    /**\n     * @ignore\n     * @param state \n     * @returns \n     */\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EventDetailController.html":{"url":"controllers/EventDetailController.html","title":"controller - EventDetailController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EventDetailController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Handles Event API request\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: EventDetailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Create event detail'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The event detail has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:42\n                \n            \n\n\n            \n                \n                    Create new event\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            EventDetailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Fin all event detail'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:57\n                \n            \n\n\n            \n                \n                    Find all the event details\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Find event detail by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:71\n                \n            \n\n\n            \n                \n                    Find event detail by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find event detail list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:114\n                \n            \n\n\n            \n                \n                    Find event detail list by pagination\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Delete event detail by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:102\n                \n            \n\n\n            \n                \n                    Delete event by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: EventDetailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@HttpCode(HttpStatus.CREATED)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Updated event detail'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The event detail has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts:87\n                \n            \n\n\n            \n                \n                    Updates event detail\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            EventDetailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { TransformInterceptor } from \"../../../interceptors/transform.interceptor\";\nimport { EventDetailDto } from \"../dto/event.detail.dto\";\nimport { EventDetailsEntity } from \"../entity/event.details.entity\";\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\nimport { EventDetailService } from \"../service/event.detail.service\";\n\n\n/**\n * Handles Event API request\n */\n@Controller({\n    version: ['1'],\n    path: 'event-details'\n})\n@ApiTags('event-details-controller')\n\n\nexport class EventDetailController {\n    private readonly logger = new Logger(EventDetailController.name);\n\n    /**\n     * Constructor for aplservice \n     * @param aplService \n     */\n    constructor(private aplService: EventDetailService) { }\n\n    /**\n     * Create new event \n     * @param data \n     * @returns \n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @UseInterceptors(new TransformInterceptor(EventDetailDto))\n    @ApiOperation({ summary: 'Create event detail' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The event detail has been successfully created.'})\n    public async create(@Body() data: EventDetailDto): Promise {\n        const d = await this.aplService.create(data);\n        this.logger.log(`data: ${JSON.stringify(d)}`);\n        return this.aplService.create(data);\n    }\n\n    /**\n     * Find all the event details \n     * @returns \n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(new TransformInterceptor(EventDetailDto))\n    @ApiOperation({ summary: 'Fin all event detail' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.aplService.findAll();\n    }\n\n    /**\n     * Find event detail by id \n     * @param id \n     * @returns \n     */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(new TransformInterceptor(EventDetailDto))\n    @ApiOperation({ summary: 'Find event detail by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOne(@Param('id') id) {\n        return this.aplService.findById(id);\n    }\n\n    /**\n     * Updates event detail\n     * @param id \n     * @param data \n     * @returns \n     */\n    @Put(':id')\n    @HttpCode(HttpStatus.CREATED)\n    @UseInterceptors(new TransformInterceptor(EventDetailDto))\n    @ApiOperation({ summary: 'Updated event detail' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The event detail has been successfully updated.'})\n    public async update(@Param('id') id: number, @Body() data: EventDetailDto) {\n        return this.aplService.update(id, data);\n    }\n\n    /**\n     * Delete event by id \n     * @param id \n     * @returns \n     */\n\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(new TransformInterceptor(EventDetailDto))\n    @ApiOperation({ summary: 'Delete event detail by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.aplService.remove(id);\n    }\n\n    /**\n     * Find event detail list by pagination\n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find event detail list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.aplService.paginate(state);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EventDetailService.html":{"url":"injectables/EventDetailService.html","title":"injectable - EventDetailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EventDetailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This class contains methods for EventDetaial API\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for Event details\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: EventDetailDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:33\n                \n            \n\n\n            \n                \n                    Creates new EventDetail in database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            EventDetailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:48\n                \n            \n\n\n            \n                \n                    Find all the events\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:41\n                \n            \n\n\n            \n                \n                    Find event based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:57\n                \n            \n\n\n            \n                \n                    Remove a event based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: EventDetailDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:68\n                \n            \n\n\n            \n                \n                    Updates event based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            EventDetailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(EventDetailService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\nimport { Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { EventDetailDto } from \"../dto/event.detail.dto\";\nimport { EventDetailsEntity } from \"../entity/event.details.entity\";\n\n/**\n * This class contains methods for EventDetaial API\n * @class EventDetailService\n */\n\n@Injectable()\nexport class EventDetailService {\n    private readonly logger = new Logger(EventDetailService.name);\n\n    /**\n     * Constructor for Event details\n     * @param repository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(EventDetailsEntity) private repository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n/**\n *Creates new EventDetail in database \n * @param data \n * @returns \n */\n    async create(data: EventDetailDto): Promise {\n        return this.repository.save(data);\n    }\n    /**\n     * Find event based on id provided\n     * @param id \n     * @returns \n     */\n    async findById(id: number): Promise {\n        return this.repository.findOne({ id });\n    }\n    /**\n     * Find all the events \n     * @returns \n     */\n    async findAll(): Promise> {\n        return this.repository.find();\n    }\n\n    /**\n     * Remove a event based on id provided\n     * @param id \n     * @returns \n     */\n    async remove(id: number): Promise {\n        const layer = await this.findById(id);\n        layer.status = StatusEnum.DELETED;\n        return this.repository.save(layer);\n    }\n    /**\n     * Updates event based on id \n     * @param id \n     * @param data \n     * @returns \n     */\n    async update(id: number, data: EventDetailDto): Promise {\n        let layer = await this.findById(id);\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `Event detail id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        return this.repository.save(layer);\n    }\n\n    /**\n     * @ignore\n     * @param state \n     * @returns \n     */\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/EventDetailsEntity.html":{"url":"entities/EventDetailsEntity.html","title":"entity - EventDetailsEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  EventDetailsEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is event_details entity\nContains event_details fields\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                aircraftId\n                            \n                            \n                                    Optional\n                                altitude\n                            \n                            \n                                    Optional\n                                eventId\n                            \n                            \n                                eventParamDetails\n                            \n                            \n                                    Optional\n                                gpsLatitude\n                            \n                            \n                                    Optional\n                                gpsLongitude\n                            \n                            \n                                    Optional\n                                heading\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                packetType\n                            \n                            \n                                    Optional\n                                paramCount\n                            \n                            \n                                    Optional\n                                scheduledDepartureTime\n                            \n                            \n                                    Optional\n                                speed\n                            \n                            \n                                    Optional\n                                startTime\n                            \n                            \n                                    Optional\n                                stopTime\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        aircraftId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        altitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        eventId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eventParamDetails\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EventParamDetailsEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany('EventParamDetailsEntity', 'eventDetails', {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        gpsLatitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 6, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        gpsLongitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 6, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        heading\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        packetType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PacketTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PacketTypeEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        paramCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        scheduledDepartureTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        speed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        startTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stopTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { PacketTypeEnum } from '../../../enum/packet.type.enum';\nimport { EventParamDetailsEntity } from './event.param.details.entity';\nimport { ExtendEntity } from './extend.entity';\n\n\n/**\n * This is event_details entity\n * Contains event_details fields \n */\n\n@Entity({name: \"event_details\"})\nexport class EventDetailsEntity extends ExtendEntity {\n    @Column({length: 100, nullable: false})\n    name?: string;\n    @Column({ type: \"enum\", enum: PacketTypeEnum, default: PacketTypeEnum.A })\n    packetType?: PacketTypeEnum;\n    aircraftId?: string;\n    @Column({ type: 'timestamp', nullable: true })\n    scheduledDepartureTime?: Date;\n    @Column(\"decimal\", { precision: 6, scale: 2 })\n    gpsLatitude?: number;\n    @Column(\"decimal\", { precision: 6, scale: 2 })\n    gpsLongitude?: number;\n    altitude?: string;\n    speed?: string;\n    heading?: string;\n    startTime?: string;\n    stopTime?: string;\n    paramCount?: number;\n    eventId?: string;\n    @OneToMany('EventParamDetailsEntity', 'eventDetails', { onDelete: 'CASCADE' })\n    eventParamDetails: EventParamDetailsEntity[]    \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/EventParamDetailsEntity.html":{"url":"entities/EventParamDetailsEntity.html","title":"entity - EventParamDetailsEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  EventParamDetailsEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is event_param_details entity\nContains event_param fields\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                eventDetails\n                            \n                            \n                                    Optional\n                                packetType\n                            \n                            \n                                    Optional\n                                paramId\n                            \n                            \n                                    Optional\n                                paramValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        eventDetails\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EventParamDetailsEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, event => event.eventParamDetails, {nullable: false, eager: false, cascade: undefined})@JoinColumn({name: 'event_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        packetType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PacketTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PacketTypeEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        paramId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        paramValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { PacketTypeEnum } from '../../../enum/packet.type.enum';\nimport { EventDetailsEntity } from './event.details.entity';\nimport { ExtendEntity } from './extend.entity';\n\n\n/**\n * This is event_param_details entity\n * Contains event_param fields \n */\n\n@Entity({name: \"event_param_details\"})\nexport class EventParamDetailsEntity extends ExtendEntity {\n    @Column({ type: \"enum\", enum: PacketTypeEnum, default: PacketTypeEnum.A })\n    packetType?: PacketTypeEnum;\n    paramId?: number;\n    paramValue?: string;\n    @ManyToOne(() => EventDetailsEntity, (event) => event.eventParamDetails , {nullable: false, eager: false, cascade: ['insert', 'update', 'remove']})\n    @JoinColumn({name: \"event_id\"})\n    eventDetails?: EventParamDetailsEntity;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/FlighLocationEntity.html":{"url":"entities/FlighLocationEntity.html","title":"entity - FlighLocationEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  FlighLocationEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is FlightLocation entity\nContains FlightLocation fields.  Creates new flight in database.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                actualArrivalTime\n                            \n                            \n                                    Optional\n                                actualDepartureTime\n                            \n                            \n                                    Optional\n                                aircraftModel\n                            \n                            \n                                    Optional\n                                altitude\n                            \n                            \n                                    Optional\n                                bufferHeight\n                            \n                            \n                                    Optional\n                                bufferWidth\n                            \n                            \n                                    Optional\n                                estimatedArrivalTime\n                            \n                            \n                                    Optional\n                                estimatedDepartureTime\n                            \n                            \n                                    Optional\n                                flightPlan\n                            \n                            \n                                    Optional\n                                latitude\n                            \n                            \n                                    Optional\n                                legTime\n                            \n                            \n                                    Optional\n                                locationRadius\n                            \n                            \n                                    Optional\n                                longitude\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                pilots\n                            \n                            \n                                    Optional\n                                radius\n                            \n                            \n                                    Optional\n                                routeBufferHeight\n                            \n                            \n                                    Optional\n                                routeBufferWidth\n                            \n                            \n                                    Optional\n                                scheduledArrivalTime\n                            \n                            \n                                    Optional\n                                sequence\n                            \n                            \n                                    Optional\n                                stage\n                            \n                            \n                                    Optional\n                                state\n                            \n                            \n                                    Optional\n                                stopTime\n                            \n                            \n                                    Optional\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        actualArrivalTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        actualDepartureTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        aircraftModel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        altitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bufferHeight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bufferWidth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        estimatedArrivalTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        estimatedDepartureTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        flightPlan\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FlighPlanEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, plan => plan.locations, {nullable: false, eager: false, cascade: undefined})@JoinColumn({name: 'flight_plan_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 6, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        legTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        locationRadius\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 6, scale: 2})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        pilots\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        radius\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        routeBufferHeight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        routeBufferWidth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        scheduledArrivalTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        sequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stopTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\nimport { ExtendEntity } from './extend.entity';\nimport { FlighPlanEntity } from './flight.plan.entity';\n\n\n/**\n * This is FlightLocation entity\n * Contains FlightLocation fields.  Creates new flight in database. \n */\n\n@Entity({name: \"fligh_location\"})\nexport class FlighLocationEntity extends ExtendEntity {\n    sequence?: number;\n    type?: string;\n    legTime?: number;\n    @Column(\"decimal\", { precision: 6, scale: 2 })\n    latitude?: number;\n    @Column(\"decimal\", { precision: 6, scale: 2 })\n    longitude?: number;\n    altitude?: number;\n    radius?: number;\n    bufferHeight?: number;\n    bufferWidth?: number;\n    stage?: string;\n    stopTime?: number;\n    @ManyToOne(() => FlighPlanEntity, (plan) => plan.locations , {nullable: false, eager: false, cascade: ['insert', 'update', 'remove']})\n    @JoinColumn({name: \"flight_plan_id\"})\n    flightPlan?: FlighPlanEntity;\n    @Column({nullable: true})\n    name?: string;\n    @Column({ type: 'timestamp', nullable: true })\n    scheduledArrivalTime?: Date;\n    aircraftModel?: string;\n    pilots?: string;\n    @Column({ type: 'timestamp', nullable: true })\n    estimatedDepartureTime?: Date;\n    @Column({ type: 'timestamp', nullable: true })\n    estimatedArrivalTime?: Date;\n    @Column({ type: 'timestamp', nullable: true })\n    actualDepartureTime?: Date;\n    @Column({ type: 'timestamp', nullable: true })\n    actualArrivalTime?: Date;\n    routeBufferHeight?: number;\n    routeBufferWidth?: number;\n    locationRadius?: number;\n    state?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/FlighPlanEntity.html":{"url":"entities/FlighPlanEntity.html","title":"entity - FlighPlanEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  FlighPlanEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is flight_Plan entity\nContains flightPlan fields\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                flightNumber\n                            \n                            \n                                locations\n                            \n                            \n                                    Optional\n                                scheduledDepartureTime\n                            \n                            \n                                    Optional\n                                tailNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        flightNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        locations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FlighLocationEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, location => location.flightPlan)\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        scheduledDepartureTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        tailNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { ExtendEntity } from './extend.entity';\nimport { FlighLocationEntity } from './fligh.location.entity';\n\n\n/**\n * This is flight_Plan entity\n * Contains flightPlan fields \n */\n\n@Entity({name: \"fligh_plan\"})\nexport class FlighPlanEntity extends ExtendEntity {\n    @Column({length: 64, nullable: false})\n    tailNumber?: string;\n    @Column({length: 64, nullable: false})\n    flightNumber?: string;\n    @Column({ type: 'timestamp', nullable: false })\n    scheduledDepartureTime?: Date;\n    @OneToMany(() => FlighLocationEntity, (location) => location.flightPlan)\n    locations: FlighLocationEntity[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/GeoObjectEntity.html":{"url":"entities/GeoObjectEntity.html","title":"entity - GeoObjectEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  GeoObjectEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is geo_object entity\nContains geo_object fields creates new entry\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bufferDistance\n                            \n                            \n                                    Optional\n                                geoFormat\n                            \n                            \n                                    Optional\n                                geom\n                            \n                            \n                                landmark\n                            \n                            \n                                    Optional\n                                srid\n                            \n                            \n                                    Optional\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bufferDistance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        geoFormat\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        geom\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        landmark\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LandmarkEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne('LandmarkEntity', 'landmark', {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToOne } from 'typeorm';\nimport { ExtendEntity } from './extend.entity';\nimport { LandmarkEntity } from './landmark.entity';\n\n\n/**\n * This is geo_object entity\n * Contains geo_object fields creates new entry\n */\n\n@Entity({name: \"geo_object\"})\nexport class GeoObjectEntity extends ExtendEntity {\n    @Column({length: 64})\n    type?: string;\n    bufferDistance?: string;\n    geom?: string;\n    geoFormat?: string;\n    srid?: number;\n    @OneToOne('LandmarkEntity', 'landmark', { onDelete: 'CASCADE' })\n    landmark: LandmarkEntity;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/GeofenceAssetEntity.html":{"url":"entities/GeofenceAssetEntity.html","title":"entity - GeofenceAssetEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  GeofenceAssetEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is geofence_assets entity\nContains geofence_assets fields\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                asset\n                            \n                            \n                                    Optional\n                                assetId\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        asset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GeofenceEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, map => map.vehicles)@JoinColumn({name: 'geofence_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        assetId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'asset_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, JoinColumn, ManyToOne, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\nimport { AssetEntity } from './asset.entity';\nimport { GeofenceEntity } from './geofence.entity';\n\n/**\n * This is geofence_assets entity\n * Contains geofence_assets fields \n */\n\n\n@Entity({ name: \"geofence_assets\" })\nexport class GeofenceAssetEntity {\n    @PrimaryGeneratedColumn()\n    id?: number;\n    @CreateDateColumn({name: \"created_at\"})\n    createdAt?: Date;\n    @UpdateDateColumn({name: \"updated_at\"})\n    updatedAt?: Date;\n\n    @ManyToOne(() => GeofenceEntity, map => map.vehicles)\n    @JoinColumn({name: \"geofence_id\"})\n    asset?: GeofenceEntity;\n\n    @Column({name: 'asset_id'})\n    assetId?: number;\n    \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GeofenceController.html":{"url":"controllers/GeofenceController.html","title":"controller - GeofenceController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GeofenceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Handles geofence API request\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: GeofenceDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create geofence'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The geofence has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:41\n                \n            \n\n\n            \n                \n                    Create new geofence\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            GeofenceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find all geofence'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:54\n                \n            \n\n\n            \n                \n                    Find all geofence\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find geofence template by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:68\n                \n            \n\n\n            \n                \n                    Find geofence template by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find notification template list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:109\n                \n            \n\n\n            \n                \n                    Find notification template list by pagination\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete geofence by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:97\n                \n            \n\n\n            \n                \n                    Delete geofence by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: GeofenceDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Updated geofence template'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The geofence has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts:84\n                \n            \n\n\n            \n                \n                    Update geofence template by id and new data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            GeofenceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\nimport { GeofenceDto } from \"../dto/geofence.dto\";\nimport { GeofenceEntity } from \"../entity/geofence.entity\";\nimport { GeofenceService } from \"../service/geofence.service\";\n\n\n/**\n * Handles geofence API request\n */\n@Controller({\n    version: ['1'],\n    path: 'geofence'\n})\n@ApiTags('geofence-controller')\n@UseInterceptors(ResTransformInterceptor)\n\n\nexport class GeofenceController {\n    private readonly logger = new Logger(GeofenceController.name);\n    /**\n     * Constructor for geofence controller \n     * @param geofenceService \n     */\n    constructor(private geofenceService: GeofenceService) { }\n\n    /**\n     * Create new geofence\n     * @param data \n     * @returns \n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Create geofence' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The geofence has been successfully created.'})\n    public async create(@Body() data: GeofenceDto): Promise {\n        return this.geofenceService.create(data);\n    }\n\n    /**\n     * Find all geofence\n     * @returns \n     */\n\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find all geofence' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.geofenceService.findAll();\n    }\n\n    /**\n     * Find geofence template by id \n     * @param id \n     * @returns \n     */\n\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find geofence template by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOne(@Param('id') id) {\n        return this.geofenceService.findById(id);\n    }\n\n    /**\n     * Update geofence template by id and new data\n     * @param id \n     * @param data \n     * @returns \n     */\n\n    @Put(':id')\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Updated geofence template' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The geofence has been successfully updated.'})\n    public async update(@Param('id') id: number, @Body() data: GeofenceDto) {\n        return this.geofenceService.update(id, data);\n    }\n\n    /**\n     * Delete geofence by id \n     * @param id \n     * @returns \n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Delete geofence by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.geofenceService.remove(id);\n    }\n\n    /**\n     * Find notification template list by pagination\n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find notification template list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.geofenceService.paginate(state);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/GeofenceEntity.html":{"url":"entities/GeofenceEntity.html","title":"entity - GeofenceEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  GeofenceEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is Geofence entity\nContains Geofence fields creates new entry in database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bufferDistance\n                            \n                            \n                                    Optional\n                                customerId\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                eventSeverity\n                            \n                            \n                                    Optional\n                                geojsonobject\n                            \n                            \n                                    Optional\n                                landmarkId\n                            \n                            \n                                    Optional\n                                layerId\n                            \n                            \n                                    Optional\n                                maxAltitude\n                            \n                            \n                                    Optional\n                                maxVelocity\n                            \n                            \n                                    Optional\n                                minAltitude\n                            \n                            \n                                    Optional\n                                minVelocity\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                notifications\n                            \n                            \n                                    Optional\n                                notify\n                            \n                            \n                                    Optional\n                                notifyEmail\n                            \n                            \n                                    Optional\n                                notifyMap\n                            \n                            \n                                    Optional\n                                scheduleEndTime\n                            \n                            \n                                    Optional\n                                scheduleStartTime\n                            \n                            \n                                    Optional\n                                vehicles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bufferDistance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'buffer_distance'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, name: 'customer_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'description'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        eventSeverity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EventSeverityEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: EventSeverityEnum, default: undefined, name: 'event_severity'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        geojsonobject\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'simple-json', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        landmarkId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'g_landmark_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        layerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'g_layer_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        maxAltitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'max_altitude'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        maxVelocity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 6, scale: 2, name: 'max_velocity'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        minAltitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'min_altitude'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        minVelocity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('decimal', {precision: 6, scale: 2, name: 'min_velocity'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :     GeofenceNotificationEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany('GeofenceNotificationEntity', 'notification', {onDelete: 'CASCADE', eager: true, cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        notify\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotifyEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: NotifyEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        notifyEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Yes\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'notify_email', length: 3})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        notifyMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Yes\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'notify_map', length: 3})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        scheduleEndTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'schedule_end_time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        scheduleStartTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'schedule_start_time'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        vehicles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     GeofenceAssetEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany('GeofenceAssetEntity', 'asset', {eager: true, cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { EventSeverityEnum } from '../../../enum/event.severity.enum';\nimport { NotifyEnum } from '../../../enum/notify.enum';\nimport { ExtendEntity } from './extend.entity';\nimport { GeofenceAssetEntity } from './genfence.asset.entity';\nimport { GeofenceNotificationEntity } from './geofence.notification.entity';\n\n\n/**\n * This is Geofence entity\n * Contains Geofence fields creates new entry in database\n */\n\n@Entity({name: \"geofence\"})\nexport class GeofenceEntity extends ExtendEntity {\n    @Column({length: 100, nullable: false})\n    name?: string;\n    @Column({ type: \"enum\", enum: NotifyEnum, default: NotifyEnum.INSIDE })\n    notify?:NotifyEnum;  \n    @Column({name: 'buffer_distance'})\n    bufferDistance?: number;\n    @Column({name: 'notify_map', length: 3})\n    notifyMap?: string = \"Yes\";\n    @Column({name: 'notify_email', length: 3})\n    notifyEmail?: string = \"Yes\";\n    @Column({name: 'description'})\n    description?: string;\n    @Column({name: 'min_altitude'})\n    minAltitude?: number;\n    @Column({name: 'max_altitude'})\n    maxAltitude?: number;\n    @Column(\"decimal\", { precision: 6, scale: 2 , name: 'min_velocity'})\n    minVelocity?: number;\n    @Column(\"decimal\", { precision: 6, scale: 2, name: 'max_velocity' })\n    maxVelocity?: number;\n    @Column({ type: \"enum\", enum: EventSeverityEnum, default: EventSeverityEnum.low, name: 'event_severity' })\n    eventSeverity?:EventSeverityEnum;\n    @Column({name: 'schedule_start_time'})\n    scheduleStartTime?: string;\n    @Column({name: 'schedule_end_time'})\n    scheduleEndTime?: string;\n    @Column({nullable: false, name: 'customer_id'})\n    customerId?: number;\n    @Column({type: \"simple-json\", nullable: true})\n    geojsonobject?: unknown;\n\n    @OneToMany('GeofenceAssetEntity', 'asset', { eager: true, cascade: true })\n    vehicles?: GeofenceAssetEntity[];\n\n    @Column({name: 'g_layer_id'})\n    layerId?: number;\n\n    @Column({name: 'g_landmark_id'})\n    landmarkId?: number;\n    \n    @OneToMany('GeofenceNotificationEntity', 'notification', {onDelete: 'CASCADE', eager: true, cascade: true })\n    notifications?: GeofenceNotificationEntity[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/GeofenceNotificationEntity.html":{"url":"entities/GeofenceNotificationEntity.html","title":"entity - GeofenceNotificationEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  GeofenceNotificationEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is Geofence Notification entity\nContains Geofence Notification field creates new geofence Notification\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                notification\n                            \n                            \n                                    Optional\n                                notificationId\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        notification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GeofenceEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, map => map.notifications, {onDelete: 'CASCADE'})@JoinColumn({name: 'geofence_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        notificationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'notification_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, JoinColumn, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\nimport { GeofenceEntity } from './geofence.entity';\n\n\n/**\n * This is Geofence Notification entity\n * Contains Geofence Notification field creates new geofence Notification\n */\n\n@Entity({ name: \"geofence_notifications\" })\nexport class GeofenceNotificationEntity {\n    @PrimaryGeneratedColumn()\n    id?: number;\n    @CreateDateColumn({name: \"created_at\"})\n    createdAt?: Date;\n    @UpdateDateColumn({name: \"updated_at\"})\n    updatedAt?: Date;\n\n    @ManyToOne(() => GeofenceEntity, map => map.notifications, {onDelete: 'CASCADE'})\n    @JoinColumn({name: \"geofence_id\"})\n    notification?: GeofenceEntity;\n\n    \n    @Column({name: 'notification_id'})\n    notificationId?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GeofenceService.html":{"url":"injectables/GeofenceService.html","title":"injectable - GeofenceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GeofenceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This class contains method for geofence services\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, layerRepository: Repository, landmarkRepository: Repository, userRepository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:27\n                            \n                        \n\n                \n                    \n                            Constructor for geofence service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        layerRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        landmarkRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: GeofenceDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:48\n                \n            \n\n\n            \n                \n                    Create new GeoFence\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            GeofenceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:85\n                \n            \n\n\n            \n                \n                    Finds all the geofence entries in database\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:67\n                \n            \n\n\n            \n                \n                    Finds Geofence based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:103\n                \n            \n\n\n            \n                \n                    Remove Geofence based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: GeofenceDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:116\n                \n            \n\n\n            \n                \n                    Updates Geofence entry based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            GeofenceDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GeofenceService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { paginate, Pagination } from \"nestjs-typeorm-paginate\";\nimport { Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { GeofenceDto } from \"../dto/geofence.dto\";\nimport { GeofenceEntity } from \"../entity/geofence.entity\";\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\nimport { LayerEntity } from \"../entity/layer.entity\";\nimport { UserEntity } from \"../entity/user.entity\";\nimport * as _ from \"lodash\";\nimport { CustomerEntity } from \"../entity/customer.entity\";\nimport { GeofenceNotificationEntity } from \"../entity/geofence.notification.entity\";\nimport { NotificationEntity } from \"../entity/notification.entity\";\nimport { GeofenceAssetEntity } from \"../entity/genfence.asset.entity\";\nimport { AssetEntity } from \"../entity/asset.entity\";\n\n\n/**\n * This class contains method for geofence services\n * @class Geofence\n */\n@Injectable()\nexport class GeofenceService {\n    private readonly logger = new Logger(GeofenceService.name);\n    /**\n     * Constructor for geofence service \n     * @param repository \n     * @param layerRepository \n     * @param landmarkRepository \n     * @param userRepository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(GeofenceEntity) private repository: Repository,\n        @InjectRepository(LayerEntity) private layerRepository: Repository,\n        @InjectRepository(LandmarkEntity) private landmarkRepository: Repository,\n        @InjectRepository(UserEntity) private userRepository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n\n        /**\n         * Create new GeoFence \n         * @param data \n         * @returns \n         */\n    async create(data: GeofenceDto): Promise {\n        data.vehicles.forEach(o => {\n            o = Object.assign(o, {assetId: o.id})\n            _.omit(o, ['id']);\n        });\n        data.notifications.forEach(o => {\n            o = Object.assign(o, {notificationId: o.id})\n            _.omit(o, ['id']);\n        });\n        const geofence: GeofenceEntity = Object.assign(data);\n        const notification = await this.repository.save(geofence);\n        return notification;\n    }\n\n    /**\n     * Finds Geofence based on id provided\n     * @param id \n     * @returns \n     */\n    async findById(id: number): Promise {\n        return this.repository.createQueryBuilder('t')\n        .leftJoinAndMapOne('t.customer',CustomerEntity,'customer','t.customer_id = customer.id')\n        .leftJoinAndMapOne('t.layer',LayerEntity,'layer','t.g_layer_id  = layer.id')\n        .leftJoinAndMapOne('t.landmark',LandmarkEntity,'landmark','t.g_landmark_id  = landmark.id')\n        .leftJoinAndMapMany('t.notifications',GeofenceNotificationEntity,'n','t.id  = n.geofence_id')\n        .leftJoinAndMapOne('n.notification', NotificationEntity,'notification','n.notification_id  = notification.id')\n        .leftJoinAndMapMany('t.vehicles',GeofenceAssetEntity,'a','t.id  = a.geofence_id')\n        .leftJoinAndMapOne('a.asset', AssetEntity,'asset','a.asset_id  = asset.id')\n        .where('t.id = :id', {id})\n        .getOne();\n        return this.repository.findOne({ id: id, status: StatusEnum.ACTIVE });\n    }\n\n    /**\n     * Finds all the geofence entries in database\n     * @returns \n     */\n    async findAll(): Promise> {\n        return this.repository.createQueryBuilder('t')\n        .leftJoinAndMapOne('t.customer',CustomerEntity,'customer','t.customer_id = customer.id')\n        .leftJoinAndMapOne('t.layer',LayerEntity,'layer','t.g_layer_id  = layer.id')\n        .leftJoinAndMapOne('t.landmark',LandmarkEntity,'landmark','t.g_landmark_id  = landmark.id')\n        .leftJoinAndMapMany('t.notifications',GeofenceNotificationEntity,'n','t.id  = n.geofence_id')\n        .leftJoinAndMapOne('n.notification', NotificationEntity,'notification','n.notification_id  = notification.id')\n        .leftJoinAndMapMany('t.vehicles',GeofenceAssetEntity,'a','t.id  = a.geofence_id')\n        .leftJoinAndMapOne('a.asset', AssetEntity,'asset','a.asset_id  = asset.id')\n        .where('t.status = :status', {status: StatusEnum.ACTIVE})\n        .getMany();\n    }\n\n    /**\n     * Remove Geofence based on id provided\n     * @param id \n     * @returns \n     */\n    async remove(id: number): Promise {\n        console.log('id: ', id);\n        await this.repository.createQueryBuilder('t').update(GeofenceEntity).set({status: StatusEnum.DELETED})\n        .where(\"id = :id\", {id}).execute();\n        return this.findById(id);\n    }\n\n    /**\n     * Updates Geofence entry based on id\n     * @param id \n     * @param data \n     * @returns \n     */\n    async update(id: number, data: GeofenceDto): Promise {\n        data = _.omit(data, ['id']);\n        data.vehicles.forEach(o => {\n            o = Object.assign(o, {assetId: o.id})\n            _.omit(o, ['id']);\n        });\n        data.notifications.forEach(o => {\n            o = Object.assign(o, {notificationId: o.id})\n            _.omit(o, ['id']);\n        });\n        let layer = await this.findById(id);\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `Notification id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        const notification = await this.repository.save(layer);\n        return notification;\n    }\n\n    /**\n     * @ignore\n     * @param state \n     * @returns \n     */\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GroupController.html":{"url":"controllers/GroupController.html","title":"controller - GroupController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GroupController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                Handles api request related to group\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: GroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Create Group'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The group has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:40\n                \n            \n\n\n            \n                \n                    Create a group\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            GroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Find all group'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:53\n                \n            \n\n\n            \n                \n                    Find all the group\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Find group by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:67\n                \n            \n\n\n            \n                \n                    Find a group by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find group list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:109\n                \n            \n\n\n            \n                \n                    Find group list by pagination\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Delete group by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:97\n                \n            \n\n\n            \n                \n                    Delete a group based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: GroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@HttpCode(HttpStatus.CREATED)@UseInterceptors(new TransformInterceptor())@ApiOperation({summary: 'Updated group'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The group has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts:83\n                \n            \n\n\n            \n                \n                    Update a group with new data based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            GroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { TransformInterceptor } from \"../../../interceptors/transform.interceptor\";\nimport { GroupDto } from \"../dto/group.dto\";\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\nimport { GroupService } from \"../service/group.service\";\n\n\n/**\n * Handles api request related to group\n */\n@Controller({\n    version: ['1'],\n    path: 'groups'\n})\n@ApiTags('groups')\n\n\nexport class GroupController {\n    private readonly logger = new Logger(GroupController.name);\n    /**\n     * Constructor for group controller\n     * @param groupService \n     */\n    constructor(private groupService: GroupService) { }\n\n    /**\n     * Create a group\n     * @param data \n     * @returns \n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @UseInterceptors(new TransformInterceptor(GroupDto))\n    @ApiOperation({ summary: 'Create Group' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The group has been successfully created.'})\n    public async create(@Body() data: GroupDto): Promise {\n        return this.groupService.create(data);\n    }\n\n    /**\n     * Find all the group\n     * @returns \n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(new TransformInterceptor(GroupDto))\n    @ApiOperation({ summary: 'Find all group' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.groupService.findAll();\n    }\n\n    /**\n     * Find a group by id \n     * @param id \n     * @returns \n     */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(new TransformInterceptor(GroupDto))\n    @ApiOperation({ summary: 'Find group by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOne(@Param('id') id) {\n        return this.groupService.findById(id);\n    }\n\n    /**\n     * Update a group with new data based on id \n     * @param id \n     * @param data \n     * @returns \n     */\n    @Put(':id')\n    @HttpCode(HttpStatus.CREATED)\n    @UseInterceptors(new TransformInterceptor(GroupDto))\n    @ApiOperation({ summary: 'Updated group' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The group has been successfully updated.'})\n    public async update(@Param('id') id: number, @Body() data: GroupDto) {\n        return this.groupService.update(id, data);\n    }\n\n    /**\n     * Delete a group based on id\n     * @param id \n     * @returns \n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @UseInterceptors(new TransformInterceptor(GroupDto))\n    @ApiOperation({ summary: 'Delete group by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.groupService.remove(id);\n    }\n\n    /**\n     * Find group list by pagination \n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find group list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.groupService.paginate(state);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/GroupEntity.html":{"url":"entities/GroupEntity.html","title":"entity - GroupEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  GroupEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/group.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is group entity\nContains all group fields. Creates new group\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/group.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Column, Entity } from 'typeorm';\nimport { ExtendEntity } from './extend.entity';\n\n\n/**\n * This is group entity\n * Contains all group fields. Creates new group  \n */\n\n@Entity({name: \"all_groups\"})\nexport class GroupEntity extends ExtendEntity {\n    @Column({length: 100, nullable: false})\n    name?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GroupService.html":{"url":"injectables/GroupService.html","title":"injectable - GroupService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GroupService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/group.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This class contains methods for GroupService API\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for group service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: GroupDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:33\n                \n            \n\n\n            \n                \n                    Creates new Group in database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            GroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:49\n                \n            \n\n\n            \n                \n                    Finds all the Group\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        With all the entries in database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:42\n                \n            \n\n\n            \n                \n                    Finds a GroupService based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:57\n                \n            \n\n\n            \n                \n                    Remove a GroupService based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: GroupDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:69\n                \n            \n\n\n            \n                \n                    Updates new entries based on id and new data provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            GroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(GroupService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/group.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\nimport { Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { GroupDto } from \"../dto/group.dto\";\nimport { GroupEntity } from \"../entity/group.entity\";\nimport * as _ from \"lodash\";\n\n\n/**\n * This class contains methods for GroupService API\n */\n@Injectable()\nexport class GroupService {\n    private readonly logger = new Logger(GroupService.name);\n    /**\n     * Constructor for group service \n     * @param repository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(GroupEntity) private repository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n\n         /**\n          * Creates new Group in database\n          * @param data \n          * @returns \n          */\n    async create(data: GroupDto): Promise {\n        return this.repository.save(data);\n    }\n\n    /**\n     * Finds a GroupService based on id \n     * @param id \n     * @returns \n     */\n    async findById(id: number): Promise {\n        return this.repository.findOne({ id });\n    }\n    /**\n     * Finds all the Group\n     * @returns With all the entries in database\n     */\n    async findAll(): Promise> {\n        return this.repository.find();\n    }\n    /**\n     * Remove a GroupService based on id provided\n     * @param id \n     * @returns \n     */\n    async remove(id: number): Promise {\n        const layer = await this.findById(id);\n        layer.status = StatusEnum.DELETED;\n        return this.repository.save(layer);\n    }\n\n    /**\n     * Updates new entries based on id and new data provided \n     * @param id \n     * @param data \n     * @returns \n     */\n    async update(id: number, data: GroupDto): Promise {\n        data = _.omit(data, ['id']);\n        let layer = await this.findById(id);\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `Group id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        return this.repository.save(layer);\n    }\n\n    /**\n     * @ignore\n     * @param state \n     * @returns \n     */\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HttpConfigModule.html":{"url":"modules/HttpConfigModule.html","title":"module - HttpConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    HttpConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HttpConfigModule\n\n\n\ncluster_HttpConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nHttpConfigService \n\nHttpConfigService \n\n\n\nHttpConfigModule\n\nHttpConfigModule\n\nConfigService  -->\n\nHttpConfigModule->ConfigService \n\n\n\nHttpConfigService  -->\n\nHttpConfigModule->HttpConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/config/http/config.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                        \n                            HttpConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport * as Joi from '@hapi/joi';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport configuration from './configuration';\nimport { HttpConfigService } from './configuration.service';\n\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            load: [configuration],\n            validationSchema: Joi.object({\n                HTTP_TIMEOUT: Joi.number().default(5000),\n                HTTP_MAX_REDIRECTS: Joi.number().default(5),\n            })\n        })\n    ],\n    providers: [ConfigService, HttpConfigService],\n    exports: [ConfigService, HttpConfigService]\n})\n\n/**\n * Contains http timeout and maxredirects\n */\nexport class HttpConfigModule {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LandmarkController.html":{"url":"controllers/LandmarkController.html","title":"controller - LandmarkController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LandmarkController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                handles request related to landmarks\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: LandmarkCreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create Landmark'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The landmark has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:42\n                \n            \n\n\n            \n                \n                    handles landmark creation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            LandmarkCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Fin all landmark'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:54\n                \n            \n\n\n            \n                \n                    Find all the landmark\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find landmark by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:67\n                \n            \n\n\n            \n                \n                    Find a landmark by id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find landmark list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:108\n                \n            \n\n\n            \n                \n                    Find landmark list by pagination\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete landmark by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:96\n                \n            \n\n\n            \n                \n                    Delete a landmark\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: LandmarkCreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Updated Landmark'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The landmark has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts:83\n                \n            \n\n\n            \n                \n                    Updates a landmark with new data based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            LandmarkCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { TransformInterceptor } from \"../../../interceptors/transform.interceptor\";\nimport { LandmarkCreateDto } from \"../dto/landmark.create.dto\";\nimport { LandmarkService } from \"../service/landmark.service\";\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\n\n\n/**\n * handles request related to landmarks\n */\n@Controller({\n    version: ['1'],\n    path: 'landmarks'\n})\n@ApiTags('landmarks')\n@UseInterceptors(ResTransformInterceptor)\n\n\nexport class LandmarkController {\n    private readonly logger = new Logger(LandmarkController.name);\n    /**\n     * Constructor for landmark controller \n     * @param landmarkService \n     */\n    constructor(private landmarkService: LandmarkService) { }\n\n    /**\n     * handles landmark creation\n     * @param data \n     * @returns \n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Create Landmark' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The landmark has been successfully created.'})\n    public async create(@Body() data: LandmarkCreateDto): Promise {\n        return this.landmarkService.create(data);\n    }\n\n    /**\n     * Find all the landmark \n     * @returns \n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Fin all landmark' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.landmarkService.findAll();\n    }\n\n    /**\n     * Find a landmark by id provided\n     * @param id \n     * @returns \n     */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find landmark by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOne(@Param('id') id) {\n        return this.landmarkService.findById(id);\n    }\n\n    /**\n     * Updates a landmark with new data based on id\n     * @param id \n     * @param data \n     * @returns \n     */\n\n    @Put(':id')\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Updated Landmark' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The landmark has been successfully updated.'})\n    public async update(@Param('id') id: number, @Body() data: LandmarkCreateDto) {\n        return this.landmarkService.update(id, data);\n    }\n\n    /**\n     * Delete a landmark\n     * @param id \n     * @returns \n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Delete landmark by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.landmarkService.remove(id);\n    }\n\n    /**\n     * Find landmark list by pagination\n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find landmark list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.landmarkService.paginate(state);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/LandmarkEntity.html":{"url":"entities/LandmarkEntity.html","title":"entity - LandmarkEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  LandmarkEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is landmark entity\nContains Landmark fields  creates landmark in database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                geojsonobject\n                            \n                            \n                                    Optional\n                                geoObject\n                            \n                            \n                                    Optional\n                                layer\n                            \n                            \n                                    Optional\n                                locationType\n                            \n                            \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        geojsonobject\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'simple-json', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        geoObject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GeoObjectEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne('GeoObjectEntity', 'geoobject', {onDelete: 'CASCADE', cascade: true})@JoinColumn({name: 'geo_object_id', referencedColumnName: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        layer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LayerEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {eager: true})@JoinColumn({name: 'landmark_layer_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        locationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 16})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, ManyToOne, OneToOne } from 'typeorm';\nimport { ExtendEntity } from './extend.entity';\nimport { GeoObjectEntity } from './geo.object.entity';\nimport { LayerEntity } from './layer.entity';\n\n\n/**\n * This is landmark entity\n * Contains Landmark fields  creates landmark in database\n */\n\n@Entity({name: \"landmark\"})\nexport class LandmarkEntity extends ExtendEntity {\n    @Column({length: 64})\n    name?: string;\n    @Column({type: \"simple-json\", nullable: true})\n    geojsonobject?: unknown;\n    @Column({length: 16})\n    locationType?: string;\n\n    @OneToOne(() => LayerEntity, { eager: true })\n    @JoinColumn({ name: \"landmark_layer_id\"})\n    layer?: LayerEntity;\n\n    @OneToOne('GeoObjectEntity', 'geoobject', { onDelete: 'CASCADE', cascade: true })\n    @JoinColumn({name: \"geo_object_id\", referencedColumnName: 'id'})\n\tgeoObject?: GeoObjectEntity;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LandmarkService.html":{"url":"injectables/LandmarkService.html","title":"injectable - LandmarkService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LandmarkService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts\n        \n\n\n            \n                Description\n            \n            \n                LandmarkService consist of methods for Landmark API\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:18\n                            \n                        \n\n                \n                    \n                            This is constructor for Landmark Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: LandmarkCreateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:33\n                \n            \n\n\n            \n                \n                    Create new Landmark in database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            LandmarkCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Takes this and save it into database (new entry)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Saves this data into database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:48\n                \n            \n\n\n            \n                \n                    Find all the landmarks into database\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        All the landmarks saved in database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:41\n                \n            \n\n\n            \n                \n                    Find Landmark based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Checks for the id of landmark into database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        with the data related to the id\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:57\n                \n            \n\n\n            \n                \n                    Removes the landmark based on id provided.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Checks for the id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: LandmarkCreateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:69\n                \n            \n\n\n            \n                \n                    Updates landmark based on id  provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Updates Landmark based on id provided\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                            LandmarkCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(LandmarkService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\nimport { LandmarkCreateDto } from \"../dto/landmark.create.dto\";\nimport * as _ from \"lodash\";\n\n/**\n * LandmarkService consist of methods for Landmark API\n */\n\n@Injectable()\nexport class LandmarkService {\n    private readonly logger = new Logger(LandmarkService.name);\n    /**\n     * This is constructor for Landmark Service \n     * @param repository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(LandmarkEntity) private repository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n     \n    /**\n     * Create new Landmark in database \n     * @param {object}data Takes this and save it into database (new entry)\n     * @returns Saves this data into database\n     */\n    async create(data: LandmarkCreateDto): Promise {\n        return this.repository.save(data);\n    }\n    /**\n     * Find Landmark based on id provided \n     * @param {number}id Checks for the id of landmark into database \n     * @returns with the data related to the id \n     */\n    async findById(id: number): Promise {\n        return this.repository.findOne({ id });\n    }\n    /**\n     * Find all the landmarks into database\n     * @returns All the landmarks saved in database\n     */\n    async findAll(): Promise> {\n        return this.repository.find({status: StatusEnum.ACTIVE});\n    }\n\n    /**\n     * Removes the landmark based on id provided.\n     * @param {number}id  Checks for the id  \n     * @returns \n     */\n    async remove(id: number): Promise {\n        const layer = await this.findById(id);\n        layer.status = StatusEnum.DELETED;\n        return this.repository.save(layer);\n    }\n\n    /**\n     * Updates landmark based on id  provided \n     * @param id Updates Landmark based on id provided\n     * @param data \n     * @returns \n     */\n    async update(id: number, data: LandmarkCreateDto): Promise {\n        data = _.omit(data, ['id']);\n        let layer = await this.findById(id);\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `Layer id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        return this.repository.save(layer);\n    }\n\n    /**\n     * @ignore\n     * @param state \n     * @returns \n     */\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LayerController.html":{"url":"controllers/LayerController.html","title":"controller - LayerController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LayerController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This is LayerController class. handles API request related to Layer\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: LayerCreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create Layer'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The layer has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:40\n                \n            \n\n\n            \n                \n                    This handles layer creation\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            LayerCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Fin all layers'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:52\n                \n            \n\n\n            \n                \n                    Handles find all the layer rquest\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find layer by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:66\n                \n            \n\n\n            \n                \n                    Find layer by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find layer list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:106\n                \n            \n\n\n            \n                \n                    Find layer list  by pagination\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete layer by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:94\n                \n            \n\n\n            \n                \n                    Handles layer deletion\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: LayerCreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Updated Layer'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The layer has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts:81\n                \n            \n\n\n            \n                \n                    Update a layer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            LayerCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\nimport { LayerCreateDto } from \"../dto/layer.create.dto\";\nimport { LayerEntity } from \"../entity/layer.entity\";\nimport { LayerService } from \"../service/layer.service\";\n\n\n/**\n * This is LayerController class. handles API request related to Layer\n */\n@Controller({\n    version: ['1'],\n    path: 'layers'\n})\n@ApiTags('layers')\n@UseInterceptors(ResTransformInterceptor)\nexport class LayerController {\n    private readonly logger = new Logger(LayerController.name);\n    /**\n     * Constructor for layer services \n     * @param layerService \n     * \n     */\n    constructor(private layerService: LayerService) { }\n\n    /**\n     * This handles layer creation\n     * @param data \n     * @returns \n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Create Layer' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The layer has been successfully created.'})\n    public async create(@Body() data: LayerCreateDto): Promise {\n        return this.layerService.create(data);\n    }\n\n    /**\n     * Handles find all the layer rquest\n     * @returns \n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Fin all layers' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.layerService.findAll();\n    }\n\n    /**\n     * Find layer by id \n     * @param id \n     * @returns \n     */\n\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find layer by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOne(@Param('id') id) {\n        return this.layerService.findById(id);\n    }\n\n    /**\n     * Update a layer\n     * @param id \n     * @param data \n     * @returns \n     */\n    @Put(':id')\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Updated Layer' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The layer has been successfully updated.'})\n    public async update(@Param('id') id: number, @Body() data: LayerCreateDto) {\n        return this.layerService.update(id, data);\n    }\n\n    /**\n     * Handles layer deletion \n     * @param id \n     * @returns \n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Delete layer by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.layerService.remove(id);\n    }\n\n    /**\n     * Find layer list  by pagination \n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find layer list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.layerService.paginate(state);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/LayerEntity.html":{"url":"entities/LayerEntity.html","title":"entity - LayerEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  LayerEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is Layer entity\nContains layer fields creates layer in database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                    Optional\n                                city\n                            \n                            \n                                    Optional\n                                country\n                            \n                            \n                                    Optional\n                                customerId\n                            \n                            \n                                geofence\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                state\n                            \n                            \n                                    Optional\n                                zip\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 512})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        geofence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GeofenceEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany('GeofenceEntity', 'geofence', {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        zip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany } from 'typeorm';\nimport { ExtendEntity } from './extend.entity';\nimport { GeofenceEntity } from './geofence.entity';\n\n\n/**\n * This is Layer entity\n * Contains layer fields creates layer in database \n */\n\n@Entity({name: \"layers\"})\nexport class LayerEntity extends ExtendEntity {\n    @Column({length: 64})\n    name?: string;\n    @Column({length: 512})\n    address?: string;\n    @Column({length: 64})\n    city?: string;\n    @Column({length: 64})\n    country?: string;\n    @Column()\n    zip?: number;\n    @Column({length: 64})\n    state?: string;\n    @Column({nullable: true})\n    customerId?: number;\n    @OneToMany('GeofenceEntity', 'geofence', { onDelete: 'CASCADE' })\n    geofence: GeofenceEntity[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LayerService.html":{"url":"injectables/LayerService.html","title":"injectable - LayerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LayerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts\n        \n\n\n            \n                Description\n            \n            \n                LayerService consist of methods for Layer API\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:19\n                            \n                        \n\n                \n                    \n                            THis is LayerService Constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: LayerCreateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:33\n                \n            \n\n\n            \n                \n                    This creates a new Layer in database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            LayerCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Takes data from GUI\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Updates the database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:49\n                \n            \n\n\n            \n                \n                    All the data related to layer\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        All the data related to layer\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:42\n                \n            \n\n\n            \n                \n                    Finds the layer based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Finds the layer based on id provided\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        With the data matched with id\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:58\n                \n            \n\n\n            \n                \n                    Checks for id in database and delete that layer\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Checks for id in database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Delete the respective id if found in database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: LayerCreateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:70\n                \n            \n\n\n            \n                \n                    Updates a layer with new entries\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Checks for the id\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                            LayerCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Update the Layer data based on id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Update the database\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(LayerService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { LayerCreateDto } from \"../dto/layer.create.dto\";\nimport { LayerEntity } from \"../entity/layer.entity\";\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\nimport * as _ from \"lodash\";\n\n/**\n * LayerService consist of methods for Layer API\n * @property create new Layer \n */\n\n@Injectable()\nexport class LayerService {\n    private readonly logger = new Logger(LayerService.name);\n    /**\n     * THis is LayerService Constructor \n     * @param repository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(LayerEntity) private repository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n     /**\n      * This creates a new Layer in database\n      * @param {object}data Takes data from GUI \n      * @returns Updates the database\n      */\n    async create(data: LayerCreateDto): Promise {\n        return this.repository.save(data);\n    }\n\n    /**\n     * Finds the layer based on id provided \n     * @param {number}id Finds the layer based on id provided \n     * @returns With the data matched with id \n     */\n    async findById(id: number): Promise {\n        return this.repository.findOne({ id });\n    }\n    /**\n     * All the data related to layer \n     * @returns All the data related to layer \n     */\n    async findAll(): Promise> {\n        return this.repository.find({status: StatusEnum.ACTIVE});\n    }\n\n    /**\n     * Checks for id in database and delete that layer \n     * @param {number}id Checks for id in database \n     * @returns Delete the respective id if found in database\n     */\n    async remove(id: number): Promise {\n        const layer = await this.findById(id);\n        layer.status = StatusEnum.DELETED;\n        return this.repository.save(layer);\n    }\n\n    /**\n     * Updates a layer with new entries\n     * @param {number}id Checks for the id  \n     * @param {object}data Update the Layer data based on id \n     * @returns Update the database\n     */\n    async update(id: number, data: LayerCreateDto): Promise {\n        data = _.omit(data, ['id']);\n        let layer = await this.findById(id);\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `Layer id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        return this.repository.save(layer);\n    }\n\n    /**\n     * @ignore\n     * @param state \n     * @returns \n     */\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MySqlConfigModule.html":{"url":"modules/MySqlConfigModule.html","title":"module - MySqlConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    MySqlConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MySqlConfigModule\n\n\n\ncluster_MySqlConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nMySqlConfigService \n\nMySqlConfigService \n\n\n\nMySqlConfigModule\n\nMySqlConfigModule\n\nConfigService  -->\n\nMySqlConfigModule->ConfigService \n\n\n\nMySqlConfigService  -->\n\nMySqlConfigModule->MySqlConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/config/database/mysql/config.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                        \n                            MySqlConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport * as Joi from '@hapi/joi';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport configuration from './configuration';\nimport { MySqlConfigService } from './configuration.service';\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            load: [configuration],\n            validationSchema: Joi.object({\n                MYSQL_HOST: Joi.string().default('localhost'),\n                MYSQL_PORT: Joi.number().default('3306'),\n                MYSQL_USERNAME: Joi.string().default('root'),\n                MYSQL_PASSWORD: Joi.string().default(''),\n                MYSQL_DBNAME: Joi.string().default('star_s'),\n                DB_SYNCHRONIZE: Joi.boolean().default(true),\n                DB_LOGGING: Joi.boolean().default(true),\n            })\n        })\n    ],\n    providers: [ConfigService, MySqlConfigService],\n    exports: [ConfigService, MySqlConfigService]\n})\n\n/**\n * This class is for mysql database connectivity \n */\nexport class MySqlConfigModule {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MysqlDatabaseProviderModule.html":{"url":"modules/MysqlDatabaseProviderModule.html","title":"module - MysqlDatabaseProviderModule","body":"\n                   \n\n\n\n\n    Modules\n    MysqlDatabaseProviderModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/providers/database/mysql/provider.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule, TypeOrmModuleAsyncOptions } from '@nestjs/typeorm';\nimport { DatabaseType, getMetadataArgsStorage } from 'typeorm';\nimport { MySqlConfigModule } from '../../../config/database/mysql/config.module';\nimport { MySqlConfigService } from '../../../config/database/mysql/configuration.service';\n\n\n/**\n * @module This is TypeOrm module for database connectivity\n * @class This class is exported as MysqlDatabaseProviderModule\n */\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            imports: [MySqlConfigModule],\n            useFactory: async (mysqlConfigService: MySqlConfigService) => ({\n                type: 'mysql' as DatabaseType,\n                host: mysqlConfigService.host,\n                port: mysqlConfigService.port,\n                username: mysqlConfigService.username,\n                password: mysqlConfigService.password,\n                database: mysqlConfigService.dbname,\n                logging: mysqlConfigService.logging,\n                synchronize: mysqlConfigService.synchronize,\n                entities: getMetadataArgsStorage().tables.map(tbl => tbl.target)\n            }),\n            inject: [MySqlConfigService],\n            } as TypeOrmModuleAsyncOptions)\n    ]\n})\nexport class MysqlDatabaseProviderModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationController.html":{"url":"controllers/NotificationController.html","title":"controller - NotificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This handles API request related to Notification\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: NotificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create notification'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The notification template has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:42\n                \n            \n\n\n            \n                \n                    Create new notification\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            NotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find all notification template'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:54\n                \n            \n\n\n            \n                \n                    Get all the notitifcation\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find notification template by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:67\n                \n            \n\n\n            \n                \n                    Find notification by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find notification template list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:107\n                \n            \n\n\n            \n                \n                    Find notification template list by pagination\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete layer by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:95\n                \n            \n\n\n            \n                \n                    Delete notification  by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: NotificationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Updated notification template'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The notification template has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts:82\n                \n            \n\n\n            \n                \n                    Updated notification template\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            NotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\nimport { NotificationDto } from \"../dto/notification.dto\";\nimport { NotificationEntity } from \"../entity/notification.entity\";\nimport { NotificationTemplateEntity } from \"../entity/notification.template.entity\";\nimport { NotificationService } from \"../service/notification.service\";\n\n\n/**\n * This handles API request related to Notification\n */\n@Controller({\n    version: ['1'],\n    path: 'notification'\n})\n@ApiTags('notification-controller')\n@UseInterceptors(ResTransformInterceptor)\n\n\nexport class NotificationController {\n    private readonly logger = new Logger(NotificationController.name);\n    /**\n     * Constructor Controller for notification\n     * @param layerService \n     */\n    constructor(private layerService: NotificationService) { }\n\n    /**\n     * Create new notification\n     * @param data \n     * @returns \n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Create notification' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The notification template has been successfully created.'})\n    public async create(@Body() data: NotificationDto): Promise {\n        return this.layerService.create(data);\n    }\n\n    /**\n     * Get all the notitifcation\n     * @returns \n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find all notification template' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.layerService.findAll();\n    }\n\n    /**\n     * Find notification by id \n     * @param id \n     * @returns \n     */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find notification template by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOne(@Param('id') id) {\n        return this.layerService.findById(id);\n    }\n\n    /**\n     * Updated notification template\n     * @param id \n     * @param data \n     * @returns \n     */\n    @Put(':id')\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Updated notification template' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The notification template has been successfully updated.'})\n    public async update(@Param('id') id: number, @Body() data: NotificationDto) {\n        return this.layerService.update(id, data);\n    }\n\n    /**\n     * Delete notification  by id \n     * @param id \n     * @returns \n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Delete layer by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.layerService.remove(id);\n    }\n\n    /**\n     * Find notification template list by pagination\n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find notification template list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.layerService.paginate(state);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/NotificationEmailEntity.html":{"url":"entities/NotificationEmailEntity.html","title":"entity - NotificationEmailEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  NotificationEmailEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is notification email  entity\nContains notification email fields\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                notification\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        notification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, map => map.emails, {onDelete: 'CASCADE'})@JoinColumn({name: 'notification_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, JoinColumn, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\nimport { NotificationEntity } from './notification.entity';\n\n\n/**\n * This is notification email  entity\n * Contains notification email fields \n */\n\n@Entity({name: \"notification_emails\"})\nexport class NotificationEmailEntity {\n    @PrimaryGeneratedColumn()\n    id?: number;\n    @CreateDateColumn({name: \"created_at\"})\n    createdAt?: Date;\n    @UpdateDateColumn({name: \"updated_at\"})\n    updatedAt?: Date;\n    @Column({length: 64})\n    email?: string;\n    @ManyToOne(() => NotificationEntity, map => map.emails, {onDelete: 'CASCADE'})\n    @JoinColumn({name: \"notification_id\"})\n    notification?: NotificationEntity;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/NotificationEntity.html":{"url":"entities/NotificationEntity.html","title":"entity - NotificationEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  NotificationEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is npotification  entity\nContains notification fields and creates notification in database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                customerId\n                            \n                            \n                                    Optional\n                                emails\n                            \n                            \n                                    Optional\n                                emailTemplate\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                smsTemplate\n                            \n                            \n                                    Optional\n                                timezone\n                            \n                            \n                                    Optional\n                                type\n                            \n                            \n                                    Optional\n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'customer_id', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        emails\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationEmailEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany('NotificationEmailEntity', 'notification', {onDelete: 'CASCADE', eager: true, cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        emailTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationTemplateEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(type => NotificationTemplateEntity, {eager: true})@JoinColumn({name: 'email_template_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        smsTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationTemplateEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(type => NotificationTemplateEntity, {eager: true})@JoinColumn({name: 'sms_template_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        timezone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'timezone', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: NotificationTypeEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NotificationUserEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany('NotificationUserEntity', 'notification', {onDelete: 'CASCADE', eager: true, cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Column, Entity, JoinColumn, OneToMany, OneToOne } from 'typeorm';\nimport { NotificationTypeEnum } from '../../../enum/notification.type.enum';\nimport { ExtendEntity } from './extend.entity';\nimport { NotificationEmailEntity } from './notification.email.entity';\nimport { NotificationTemplateEntity } from './notification.template.entity';\nimport { NotificationUserEntity } from './notification.user.entity';\n\n\n/**\n * This is npotification  entity\n * Contains notification fields and creates notification in database\n */\n\n@Entity({ name: \"notification\" })\nexport class NotificationEntity extends ExtendEntity {\n    @Column({ length: 64, nullable: false })\n    name?: string;\n    @Column({ name: \"timezone\", nullable: false })\n    timezone?: string;\n    @Column({ type: \"enum\", enum: NotificationTypeEnum, default: NotificationTypeEnum.EMAIL })\n    type?: NotificationTypeEnum;\n    @Column({ name: \"customer_id\", nullable: false })\n    customerId?: number;\n    @OneToMany('NotificationEmailEntity', 'notification', { onDelete: 'CASCADE', eager: true, cascade: true })\n    emails?: NotificationEmailEntity[];\n    @OneToOne(type => NotificationTemplateEntity, { eager: true })\n    @JoinColumn({ name: \"email_template_id\" })\n    emailTemplate?: NotificationTemplateEntity;\n    @OneToOne(type => NotificationTemplateEntity, { eager: true })\n    @JoinColumn({ name: \"sms_template_id\" })\n    smsTemplate?: NotificationTemplateEntity;\n    \n    @OneToMany('NotificationUserEntity', 'notification', { onDelete: 'CASCADE', eager: true, cascade: true })\n    users?: NotificationUserEntity[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationService.html":{"url":"injectables/NotificationService.html","title":"injectable - NotificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts\n        \n\n\n            \n                Description\n            \n            \n                NotificationService consist of methods for notification API\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, templateRepository: Repository, notiEmailRepository: Repository, userRepository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:20\n                            \n                        \n\n                \n                    \n                            This is constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        templateRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notiEmailRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: NotificationDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:41\n                \n            \n\n\n            \n                \n                    This creates new notification in database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            NotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Takes data as input from API\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        with a Nofitication based on data\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:63\n                \n            \n\n\n            \n                \n                    Finds all the notification\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        All the notification found in database.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:55\n                \n            \n\n\n            \n                \n                    This method is used to find notification by provided id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Takes id as input from GUI\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        with the notification found based on id provided\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:73\n                \n            \n\n\n            \n                \n                    Delete a notification based on id\nThis deletes notification based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Checks for the id provided from GUI into database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Deletes the respective id found in database and update it\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: NotificationDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:85\n                \n            \n\n\n            \n                \n                    Updates notification based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Checks for the id\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                            NotificationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        New Data provided\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Updates the database\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(NotificationService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\nimport { IsNull, Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { NotificationDto } from \"../dto/notification.dto\";\nimport { NotificationEmailEntity } from \"../entity/notification.email.entity\";\nimport { NotificationEntity } from \"../entity/notification.entity\";\nimport { NotificationTemplateEntity } from \"../entity/notification.template.entity\";\nimport { UserEntity } from \"../entity/user.entity\";\nimport * as _ from \"lodash\";\n\n/**\n * NotificationService consist of methods for notification API\n */\n@Injectable()\nexport class NotificationService {\n    private readonly logger = new Logger(NotificationService.name);\n    /**\n     * This is constructor \n     * @param repository \n     * @param templateRepository \n     * @param notiEmailRepository \n     * @param userRepository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(NotificationEntity) private repository: Repository,\n        @InjectRepository(NotificationTemplateEntity) private templateRepository: Repository,\n        @InjectRepository(NotificationEmailEntity) private notiEmailRepository: Repository,\n        @InjectRepository(UserEntity) private userRepository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n\n        /**\n         * This creates new notification in database\n         * @param {object}data Takes data as input from API  \n         * @returns with a Nofitication based on data \n         */\n    async create(data: NotificationDto): Promise {\n        console.log('data: ', data);\n        const emailTemplate = await this.templateRepository.findOne({id: data.emailTemplateId});\n        const smsTemplate = await this.templateRepository.findOne({id: data.smsTemplateId});\n        data.emailTemplate = emailTemplate;\n        data.smsTemplate = smsTemplate;\n        const notification = await this.repository.save(data);\n        return notification;\n    }\n    /**\n     * This method is used to find notification by provided id\n     * @param {number}id Takes id as input from GUI \n     * @returns  with the notification found based on id provided \n     */\n    async findById(id: number): Promise {\n        return this.repository.findOne({ id: id, status: StatusEnum.ACTIVE });\n    }\n\n    /**\n     * Finds all the notification \n     * @returns All the notification found in database.\n     */\n    async findAll(): Promise> {\n        return this.repository.find({status: StatusEnum.ACTIVE});\n    }\n\n    /**\n     * Delete a notification based on id \n     * This deletes notification based on id provided\n     * @param {number}id Checks for the id provided from GUI into database\n     * @returns  Deletes the respective id found in database and update it \n     */\n    async remove(id: number): Promise {\n        const layer = await this.findById(id);\n        layer.status = StatusEnum.DELETED;\n        return this.repository.save(layer);\n    }\n/**\n * Updates notification based on id provided \n * @param {number}id Checks for the id  \n * @param {object}data New Data provided \n * @returns  Updates the database\n */\n\n    async update(id: number, data: NotificationDto): Promise {\n        data = _.omit(data, ['id']);\n        let layer = await this.findById(id);\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `Notification id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        const notification = await this.repository.save(layer);\n        await this.notiEmailRepository.delete({notification: IsNull()});\n        return notification;\n    }\n    /**\n     * For paginate\n     * @ignore\n     * @param state \n     * @returns \n     */\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationTemplateController.html":{"url":"controllers/NotificationTemplateController.html","title":"controller - NotificationTemplateController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationTemplateController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This handles API requests related to NotificationTemplateController.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: NotificationTemplateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create notification template'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The notification template has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:39\n                \n            \n\n\n            \n                \n                    Create notification template\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            NotificationTemplateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Fin all notification template'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:51\n                \n            \n\n\n            \n                \n                    Find all the notification template\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find notification template by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:64\n                \n            \n\n\n            \n                \n                    Find notification based on template id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find notification template list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:104\n                \n            \n\n\n            \n                \n                    Find notification template list by pagination\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete notification by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:92\n                \n            \n\n\n            \n                \n                    Delete Notification by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: NotificationTemplateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Updated notification template'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The notification template has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts:79\n                \n            \n\n\n            \n                \n                    Updated notification template\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                            NotificationTemplateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\nimport { TransformInterceptor } from \"../../../interceptors/transform.interceptor\";\nimport { NotificationTemplateDto } from \"../dto/notification.template.dto\";\nimport { NotificationTemplateEntity } from \"../entity/notification.template.entity\";\nimport { NotificationTemplateService } from \"../service/notification.template.service\";\n/**\n * This handles API requests related to NotificationTemplateController.\n */\n@Controller({\n    version: ['1'],\n    path: 'notification-template'\n})\n@ApiTags('notification-template-controller')\n@UseInterceptors(ResTransformInterceptor)\n\nexport class NotificationTemplateController {\n    private readonly logger = new Logger(NotificationTemplateController.name);\n    /**\n     * Constructor for notification template controller \n     * @param layerService \n     */\n    constructor(private layerService: NotificationTemplateService) { }\n\n    /**\n     * Create notification template\n     * @param data \n     * @returns \n     */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Create notification template' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The notification template has been successfully created.'})\n    public async create(@Body() data: NotificationTemplateDto): Promise {\n        return this.layerService.create(data);\n    }\n\n    /**\n     * Find all the notification template\n     * @returns \n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Fin all notification template' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.layerService.findAll();\n    }\n\n    /**\n     * Find notification based on template id \n     * @param id \n     * @returns \n     */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find notification template by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOne(@Param('id') id) {\n        return this.layerService.findById(id);\n    }\n\n    /**\n     * Updated notification template\n     * @param id \n     * @param data \n     * @returns \n     */\n    @Put(':id')\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Updated notification template' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The notification template has been successfully updated.'})\n    public async update(@Param('id') id: number, @Body() data: NotificationTemplateDto) {\n        return this.layerService.update(id, data);\n    }\n\n    /**\n     * Delete Notification by id\n     * @param id \n     * @returns \n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Delete notification by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.layerService.remove(id);\n    }\n\n    /**\n     * Find notification template list by pagination\n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find notification template list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.layerService.paginate(state);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/NotificationTemplateEntity.html":{"url":"entities/NotificationTemplateEntity.html","title":"entity - NotificationTemplateEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  NotificationTemplateEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/notification.template.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is Notification template  entity\nContains Notification template fields and creates notification in database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                body\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                subject\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.template.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.template.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 64, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.template.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\nimport { ExtendEntity } from './extend.entity';\n\n\n/**\n * This is Notification template  entity\n * Contains Notification template fields and creates notification in database \n */\n\n@Entity({name: \"notification_template\"})\nexport class NotificationTemplateEntity extends ExtendEntity {\n    @Column({type: 'text', nullable: false})\n    body?: string;\n    @Column({length: 64, nullable: false})\n    name?: string;\n    @Column({length: 64, nullable: false})\n    subject?: string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationTemplateService.html":{"url":"injectables/NotificationTemplateService.html","title":"injectable - NotificationTemplateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationTemplateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts\n        \n\n\n            \n                Description\n            \n            \n                 This class handles functions of Notification based API Queries.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:20\n                            \n                        \n\n                \n                    \n                            Constructor for notifciation template\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: NotificationTemplateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:35\n                \n            \n\n\n            \n                \n                    Takes  data as input and create new notification in database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            NotificationTemplateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Saves the notification data into database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:52\n                \n            \n\n\n            \n                \n                    Finds all the notification\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        Find all the notification in database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:44\n                \n            \n\n\n            \n                \n                    Finds by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Find a notification based on id provided\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        With the notification found by the respective id in database.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:92\n                \n            \n\n\n            \n                \n                    For paginate\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        CreateQueryBuilder based on state data provided\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        With new paginate\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:61\n                \n            \n\n\n            \n                \n                    Remove notification based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Search for a notification based on the provided id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        It delete the respective notification and update the database.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, data: NotificationTemplateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:73\n                \n            \n\n\n            \n                \n                    Updates database with new entries based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Search for notification based on id\n\n                                    \n                                \n                                \n                                    data\n                                    \n                                            NotificationTemplateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        To be updated data for notification.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        It updates the database with new entries\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(NotificationTemplateService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\nimport { NotificationTemplateEntity } from \"../entity/notification.template.entity\";\nimport { NotificationTemplateDto } from \"../dto/notification.template.dto\";\nimport * as _ from \"lodash\";\n\n\n/**\n *  This class handles functions of Notification based API Queries.\n * @class\n */\n@Injectable()\n\nexport class NotificationTemplateService {\n    private readonly logger = new Logger(NotificationTemplateService.name);\n    /**\n     * Constructor for notifciation template \n     * @param repository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(NotificationTemplateEntity) private repository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n\n        /**\n         * Takes  data as input and create new notification in database\n         * @param data \n         * @returns Saves the notification data into database \n         */\n    async create(data: NotificationTemplateDto): Promise {\n        return this.repository.save(data);\n    }\n     /**\n      * Finds by id\n      * @param id Find a notification based on id provided \n      * @returns With the notification found by the respective id in database.\n      */\n\n    async findById(id: number): Promise {\n        return this.repository.findOne({ id });\n    }\n\n    /**\n     * Finds all the notification\n     * @returns Find all the notification in database \n     */\n    async findAll(): Promise> {\n        return this.repository.find({status: StatusEnum.ACTIVE});\n    }\n\n    /**\n     * Remove notification based on id provided\n     * @param id Search for a notification based on the provided id\n     * @returns  It delete the respective notification and update the database.\n     */\n    async remove(id: number): Promise {\n        const layer = await this.findById(id);\n        layer.status = StatusEnum.DELETED;\n        return this.repository.save(layer);\n    }\n\n    /**\n     * Updates database with new entries based on id \n     * @param {number}id Search for notification based on id \n     * @param {object}data  To be updated data for notification. \n     * @returns It updates the database with new entries \n     */\n    async update(id: number, data: NotificationTemplateDto): Promise {\n        data = _.omit(data, ['id']);\n        let layer = await this.findById(id);\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `Notification template id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        return this.repository.save(layer);\n    }\n\n    /**\n     * For paginate \n     * @param state CreateQueryBuilder based on state data provided\n     * @returns With new paginate \n     */\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/NotificationUserEntity.html":{"url":"entities/NotificationUserEntity.html","title":"entity - NotificationUserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  NotificationUserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This Notification entity\nContains notification fields and creates notification in database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                notification\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                            \n                                    Optional\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        notification\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, map => map.emails, {onDelete: 'CASCADE'})@JoinColumn({name: 'notification_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {eager: true})@JoinColumn({name: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { CreateDateColumn, Entity, JoinColumn, ManyToOne, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\nimport { NotificationEntity } from './notification.entity';\nimport { UserEntity } from './user.entity';\n\n\n/**\n * This Notification entity\n * Contains notification fields and creates notification in database \n */\n\n@Entity({ name: \"notification_users\" })\nexport class NotificationUserEntity {\n    @PrimaryGeneratedColumn()\n    id?: number;\n    @CreateDateColumn({name: \"created_at\"})\n    createdAt?: Date;\n    @UpdateDateColumn({name: \"updated_at\"})\n    updatedAt?: Date;\n    @ManyToOne(() => NotificationEntity, map => map.emails, {onDelete: 'CASCADE'})\n    @JoinColumn({name: \"notification_id\"})\n    notification?: NotificationEntity;\n\n    @OneToOne(() => UserEntity, { eager: true })\n    @JoinColumn({ name: \"id\" })\n    user?: UserEntity;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostgresDatabaseProviderModule.html":{"url":"modules/PostgresDatabaseProviderModule.html","title":"module - PostgresDatabaseProviderModule","body":"\n                   \n\n\n\n\n    Modules\n    PostgresDatabaseProviderModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/providers/database/postgres/provider.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule, TypeOrmModuleAsyncOptions } from '@nestjs/typeorm';\nimport { DatabaseType, getMetadataArgsStorage } from 'typeorm';\nimport { PostgresSQLConfigModule } from '../../../config/database/postgres/config.module';\nimport { PostgresSqlConfigService } from '../../../config/database/postgres/configuration.service';\n\n/**\n * @description  This module is for Connecting to postgres database\n * @module TypeOrmModule is for database connectivity\n * @class This class is exported as PostgresDatabaseProviderModule\n */\n\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            imports: [PostgresSQLConfigModule],\n            useFactory: async (postgresConfigService: PostgresSqlConfigService) => ({\n                type: 'postgres' as DatabaseType,\n                host: postgresConfigService.host,\n                port: postgresConfigService.port,\n                username: postgresConfigService.username,\n                password: postgresConfigService.password,\n                database: postgresConfigService.dbname,\n                logging: postgresConfigService.logging,\n                synchronize: postgresConfigService.synchronize,\n                entities: getMetadataArgsStorage().tables.map(tbl => tbl.target)\n            }),\n            inject: [PostgresSqlConfigService],\n            } as TypeOrmModuleAsyncOptions)\n    ]\n})\nexport class PostgresDatabaseProviderModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostgresSQLConfigModule.html":{"url":"modules/PostgresSQLConfigModule.html","title":"module - PostgresSQLConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    PostgresSQLConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostgresSQLConfigModule\n\n\n\ncluster_PostgresSQLConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nPostgresSqlConfigService \n\nPostgresSqlConfigService \n\n\n\nPostgresSQLConfigModule\n\nPostgresSQLConfigModule\n\nConfigService  -->\n\nPostgresSQLConfigModule->ConfigService \n\n\n\nPostgresSqlConfigService  -->\n\nPostgresSQLConfigModule->PostgresSqlConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/config/database/postgres/config.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                        \n                            PostgresSqlConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport * as Joi from '@hapi/joi';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport configuration from './configuration';\nimport { PostgresSqlConfigService } from './configuration.service';\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            load: [configuration],\n            validationSchema: Joi.object({\n                POSTGRES_HOST: Joi.string().default('103.10.234.158'),\n                POSTGRES_PORT: Joi.number().default('5432'),\n                POSTGRES_USERNAME: Joi.string().default('star'),\n                POSTGRES_PASSWORD: Joi.string().default('Admin@123'),\n                POSTGRES_DBNAME: Joi.string().default('starapi'),\n                DB_SYNCHRONIZE: Joi.boolean().default(true),\n                DB_LOGGING: Joi.boolean().default(true),\n            })\n        })\n    ],\n    providers: [ConfigService, PostgresSqlConfigService],\n    exports: [ConfigService, PostgresSqlConfigService]\n})\n\n/**\n * This class config connectivity to postgres database \n */\nexport class PostgresSQLConfigModule {\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                This is UserController  class. It handles all the API request related to users\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByAccountType\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Public\n                                    Async\n                                remove\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create User'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The user has been successfully created.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:37\n                \n            \n\n\n            \n                \n                    Handles User creation request . Creates new user in database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find all user'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:49\n                \n            \n\n\n            \n                \n                    Find all the users from database\n\n\n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find user by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:63\n                \n            \n\n\n            \n                \n                    Find users based on id provided\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        findOneByAccountType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByAccountType(accountType: UserTypeEnum)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('by-type/:accountType')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Find user by account type'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:76\n                \n            \n\n\n            \n                \n                    Find user based on accountType\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountType\n                                    \n                                                UserTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('paginate')@ApiOperation({summary: 'Find user list by pagination'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:116\n                \n            \n\n\n            \n                \n                    Find User list by pagination\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete user by id'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:104\n                \n            \n\n\n            \n                \n                    Handles deletion of user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(data: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Updated user'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: undefined, description: 'The user has been successfully updated.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:90\n                \n            \n\n\n            \n                \n                    Update user with new data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('user/authenticate')@ApiOperation({summary: 'For login authentication'})@ApiResponse({status: 403, description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts:128\n                \n            \n\n\n            \n                \n                    Handles user login API.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                            LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Pagination } from \"nestjs-typeorm-paginate\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { UserTypeEnum } from \"../../../enum/user.type.enum\";\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\nimport { LoginDto } from \"../dto/login.dto\";\nimport { UserDto } from \"../dto/user.dto\";\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\nimport { UserService } from \"../service/user.service\";\n\n\n/**\n * This is UserController  class. It handles all the API request related to users\n */\n@Controller({\n    version: ['1'],\n    path: 'users'\n})\n@ApiTags('users')\n@UseInterceptors(ResTransformInterceptor)\n\n\nexport class UserController {\n    private readonly logger = new Logger(UserController.name);\n    constructor(private userService: UserService) { }\n/**\n * Handles User creation request . Creates new user in database\n * @param data \n * @returns \n */\n    @Post()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Create User' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The user has been successfully created.'})\n    public async create(@Body() data: UserDto): Promise {\n        return this.userService.create(data);\n    }\n\n    /**\n     * Find all the users from database\n     * @returns \n     */\n    @Get()\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find all user' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findAll() {\n        return this.userService.findAll();\n    }\n\n\n    /**\n     * Find users based on id provided\n     * @param id \n     * @returns \n     */\n    @Get(':id')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find user by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOne(@Param('id') id:number) {\n        return this.userService.findById(id);\n    }\n\n    /**\n     * Find user based on accountType\n     * @param accountType \n     * @returns \n     */\n    @Get('by-type/:accountType')\n    @HttpCode(HttpStatus.OK)\n    @ApiOperation({ summary: 'Find user by account type' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async findOneByAccountType(@Param('accountType') accountType: UserTypeEnum) {\n        return this.userService.findByAccountType(accountType);\n    }\n\n    /**\n     * Update user with new data \n     * @param data \n     * @returns \n     */\n    @Put()\n    @HttpCode(HttpStatus.CREATED)\n    @ApiOperation({ summary: 'Updated user' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The user has been successfully updated.'})\n    public async update(@Body() data: UserDto) {\n        return this.userService.update(data);\n    }\n\n    /**\n     * Handles deletion of user.\n     * @param id \n     * @returns \n     */\n    @Delete(':id')\n    @HttpCode(HttpStatus.OK)\n    //@UseInterceptors(new TransformInterceptor(UserDto))\n    @ApiOperation({ summary: 'Delete user by id' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    public async remove(@Param('id') id: number): Promise {\n        return this.userService.remove(id);\n    }\n\n    /**\n     * Find User list by pagination\n     * @param state \n     * @returns \n     */\n    @Post('paginate')\n    @ApiOperation({ summary: 'Find user list by pagination' })\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\n    async paginate(@Body() state: StateDto): Promise> {\n        return this.userService.paginate(state);\n    }\n\n    /**\n     * Handles user login API. \n     * @param loginDto \n     * @returns \n     */\n    @Post('user/authenticate')\n    @ApiOperation({summary:'For login authentication'})\n    @ApiResponse({status:403, description:'Forbidden.'})\n    validate(@Body() loginDto: LoginDto){\n        return this.userService.validate(loginDto)\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEntity.html":{"url":"entities/UserEntity.html","title":"entity - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is users entity\nContains users fields and creates column based on these fields into database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                accountType\n                            \n                            \n                                    Optional\n                                customerId\n                            \n                            \n                                    Optional\n                                lastname\n                            \n                            \n                                    Optional\n                                password\n                            \n                            \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        accountType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserTypeEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        customerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 100, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Column, Entity } from 'typeorm';\nimport { UserTypeEnum } from '../../../enum/user.type.enum';\nimport { ExtendEntity } from './extend.entity';\n\n\n/**\n * This is users entity\n * Contains users fields and creates column based on these fields into database\n */\n\n@Entity({name: \"users\"})\nexport class UserEntity extends ExtendEntity {\n    @Column({length: 100, nullable: false})\n    username?: string;\n    @Column({length: 100, nullable: false})\n    password?: string;\n    @Column({length: 100, nullable: true})\n    lastname?: string;\n    @Column({ type: \"enum\", enum: UserTypeEnum, default: UserTypeEnum.USER })\n    accountType?: UserTypeEnum;\n    @Column({nullable: false})\n    customerId?: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserLogin.html":{"url":"entities/UserLogin.html","title":"entity - UserLogin","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserLogin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/entity/login.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                This is login entity\nContains login fields  creates new login into database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/login.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/login.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/entity/login.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n\n/**\n * This is login entity\n * Contains login fields  creates new login into database\n */\n\n@Entity( {name:'userlogin'})\nexport class UserLogin {\n    static map() {\n        throw new Error(\"Method not implemented.\");\n    }\n    @PrimaryGeneratedColumn()\n    id : number;\n\n    @Column()\n    username : string;\n\n    @Column()\n    password : string;\n    \n    // @Column()\n    // role : string;\n    \n    // @Column()\n    // age: number;\n\n    // async validateLogin(password: string): Promise{\n    //     return password===this.password?true:false\n    // }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/starnavigationapi/src/app/modules/layers/service/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                This class consist of methods which verify user login creation and also to find users\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByAccountType\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                paginate\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, queryBuilderService: QueryBuilder)\n                    \n                \n                        \n                            \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for user services\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queryBuilderService\n                                                  \n                                                        \n                                                                    QueryBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:38\n                \n            \n\n\n            \n                \n                    This method is used to create new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        UserDto is used as param for create function\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        This saves new user into database respective to entries made in UserDto fields.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:62\n                \n            \n\n\n            \n                \n                    Find all the user exist in database\n\n\n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        All the users in the database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByAccountType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByAccountType(accountType: UserTypeEnum)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:55\n                \n            \n\n\n            \n                \n                    Find a user based on account type\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountType\n                                    \n                                                UserTypeEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Find user based on accountType and the account status.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:47\n                \n            \n\n\n            \n                \n                    This method is used to find individual user based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Find user by the provided id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The user with provided id\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        paginate\n                        \n                    \n                \n            \n            \n                \n                    \n                    paginate(state: StateDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:100\n                \n            \n\n\n            \n                \n                    For user paginate\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                            StateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Uses StateDto\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        With updated paginate.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:70\n                \n            \n\n\n            \n                \n                    Remove a user from database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Takes id and delete the user if found in database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Updates the database after the provoded id user is deleted.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(data: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:81\n                \n            \n\n\n            \n                \n                    Update new entries for a user in database based on id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Updates the database with new detail of user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        It saves updated entries of user into database\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:111\n                \n            \n\n\n            \n                \n                    This is used to validate user login\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Takes user input at login GUI\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        With a data if match found else returns with HTTP exception\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(UserService.name)\n                    \n                \n                    \n                        \n                                Defined in apps/starnavigationapi/src/app/modules/layers/service/user.service.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\nimport { Repository } from \"typeorm\";\nimport { StateDto } from \"../../../dto/state.interface\";\nimport { StatusEnum } from \"../../../enum/status.enum\";\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\nimport { UserDto } from \"../dto/user.dto\";\nimport { UserEntity } from \"../entity/user.entity\";\nimport * as _ from \"lodash\";\nimport { UserTypeEnum } from \"../../../enum/user.type.enum\";\nimport { LoginDto } from \"../dto/login.dto\";\n\n/**\n * This class consist of methods which verify user login creation and also to find users\n * @class UserService  \n */\n\n@Injectable()\nexport class UserService {\n\n\n    private readonly logger = new Logger(UserService.name);\n    /**\n     * Constructor for user services \n     * @param repository \n     * @param queryBuilderService \n     */\n    constructor(\n        @InjectRepository(UserEntity) private repository: Repository,\n        private readonly queryBuilderService: QueryBuilder) { }\n\n        /**\n         * This method is used to create new user\n         * @param data UserDto is used as param for create function \n         * @returns This saves new user into database respective to entries made in UserDto fields.\n         */\n    async create(data: UserDto): Promise {\n        return this.repository.save(data);\n    }\n\n    /**\n     * This method is used to find individual user based on id\n     * @param {number} id Find user by the provided id\n     * @returns The user with provided id \n     */\n    async findById(id: number): Promise {\n        return this.repository.findOne({ id });\n    }\n    /**\n     * Find a user based on account type\n     * @param {object} accountType \n     * @returns Find user based on accountType and the account status.\n     */\n    async findByAccountType(accountType: UserTypeEnum): Promise {\n        console.log('account type: ', accountType);\n        return this.repository.findOne({ status: StatusEnum.ACTIVE, accountType });\n    }\n    /**Find all the user exist in database\n     * @returns All the users in the database \n     */\n    async findAll(): Promise> {\n        return this.repository.find({status: StatusEnum.ACTIVE});\n    }\n    /**\n     * Remove a user from database\n     * @param {number}id Takes id and delete the user if found in database \n     * @returns Updates the database after the provoded id user is deleted.\n     */\n    async remove(id: number): Promise {\n        const layer = await this.findById(id);\n        layer.status = StatusEnum.DELETED;\n        return this.repository.save(layer);\n    }\n\n    /**\n     * Update new entries for a user in database based on id\n     * @param data Updates the database with new detail of user\n     * @returns  It saves updated entries of user into database\n     */\n    async update(data: UserDto): Promise {\n        const id: number = _.result(data,'id',0);\n        data = _.omit(data, ['id']);\n        let layer = await this.findById(id);\n        if (layer == null) {\n            throw new HttpException({\n                status: HttpStatus.FORBIDDEN,\n                error: `User id: ${id} not found`,\n            }, HttpStatus.FORBIDDEN);\n        }\n        layer = Object.assign(layer, data);\n        return this.repository.save(layer);\n    }\n\n    /**\n     * For user paginate \n     * @param state Uses StateDto\n     * @returns With updated paginate.\n     */\n    async paginate(state: StateDto): Promise> {\n        const options = { page: state.page.current, limit: state.page.size };\n        const queryBuilder = this.repository.createQueryBuilder('t');\n        return await paginate(this.queryBuilderService.getQuery(state, queryBuilder), options);\n    }\n\n    /**\n     * This is used to validate user login \n     * @param {JSON}payload Takes user input at login GUI  \n     * @returns With a data if match found else returns with HTTP exception\n     */\n    async validate(payload: LoginDto){\n        try{\n            const loginData = await this.repository;\n           const {username , password} = payload\n            // console.log(loginData)\n            // This functions checks for user \n          const user = await loginData.findOne({username ,password})\n          if(user){return user}else{ return new HttpException({\n            status: HttpStatus.FORBIDDEN,\n            error: `User not found`,\n        }, HttpStatus.FORBIDDEN);};\n        }\n        catch(err){console.log(err.message)}\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/starnavigationapi/src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts\n            \n            controller\n            AplController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts\n            \n            controller\n            AssetController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts\n            \n            controller\n            CustomerController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts\n            \n            controller\n            EventDetailController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts\n            \n            controller\n            GeofenceController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts\n            \n            controller\n            GroupController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts\n            \n            controller\n            LandmarkController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts\n            \n            controller\n            LayerController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts\n            \n            controller\n            NotificationController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts\n            \n            controller\n            NotificationTemplateController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts\n            \n            entity\n            AplEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts\n            \n            entity\n            AplItemEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts\n            \n            entity\n            AssetEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts\n            \n            entity\n            CustomerEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts\n            \n            entity\n            EventDetailsEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts\n            \n            entity\n            EventParamDetailsEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts\n            \n            entity\n            FlighLocationEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts\n            \n            entity\n            FlighPlanEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts\n            \n            entity\n            GeofenceAssetEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts\n            \n            entity\n            GeoObjectEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts\n            \n            entity\n            GeofenceEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts\n            \n            entity\n            GeofenceNotificationEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/group.entity.ts\n            \n            entity\n            GroupEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts\n            \n            entity\n            LandmarkEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts\n            \n            entity\n            LayerEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/login.entity.ts\n            \n            entity\n            UserLogin\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts\n            \n            entity\n            NotificationEmailEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts\n            \n            entity\n            NotificationEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/notification.template.entity.ts\n            \n            entity\n            NotificationTemplateEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts\n            \n            entity\n            NotificationUserEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts\n            \n            entity\n            UserEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts\n            \n            injectable\n            AplService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts\n            \n            injectable\n            AssetService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts\n            \n            injectable\n            CustomerService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts\n            \n            injectable\n            EventDetailService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts\n            \n            injectable\n            GeofenceService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/group.service.ts\n            \n            injectable\n            GroupService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts\n            \n            injectable\n            LandmarkService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts\n            \n            injectable\n            LayerService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts\n            \n            injectable\n            NotificationService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts\n            \n            injectable\n            NotificationTemplateService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                apps/starnavigationapi/src/app/modules/layers/service/user.service.ts\n            \n            injectable\n            UserService\n            \n                90 %\n                (10/11)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/axios : 0.0.6\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^1.2.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/serve-static : ^2.2.2\n        \n            @nestjs/swagger : ^5.2.0\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            @nestjsx/crud : ^5.0.0-alpha.3\n        \n            brakes : ^3.1.0\n        \n            builder-pattern : ^1.3.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            consul : ^0.40.0\n        \n            fastify-static : ^4.5.0\n        \n            fastify-swagger : ^5.0.0\n        \n            joi : ^17.6.0\n        \n            mysql2 : ^2.3.3\n        \n            nestjs-typeorm-paginate : ^3.1.3\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.8.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.0.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            tslib : ^2.0.0\n        \n            typeorm : ^0.2.44\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ConfirmEnum   (apps/.../ConfirmEnum.ts)\n                        \n                        \n                            EventSeverityEnum   (apps/.../event.severity.enum.ts)\n                        \n                        \n                            NotificationTypeEnum   (apps/.../notification.type.enum.ts)\n                        \n                        \n                            NotifyEnum   (apps/.../notify.enum.ts)\n                        \n                        \n                            PacketTypeEnum   (apps/.../packet.type.enum.ts)\n                        \n                        \n                            SeverityEnum   (apps/.../severity.enum.ts)\n                        \n                        \n                            StatusEnum   (apps/.../status.enum.ts)\n                        \n                        \n                            UserTypeEnum   (apps/.../user.type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/starnavigationapi/src/app/enum/ConfirmEnum.ts\n    \n        \n            \n                \n                    \n                        \n                        ConfirmEnum\n                    \n                \n                    \n                        \n                            This contains confirm type enum\n\n                        \n                    \n                        \n                            \n                                 Yes\n                            \n                        \n                        \n                            \n                                Value : Yes\n                            \n                        \n                        \n                            \n                                 No\n                            \n                        \n                        \n                            \n                                Value : No\n                            \n                        \n            \n        \n\n    apps/starnavigationapi/src/app/enum/event.severity.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        EventSeverityEnum\n                    \n                \n                    \n                        \n                            This contains event severity enum\n\n                        \n                    \n                        \n                            \n                                 low\n                            \n                        \n                        \n                            \n                                Value : low\n                            \n                        \n                        \n                            \n                                 high\n                            \n                        \n                        \n                            \n                                Value : high\n                            \n                        \n                        \n                            \n                                 medium\n                            \n                        \n                        \n                            \n                                Value : medium\n                            \n                        \n            \n        \n\n    apps/starnavigationapi/src/app/enum/notification.type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        NotificationTypeEnum\n                    \n                \n                    \n                        \n                            This contains Notification type enum\n\n                        \n                    \n                        \n                            \n                                 EMAIL\n                            \n                        \n                        \n                            \n                                Value : EMAIL\n                            \n                        \n                        \n                            \n                                 SMS\n                            \n                        \n                        \n                            \n                                Value : SMS\n                            \n                        \n            \n        \n\n    apps/starnavigationapi/src/app/enum/notify.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        NotifyEnum\n                    \n                \n                    \n                        \n                            This is notify enum type\n\n                        \n                    \n                        \n                            \n                                 OUTSIDE\n                            \n                        \n                        \n                            \n                                Value : OUTSIDE\n                            \n                        \n                        \n                            \n                                 INSIDE\n                            \n                        \n                        \n                            \n                                Value : INSIDE\n                            \n                        \n            \n        \n\n    apps/starnavigationapi/src/app/enum/packet.type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PacketTypeEnum\n                    \n                \n                    \n                        \n                            This is packed type enum\n\n                        \n                    \n                        \n                            \n                                 H\n                            \n                        \n                        \n                            \n                                Value : H\n                            \n                        \n                        \n                            \n                                 T\n                            \n                        \n                        \n                            \n                                Value : T\n                            \n                        \n                        \n                            \n                                 P\n                            \n                        \n                        \n                            \n                                Value : P\n                            \n                        \n                        \n                            \n                                 A\n                            \n                        \n                        \n                            \n                                Value : A\n                            \n                        \n            \n        \n\n    apps/starnavigationapi/src/app/enum/severity.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        SeverityEnum\n                    \n                \n                    \n                        \n                            This is severity enum\n\n                        \n                    \n                        \n                            \n                                 HIGH\n                            \n                        \n                        \n                            \n                                Value : High\n                            \n                        \n                        \n                            \n                                 LOW\n                            \n                        \n                        \n                            \n                                Value : Low\n                            \n                        \n            \n        \n\n    apps/starnavigationapi/src/app/enum/status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        StatusEnum\n                    \n                \n                    \n                        \n                            This is status enum\n\n                        \n                    \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : ACTIVE\n                            \n                        \n                        \n                            \n                                 DELETED\n                            \n                        \n                        \n                            \n                                Value : DELETED\n                            \n                        \n                        \n                            \n                                 DISABLED\n                            \n                        \n                        \n                            \n                                Value : DISABLED\n                            \n                        \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : PENDING\n                            \n                        \n            \n        \n\n    apps/starnavigationapi/src/app/enum/user.type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserTypeEnum\n                    \n                \n                    \n                        \n                            This have enum type  user and service\n\n                        \n                    \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 SERVICE\n                            \n                        \n                        \n                            \n                                Value : SERVICE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nStarnavigationapi\nThis project was generated using Nx.\n\n\n🔎 Smart, Fast and Extensible Build System\nAdding capabilities to your workspace\nNx supports many plugins which add capabilities for developing different types of applications and different tools.\nThese capabilities include generating applications, libraries, etc as well as the devtools to test, and build projects as well.\nBelow are our core plugins:\n\nReact\nnpm install --save-dev @nrwl/react\n\n\nWeb (no framework frontends)\nnpm install --save-dev @nrwl/web\n\n\nAngular\nnpm install --save-dev @nrwl/angular\n\n\nNest\nnpm install --save-dev @nrwl/nest\n\n\nExpress\nnpm install --save-dev @nrwl/express\n\n\nNode\nnpm install --save-dev @nrwl/node\n\n\n\nThere are also many community plugins you could add.\nGenerate an application\nRun nx g @nrwl/react:app my-app to generate an application.\n\nYou can use any of the plugins above to generate applications as well.\n\nWhen using Nx, you can create multiple applications and libraries in the same workspace.\nGenerate a library\nRun nx g @nrwl/react:lib my-lib to generate a library.\n\nYou can also use any of the plugins above to generate libraries as well.\n\nLibraries are shareable across libraries and applications. They can be imported from @starnavigationapi/mylib.\nDevelopment server\nRun nx serve my-app for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun nx g @nrwl/react:component my-component --project=my-app to generate a new component.\nBuild\nRun nx build my-app to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun nx test my-app to execute the unit tests via Jest.\nRun nx affected:test to execute the unit tests affected by a change.\nRunning end-to-end tests\nRun nx e2e my-app to execute the end-to-end tests via Cypress.\nRun nx affected:e2e to execute the end-to-end tests affected by a change.\nUnderstand your workspace\nRun nx graph to see a diagram of the dependencies of your projects.\nFurther help\nVisit the Nx Documentation to learn more.\n☁ Nx Cloud\nDistributed Computation Caching & Distributed Task Execution\n\n\nNx Cloud pairs with Nx in order to enable you to build and test code more rapidly, by up to 10 times. Even teams that are new to Nx can connect to Nx Cloud and start saving time instantly.\nTeams using Nx gain the advantage of building full-stack applications with their preferred framework alongside Nx’s advanced code generation and project dependency graph, plus a unified experience for both frontend and backend developers.\nVisit Nx Cloud to learn more.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HttpConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MySqlConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MysqlDatabaseProviderModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostgresDatabaseProviderModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostgresSQLConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppConfigModule\n\n\n\ncluster_AppConfigModule_exports\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_HttpConfigModule\n\n\n\ncluster_HttpConfigModule_exports\n\n\n\ncluster_MySqlConfigModule\n\n\n\ncluster_MySqlConfigModule_exports\n\n\n\ncluster_PostgresSQLConfigModule\n\n\n\ncluster_PostgresSQLConfigModule_exports\n\n\n\n\nAppConfigService \n\nAppConfigService \n\n\n\nConfigService \n\nConfigService \n\n\n\nAppConfigModule\n\nAppConfigModule\n\nAppConfigService  -->\n\nAppConfigModule->AppConfigService \n\n\n\nConfigService  -->\n\nAppConfigModule->ConfigService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppConfigModule->AppModule\n\n\n\n\n\nPostgresDatabaseProviderModule\n\nPostgresDatabaseProviderModule\n\nAppModule -->\n\nPostgresDatabaseProviderModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nHttpConfigService \n\nHttpConfigService \n\n\n\nHttpConfigModule\n\nHttpConfigModule\n\nConfigService  -->\n\nHttpConfigModule->ConfigService \n\n\n\nHttpConfigService  -->\n\nHttpConfigModule->HttpConfigService \n\n\n\n\n\nMySqlConfigService \n\nMySqlConfigService \n\n\n\nMySqlConfigModule\n\nMySqlConfigModule\n\nConfigService  -->\n\nMySqlConfigModule->ConfigService \n\n\n\nMySqlConfigService  -->\n\nMySqlConfigModule->MySqlConfigService \n\n\n\n\n\nPostgresSqlConfigService \n\nPostgresSqlConfigService \n\n\n\nPostgresSQLConfigModule\n\nPostgresSQLConfigModule\n\nConfigService  -->\n\nPostgresSQLConfigModule->ConfigService \n\n\n\nPostgresSqlConfigService  -->\n\nPostgresSQLConfigModule->PostgresSqlConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    12 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    21 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n        \n            License : MIT\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
