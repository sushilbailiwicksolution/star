{"version":3,"file":"main.js","mappings":"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","sources":["webpack://starnavigationapi/./apps/starnavigationapi/src/app/app.controller.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/app.module.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/app.service.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/config/app/config.module.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/config/app/configuration.service.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/config/app/configuration.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/config/database/postgres/config.module.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/config/database/postgres/configuration.service.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/config/database/postgres/configuration.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/dto/state.interface.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/enum/ConfirmEnum.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/enum/event.severity.enum.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/enum/notification.type.enum.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/enum/notify.enum.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/enum/packet.type.enum.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/enum/status.enum.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/enum/user.type.enum.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/interceptors/response.interceptor.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/interceptors/transform.interceptor.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/message.dto.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/middleware/logs.middleware.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/controller/apl.controller.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/controller/asset.controller.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/controller/customer.controller.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/controller/event.based.notification.controller.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/controller/event.detail.controller.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/controller/geofence.controller.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/controller/group.controller.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/controller/landmark.controller.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/controller/layer.controller.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/controller/newlayer.controller.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/controller/notification.controller.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/controller/notification.template.controller.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/controller/report-notification.controller.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/controller/user.controller.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/dto/apl.dto.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/dto/apl.item.dto..ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/dto/asset.dto.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/dto/customer.dto.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/dto/event.detail.dto.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/dto/event.notification.dto.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/dto/event.param.detail.dto.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/dto/extend.dto.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/dto/geofence.dto.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/dto/group.dto.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/dto/landmark.create.dto.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/dto/layer.create.dto.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/dto/newUser.dto.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/dto/newlayer.dto.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/dto/notification.dto.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/dto/notification.template.dto.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/dto/report-notification.dto.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/dto/updateUser.dto.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/apl.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/apl.item.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/asset.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/customer.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/event.asset.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/event.based.notification.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/event.details.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/event.notification.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/event.param.details.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/extend.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/fligh.location.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/flight.plan.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/genfence.asset.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/geo.object.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/geofence.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/geofence.notification.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/group.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/landmark.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/layer.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/newlayer.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/notification.email.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/notification.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/notification.template.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/notification.user.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/report-notification.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/entity/user.entity.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/layer.module.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/service/apl.service.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/service/asset.service.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/service/customer.service.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/service/event.detail.service.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/service/eventNotification.service.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/service/geofence.service.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/service/group.service.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/service/landmark.service.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/service/layer.service.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/service/newUser.service.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/service/newlayer.service.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/service/notification.service.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/service/notification.template.service.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/service/report-notification.service.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/modules/layers/service/user.service.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/providers/database/postgres/provider.module.ts","webpack://starnavigationapi/./apps/starnavigationapi/src/app/service/query.builder.service.ts","webpack://starnavigationapi/external commonjs \"@hapi/joi\"","webpack://starnavigationapi/external commonjs \"@nestjs/common\"","webpack://starnavigationapi/external commonjs \"@nestjs/config\"","webpack://starnavigationapi/external commonjs \"@nestjs/core\"","webpack://starnavigationapi/external commonjs \"@nestjs/serve-static\"","webpack://starnavigationapi/external commonjs \"@nestjs/swagger\"","webpack://starnavigationapi/external commonjs \"@nestjs/typeorm\"","webpack://starnavigationapi/external commonjs \"@nestjsx/crud/lib/crud\"","webpack://starnavigationapi/external commonjs \"axios\"","webpack://starnavigationapi/external commonjs \"class-transformer\"","webpack://starnavigationapi/external commonjs \"class-validator\"","webpack://starnavigationapi/external commonjs \"fs\"","webpack://starnavigationapi/external commonjs \"https\"","webpack://starnavigationapi/external commonjs \"lodash\"","webpack://starnavigationapi/external commonjs \"nestjs-typeorm-paginate\"","webpack://starnavigationapi/external commonjs \"rxjs/operators\"","webpack://starnavigationapi/external commonjs \"tslib\"","webpack://starnavigationapi/external commonjs \"typeorm\"","webpack://starnavigationapi/external node-commonjs \"path\"","webpack://starnavigationapi/webpack/bootstrap","webpack://starnavigationapi/./apps/starnavigationapi/src/main.ts"],"sourcesContent":["import { Controller, Get, UseInterceptors, } from '@nestjs/common';\r\n\r\nimport { AppService } from './app.service';\r\nimport { TransformInterceptor } from './interceptors/transform.interceptor';\r\nimport { MessageDto } from './message.dto';\r\n/**\r\n * This is controller class  uses Appservice as constructor .\r\n * \r\n */\r\n@Controller()\r\nexport class AppController {\r\n  constructor(private readonly appService: AppService) {}\r\n\r\n/**\r\n * With value inside MessageDto.\r\n * @returns \r\n */\r\n  @Get()\r\n  @UseInterceptors(new TransformInterceptor(MessageDto))\r\n  getData(): MessageDto{\r\n    return this.appService.getData();\r\n  }\r\n}\r\n","import { MiddlewareConsumer, Module, NestModule, RequestMethod } from '@nestjs/common';\r\nimport { ServeStaticModule } from '@nestjs/serve-static';\r\nimport { join } from 'path';\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\nimport { AppConfigModule } from './config/app/config.module';\r\nimport { LoggerMiddleware } from './middleware/logs.middleware';\r\nimport { LayerModule } from './modules/layers/layer.module';\r\nimport { PostgresDatabaseProviderModule } from './providers/database/postgres/provider.module';\r\n\r\n/**\r\n * @description This module serve the client folder on root URL\r\n * @module This module is serving react GUI on root port \r\n */\r\n@Module({\r\n  imports: [\r\n    ServeStaticModule.forRoot({\r\n      \r\n      rootPath: join('/home/star/', 'client')\r\n    }),\r\n   \r\n    PostgresDatabaseProviderModule,\r\n    LayerModule,\r\n    AppConfigModule,\r\n  ],\r\n  controllers: [AppController],\r\n  providers: [AppService],\r\n})\r\n\r\n/**\r\n * @class AppModule integrate AppModule with nestjs default NestModule \r\n */\r\nexport class AppModule implements NestModule {\r\n  configure(consumer: MiddlewareConsumer) {\r\n    consumer.apply(LoggerMiddleware).forRoutes({ path: '*', method: RequestMethod.ALL });\r\n  }\r\n\r\n}","import { Injectable } from '@nestjs/common';\r\nimport { MsgResDto } from './msg.res.dto';\r\n\r\n/**\r\n * This class returns with a message and name \r\n */\r\n@Injectable()\r\nexport class AppService {\r\n  /**\r\n   * This returns message and name \r\n   * @returns {message: string , name:string}\r\n   */\r\n  getData(): MsgResDto {\r\n    return { message: 'Welcome to starnavigationapi!', name: 'StarNavigationSystem' };\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport * as Joi from '@hapi/joi';\r\nimport { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport configuration from './configuration';\r\nimport { AppConfigService } from './configuration.service';\r\n\r\n\r\n\r\n@Module({\r\n    imports: [\r\n        ConfigModule.forRoot({\r\n            load: [configuration],\r\n            validationSchema: Joi.object({\r\n                APP_NAME: Joi.string().default('application-service/secured'),\r\n                APP_ENV: Joi.string()\r\n                    .valid('development', 'production', 'test', 'provision')\r\n                    .default('development'),\r\n                APP_URL: Joi.string().default('http://my-app.test'),\r\n                APP_PORT: Joi.number().default(3333),\r\n                FRONTEND_APP_PATH: Joi.string().default('/client'),\r\n            })\r\n        })\r\n    ],\r\n    providers: [ConfigService, AppConfigService],\r\n    exports: [ConfigService, AppConfigService]\r\n})\r\n\r\n/**\r\n * AppConfigModule class defines at which url the app is running \r\n */\r\nexport class AppConfigModule {\r\n\r\n}","import { Injectable } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\n/**\r\n * This class conains name , env, url to which app is running \r\n * @constructor configService\r\n */\r\n@Injectable()\r\n\r\nexport class AppConfigService {\r\n    constructor(private configService: ConfigService) { }\r\n\r\n    get name(): string {\r\n        return this.configService.get<string>('app.name');\r\n    }\r\n    get env(): string {\r\n        return this.configService.get<string>('app.env');\r\n    }\r\n    get url(): string {\r\n        return this.configService.get<string>('app.url');\r\n    }\r\n    get port(): number {\r\n        return Number(this.configService.get<number>('app.port'));\r\n    }\r\n    get frontendAppPath(): string {\r\n        return this.configService.get<string>('app.frontendAppPath');\r\n    }\r\n}","import { registerAs } from '@nestjs/config';\r\nexport default registerAs('app', () => ({\r\n    env: process.env.APP_ENV,\r\n    name: process.env.APP_NAME,\r\n    url: process.env.APP_URL,\r\n    port: process.env.APP_PORT,\r\n    frontendAppPath: process.env.FRONTEND_APP_PATH\r\n}));","import { Module } from '@nestjs/common';\r\nimport * as Joi from '@hapi/joi';\r\nimport { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport configuration from './configuration';\r\nimport { PostgresSqlConfigService } from './configuration.service';\r\n\r\n@Module({\r\n    imports: [\r\n        ConfigModule.forRoot({\r\n            load: [configuration],\r\n            validationSchema: Joi.object({\r\n                POSTGRES_HOST: Joi.string().default(process.env.DATABASE_HOST),\r\n                POSTGRES_PORT: Joi.number().default(process.env.DATABASE_PORT),\r\n                POSTGRES_USERNAME: Joi.string().default(process.env.DATABASE_USERNAME),\r\n                POSTGRES_PASSWORD: Joi.string().default(process.env.DATABASE_PASSWORD),\r\n                POSTGRES_DBNAME: Joi.string().default(process.env.DATABASE_DBNAME),\r\n                DB_SYNCHRONIZE: Joi.boolean().default(process.env.DB_SYNCHRONIZE),\r\n                DB_LOGGING: Joi.boolean().default(process.env.DB_LOGGING),\r\n            })\r\n        })\r\n    ],\r\n    providers: [ConfigService, PostgresSqlConfigService],\r\n    exports: [ConfigService, PostgresSqlConfigService]\r\n})\r\n\r\n/**\r\n * This class config connectivity to postgres database \r\n */\r\nexport class PostgresSQLConfigModule {\r\n\r\n}","import { Injectable } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\n/**\r\n * Service dealing with app config based operations.\r\n *\r\n * @ignore \r\n */\r\n@Injectable()\r\n/**\r\n * This class returns with all the configService required to make connection \r\n */\r\nexport class PostgresSqlConfigService {\r\n    constructor(private configService: ConfigService) { }\r\n\r\n    get host(): string {\r\n        return this.configService.get<string>('postgres.host');\r\n    }\r\n    get port(): number {\r\n        return Number(this.configService.get<number>('postgres.port'));\r\n    }\r\n    get username(): string {\r\n        return this.configService.get<string>('postgres.username');\r\n    }\r\n    get password(): string {\r\n        return this.configService.get<string>('postgres.password');\r\n    }\r\n    get dbname(): string {\r\n        return this.configService.get<string>('postgres.dbname');\r\n    }\r\n    get synchronize(): boolean {\r\n        return this.configService.get<boolean>('postgres.synchronize');\r\n    }\r\n    get logging(): string {\r\n        return this.configService.get<string>('postgres.logging');\r\n    }\r\n}","import { registerAs } from '@nestjs/config';\r\n\r\n\r\n/**\r\n * All the variables are defined here for making connection to database\r\n */\r\nexport default registerAs('postgres', () => ({\r\n    host: process.env.POSTGRES_HOST,\r\n    port: process.env.POSTGRES_PORT,\r\n    username: process.env.POSTGRES_USERNAME,\r\n    password: process.env.POSTGRES_PASSWORD,\r\n    dbname: process.env.POSTGRES_DBNAME,\r\n    synchronize: process.env.DB_SYNCHRONIZE,\r\n    logging: process.env.DB_LOGGING,\r\n})); ","/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { ComparatorDto } from './compare.interface';\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class Page {\r\n    @ApiProperty()\r\n    from?: number;\r\n    @ApiProperty()\r\n    to?: number;\r\n    @ApiProperty()\r\n    size?: number;\r\n    @ApiProperty()\r\n    current?: number;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class Sort {\r\n    @ApiProperty()\r\n    by?: string;\r\n    @ApiProperty()\r\n    reverse?: boolean;\r\n} \r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class Filter {\r\n    @ApiProperty()\r\n    property?: string;\r\n    @ApiProperty()\r\n    value?: string;\r\n}\r\n/**\r\n * @ignore\r\n */\r\nexport class StateDto<T = any> {\r\n    @ApiProperty()\r\n    page?: Page;\r\n    @ApiProperty()\r\n    sort?: Sort;\r\n    @ApiProperty({ type: () => Filter })\r\n    filters?: Filter[];\r\n}\r\n"," /**\r\n  * This contains confirm type enum\r\n  * @enum {Yes}\r\n  * @enum {No}\r\n  */\r\n\r\nexport enum ConfirmEnum {\r\n    Yes = \"Yes\", \r\n    No = \"No\"\r\n}","/**\r\n * This contains event severity enum\r\n * @enum {low}\r\n * @enum {high}\r\n *  @enum {medium}\r\n */\r\n\r\nexport enum EventSeverityEnum {\r\n    low = \"low\", \r\n    high = \"high\", \r\n    medium = \"medium\"\r\n}","/**\r\n * This contains Notification type enum\r\n * @enum {EMAIL}\r\n * @enum {SMS}\r\n */\r\n\r\nexport enum NotificationTypeEnum {\r\n    EMAIL = \"EMAIL\",\r\n    SMS = \"SMS\"\r\n}","/**\r\n * This is notify enum type \r\n * @enum {OUTSIDE}\r\n * @enum {INSIDE}\r\n */\r\n\r\nexport enum NotifyEnum {\r\n    OUTSIDE = \"OUTSIDE\", \r\n    INSIDE = \"INSIDE\"\r\n}","/**\r\n * This is packed type enum \r\n * @enum {H} type\r\n * @enum {T} type \r\n * @enum {P} type\r\n * @enum {A} type\r\n */\r\n\r\nexport enum PacketTypeEnum {\r\n    H = \"H\", \r\n    T = \"T\", \r\n    P = \"P\", \r\n    A = \"A\"\r\n}","/**\r\n * This is status enum\r\n * @enum {ACTIVE} status \r\n * @enum {DELETED} status\r\n * @enum {DISABLED} status\r\n * @enum {PENDING} status\r\n */\r\n\r\nexport enum StatusEnum {\r\n    ACTIVE = \"ACTIVE\", \r\n    DELETED = \"DELETED\", \r\n    DISABLED = \"DISABLED\", \r\n    PENDING = \"PENDING\"\r\n}","/**\r\n * This have enum type  user and service \r\n * @enum {USER}  What is user type \r\n * @enum {SERVICE} what is the service of user \r\n */\r\n\r\nexport enum UserTypeEnum {\r\n    USER = \"USER\", \r\n    SERVICE = \"SERVICE\",\r\n    CUSTOMER=\"CUSTOMER\"\r\n}\r\n\r\nexport enum CustomerType{\r\n    USER =\"user\",\r\n    ADMIN =\"ADMIN\",\r\n    CUSTOMER=\"customer\"\r\n}","import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport interface Response<T> {\r\n    status: string;\r\n    errorInfo: {\r\n        errorCode: number;\r\n        errorLevel: string;\r\n        errorMessage: string;\r\n    };\r\n    results: T;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class ResTransformInterceptor<T> implements NestInterceptor<T, Response<T>> {\r\n    intercept(context: ExecutionContext, next: CallHandler): Observable<Response<T>> {\r\n        return next.handle().pipe(map(data => this.makeResponse(data)));\r\n    }\r\n    makeResponse(data) {\r\n        return { status: \"Success\", errorInfo: { errorCode: 200, errorLevel: \"OK\", errorMessage: \"Success\" }, results: data };\r\n    }\r\n}","import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { plainToClass } from 'class-transformer';\r\n\r\n\r\n/**\r\n * @ignore\r\n */\r\ninterface ClassType<T> {\r\n    new(): T;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\n@Injectable()\r\n\r\nexport class TransformInterceptor<T> implements NestInterceptor<Partial<T>, T> {\r\n    constructor(private readonly classType: ClassType<T>) { }\r\n    intercept(context: ExecutionContext, next: CallHandler<Partial<T>>): Observable<T> | Promise<Observable<T>> {\r\n        return next.handle().pipe(map(data => plainToClass(this.classType, data, { excludeExtraneousValues: true })));\r\n    }\r\n}","import { Exclude, Expose } from \"class-transformer\";\r\n\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class MessageDto {\r\n    @Expose()\r\n    message: string;\r\n    @Exclude()\r\n    name: string;\r\n}","import { Injectable, Logger, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n/**\r\n * This is a logger middleware class which returns with a message based on checking status code \r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class LoggerMiddleware implements NestMiddleware {\r\n  private readonly logger = new Logger('HTTP');\r\n \r\n  /**\r\n   * Returns a message based\r\n   * @argument request\r\n   * @argument response\r\n   * @argument next\r\n   * @ignore \r\n   */\r\n  use(request: Request, response: Response, next: NextFunction) {\r\n    /**\r\n     * Callback function \r\n     * @callback\r\n     */\r\n    response.on('finish', () => {\r\n      const { method, originalUrl } = request;\r\n      const { statusCode, statusMessage } = response;\r\n \r\n      const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\r\n \r\n      if (statusCode >= 500) {\r\n        return this.logger.error(message);\r\n      }\r\n \r\n      else if (statusCode >= 400) {\r\n        return this.logger.warn(message);\r\n      }\r\n \r\n      else return this.logger.log(message);\r\n    });\r\n \r\n    next();\r\n  }\r\n}","import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\r\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\r\nimport { Pagination } from \"nestjs-typeorm-paginate\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { TransformInterceptor } from \"../../../interceptors/transform.interceptor\";\r\nimport { AplDto } from \"../dto/apl.dto\";\r\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\r\nimport { AplService } from \"../service/apl.service\";\r\n\r\n\r\n/**\r\n * Handles requests related to apl \r\n */\r\n\r\n@Controller({\r\n    version: ['1'],\r\n    path: 'assets/apl'\r\n})\r\n@ApiTags('apl-controller')\r\n\r\nexport class AplController {\r\n    private readonly logger = new Logger(AplController.name);\r\n    /**\r\n     * Constructor for apl controller \r\n     * @param aplService \r\n     */\r\n    constructor(private aplService: AplService) { }\r\n/**\r\n * Post method of apl for apl creation \r\n * @param data \r\n * @returns \r\n */\r\n    @Post()\r\n    @HttpCode(HttpStatus.CREATED)\r\n    @UseInterceptors(new TransformInterceptor(AplDto))\r\n    @ApiOperation({ summary: 'Create Apl' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The apl has been successfully created.'})\r\n    public async create(@Body() data: AplDto): Promise<AplDto> {\r\n        const d = await this.aplService.create(data);\r\n        this.logger.log(`data: ${JSON.stringify(d)}`);\r\n        return this.aplService.create(data);\r\n    }\r\n\r\n    /**\r\n     * Get method of apl. Finds all the apl in database\r\n     * @returns \r\n     */\r\n    @Get()\r\n    @HttpCode(HttpStatus.OK)\r\n    @UseInterceptors(new TransformInterceptor(AplDto))\r\n    @ApiOperation({ summary: 'Fin all apl' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async findAll() {\r\n        return this.aplService.findAll();\r\n    }\r\n\r\n    /**\r\n     * Get apl by id . Finds apl  based on id provided\r\n     * @param id \r\n     * @returns \r\n     */\r\n    @Get(':id')\r\n    @HttpCode(HttpStatus.OK)\r\n    @UseInterceptors(new TransformInterceptor(AplDto))\r\n    @ApiOperation({ summary: 'Find apl by id' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async findOne(@Param('id') id) {\r\n        return this.aplService.findById(id);\r\n    }\r\n\r\n    /**\r\n     * Put method of apl . Updates apl based on id and data\r\n     * @param id \r\n     * @param data \r\n     * @returns \r\n     */\r\n    @Put(':id')\r\n    @HttpCode(HttpStatus.CREATED)\r\n    @UseInterceptors(new TransformInterceptor(AplDto))\r\n    @ApiOperation({ summary: 'Updated apl' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The apl has been successfully updated.'})\r\n    public async update(@Param('id') id: number, @Body() data: AplDto) {\r\n        return this.aplService.update(id, data);\r\n    }\r\n\r\n    /**\r\n     * Delete api request of apl. Deletes apl by id\r\n     * @param id \r\n     * @returns \r\n     */\r\n    @Delete(':id')\r\n    @HttpCode(HttpStatus.OK)\r\n    @UseInterceptors(new TransformInterceptor(AplDto))\r\n    @ApiOperation({ summary: 'Delete apl by id' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async remove(@Param('id') id: number): Promise<AplDto> {\r\n        return this.aplService.remove(id);\r\n    }\r\n \r\n    /**\r\n     * Find apl list by pagination\r\n     * @param state \r\n     * @returns \r\n     */\r\n    @Post('paginate')\r\n    @ApiOperation({ summary: 'Find apl list by pagination' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    async paginate(@Body() state: StateDto): Promise<Pagination<LandmarkEntity>> {\r\n        return this.aplService.paginate(state);\r\n    }\r\n}","import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, Query, UseInterceptors } from \"@nestjs/common\";\r\nimport { ApiOperation, ApiProperty, ApiResponse, ApiTags } from \"@nestjs/swagger\";\r\nimport * as https from 'https';\r\nimport axios, { AxiosRequestConfig } from 'axios';\r\nimport { Pagination } from \"nestjs-typeorm-paginate\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\r\nimport { AssetDto } from \"../dto/asset.dto\";\r\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\r\nimport { AssetService } from \"../service/asset.service\";\r\n\r\ninterface NodeApiAssetData {\r\n    asset_id: string;\r\n    aircraftid: string;\r\n    start_event_time: string;\r\n    stop_event_time: string;\r\n    current_status: 'IN-AIR' | 'ON-GROUND';\r\n    gps_lat: string;\r\n    gps_long: string;\r\n    speed: string;\r\n    heading: string;\r\n    altitude: string;\r\n    date_time: string;\r\n    initial_gps_lat: string;\r\n    initial_gps_long: string;\r\n    elapsed_time: {\r\n      days: number;\r\n      hours: number;\r\n      minutes: number;\r\n    };\r\n    location: string;\r\n    distance: number;\r\n  }\r\n  \r\n\r\n\r\n\r\n/**\r\n * Handles api request related to asset \r\n */\r\n@Controller({\r\n    version: ['1'],\r\n    path: 'assets'\r\n})\r\n@ApiTags('assets')\r\n@UseInterceptors(ResTransformInterceptor)\r\n\r\n\r\n\r\n\r\nexport class AssetController {\r\n    private readonly logger = new Logger(AssetController.name);\r\n    /**\r\n     * Constructor for asset controller \r\n     * @param assetService \r\n     */\r\n    constructor(private assetService: AssetService) { }\r\n\r\n    /**\r\n     * Creates new asset\r\n     * @param data \r\n     * @returns \r\n     */\r\n    @Post()\r\n    @HttpCode(HttpStatus.CREATED)\r\n    @ApiOperation({ summary: 'Create Asset' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The asset has been successfully created.'})\r\n    public async create(@Body() data: AssetDto): Promise<AssetDto> {\r\n        return this.assetService.create(data);\r\n    }\r\n\r\n    /**\r\n     * Find all the assets in database\r\n     * @returns \r\n     */\r\n    @Get()\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Fin all asset' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async findAll() {\r\n        return this.assetService.findAll();\r\n    }\r\n\r\n\r\n\r\n    @Get('user-assets/:customerId')\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiOperation({ summary: 'Find assets by customer ID' })\r\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n  public async findUserAssets(@Param('customerId') customerId: number) {\r\n    return this.assetService.findUserAssets(customerId);\r\n  }\r\n\r\n  @Get('customer-assets/:customerId')\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiOperation({ summary: 'Find assets by customer ID' })\r\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n  public async findCustomerAssets(@Param('customerId') customerId: number) {\r\n    return this.assetService.findCustomerAssets(customerId);\r\n  }\r\n\r\n//Adding customerId and customer filter \r\n\r\n\r\n// @Get('latestdata')\r\n// @HttpCode(HttpStatus.OK)\r\n// @ApiOperation({ summary: 'Find Latest Data for an Asset' })\r\n// @ApiResponse({ status: 403, description: 'Forbidden' })\r\n// public async findAssetData(\r\n//   @Query('sort') sort?: 'asc' | 'desc',\r\n//   @Query('filter') filter?: 'active' | 'inactive',\r\n//   @Query('search') search?: string,\r\n//   @Query('customerId') customerId?: string, // Add this query parameter\r\n//   @Query('id') id?: string, // Add this query parameter\r\n// ): Promise<NodeApiAssetData[]> {\r\n//   const NODE_API_URL = 'https://star-ads-app.com:3378/getLatestAssetData';\r\n//     //  const NODE_API_URL='http://103.10.234.244:3378/getLatestAssetData';\r\n//   // const NODE_API_URL=`http://localhost:3378/getLatestAssetData`;\r\n//   const nodeResponse = await axios.get(NODE_API_URL);\r\n//   const nodeApiAssetData: NodeApiAssetData[] = nodeResponse.data;\r\n//   let nestAssetData = await this.assetService.findAll();\r\n//   let matchedData = [];\r\n\r\n//   if (customerId) { // Check if customerId is provided\r\n//     // Find asset data matching the requested customerId\r\n//     nestAssetData = nestAssetData.filter((asset: any) => asset.customerId.toString() === customerId);\r\n//   } else if (id) {\r\n//     nestAssetData = nestAssetData.filter((asset: any) => asset.customerId.toString() === id);\r\n//   } \r\n\r\n\r\n//     for (const nestAsset of nestAssetData) {\r\n//       const matchedNestData = nodeApiAssetData.find((data: any) => data.asset_id === nestAsset.esn);\r\n//       if (matchedNestData) {\r\n//         matchedData.push(Object.assign(nestAsset, matchedNestData));\r\n//       }\r\n//     }\r\n\r\n//     if (filter) {\r\n//       matchedData = matchedData.filter((asset: any) => {\r\n//         const elapsedTime = asset.elapsed_time.days * 86400 + asset.elapsed_time.hours * 3600 + asset.elapsed_time.minutes * 60;\r\n//         if (elapsedTime > 14 * 86400) {\r\n//           return filter === 'inactive';\r\n//         } else {\r\n//           return filter === 'active';\r\n//         }\r\n//       });\r\n//     }\r\n\r\n//     if (search) {\r\n//       matchedData = matchedData.filter((asset: any) => asset.asset_id === search);\r\n//     }\r\n\r\n//     if (sort) {\r\n//       matchedData = matchedData.sort((a: any, b: any) => {\r\n//         const aElapsedTime = a.elapsed_time.days * 86400 + a.elapsed_time.hours * 3600 + a.elapsed_time.minutes * 60;\r\n//         const bElapsedTime = b.elapsed_time.days * 86400 + b.elapsed_time.hours * 3600 + b.elapsed_time.minutes * 60;\r\n//         if (sort === 'asc') {\r\n//           return aElapsedTime - bElapsedTime;\r\n//         } else {\r\n//           return bElapsedTime - aElapsedTime;\r\n//         }\r\n//       });\r\n//     }\r\n  \r\n\r\n//   return matchedData;\r\n// }\r\n\r\n\r\n@Get('latestdata')\r\n@HttpCode(HttpStatus.OK)\r\n@ApiOperation({ summary: 'Find Latest Data for an Asset' })\r\n@ApiResponse({ status: 403, description: 'Forbidden' })\r\npublic async findAssetData(\r\n  @Query('sort') sort?: 'asc' | 'desc',\r\n  @Query('filter') filter?: 'active' | 'inactive',\r\n  @Query('search') search?: string,\r\n  @Query('customerId') customerId?: string, // Add this query parameter\r\n  @Query('id') id?: string, // Add this query parameter\r\n): Promise<NodeApiAssetData[]> {\r\n  try {\r\n    const NODE_API_URL = 'https://star-ads-app.com:3378/getLatestAssetData';\r\n    //  const NODE_API_URL='http://103.10.234.244:3378/getLatestAssetData';\r\n    // const NODE_API_URL=`http://localhost:3378/getLatestAssetData`;\r\n\r\n    // const nodeResponse = await axios.get(NODE_API_URL );\r\n\r\n    const axiosConfig: AxiosRequestConfig = {\r\n      url: NODE_API_URL,\r\n      method: 'get',\r\n      httpsAgent: new https.Agent({ rejectUnauthorized: false }),\r\n    };\r\n\r\n    const nodeResponse = await axios(axiosConfig);\r\n    const nodeApiAssetData: NodeApiAssetData[] = nodeResponse.data;\r\n    let nestAssetData = await this.assetService.findAll();\r\n    let matchedData = [];\r\n\r\n    if (customerId) {\r\n      nestAssetData = nestAssetData.filter((asset: any) => asset.customerId.toString() === customerId);\r\n    } else if (id) {\r\n      nestAssetData = nestAssetData.filter((asset: any) => asset.customerId.toString() === id);\r\n    }\r\n\r\n    for (const nestAsset of nestAssetData) {\r\n      const matchedNestData = nodeApiAssetData.find((data: any) => data.asset_id === nestAsset.esn);\r\n      if (matchedNestData) {\r\n        matchedData.push(Object.assign(nestAsset, matchedNestData));\r\n      }\r\n    }\r\n\r\n    if (filter) {\r\n      matchedData = matchedData.filter((asset: any) => {\r\n        const elapsedTime = asset.elapsed_time.days * 86400 + asset.elapsed_time.hours * 3600 + asset.elapsed_time.minutes * 60;\r\n        if (elapsedTime > 14 * 86400) {\r\n          return filter === 'inactive';\r\n        } else {\r\n          return filter === 'active';\r\n        }\r\n      });\r\n    }\r\n\r\n    if (search) {\r\n      matchedData = matchedData.filter((asset: any) => asset.asset_id === search);\r\n    }\r\n\r\n    if (sort) {\r\n      matchedData = matchedData.sort((a: any, b: any) => {\r\n        const aElapsedTime = a.elapsed_time.days * 86400 + a.elapsed_time.hours * 3600 + a.elapsed_time.minutes * 60;\r\n        const bElapsedTime = b.elapsed_time.days * 86400 + b.elapsed_time.hours * 3600 + b.elapsed_time.minutes * 60;\r\n        if (sort === 'asc') {\r\n          return aElapsedTime - bElapsedTime;\r\n        } else {\r\n          return bElapsedTime - aElapsedTime;\r\n        }\r\n      });\r\n    }\r\n\r\n    return matchedData;\r\n  } catch (error) {\r\n    // Log the error\r\n    console.error('Error occurred while fetching data from the Node API:', error);\r\n\r\n    // Return empty values or handle the error gracefully\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * Find asset based on customer id \r\n * @param id \r\n * @returns \r\n */\r\n    @Get(':id')\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Find asset by customerId' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async findAssetOfUser(@Param('id') id:number) {\r\n        return this.assetService.findUserAsset(id);\r\n    }\r\n\r\n    /**\r\n     * Updates existing asset with new data \r\n     * @param data \r\n     * @returns \r\n     */\r\n    @Put()\r\n    @HttpCode(HttpStatus.CREATED)\r\n    @ApiOperation({ summary: 'Updated asset' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The asset has been successfully updated.'})\r\n    public async update(@Body() data: AssetDto) {\r\n        return this.assetService.update(data);\r\n    }\r\n\r\n    /**\r\n     * Deletes asset based on id \r\n     * @param id \r\n     * @returns \r\n     */\r\n    @Delete(':id')\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Delete asset by id' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async remove(@Param('id') id: number): Promise<AssetDto> {\r\n        return this.assetService.remove(id);\r\n    }\r\n\r\n    /**\r\n     * Find asset list by pagination \r\n     * @param state \r\n     * @returns \r\n     */\r\n    @Post('paginate')\r\n    @ApiOperation({ summary: 'Find asset list by pagination' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    async paginate(@Body() state: StateDto): Promise<Pagination<LandmarkEntity>> {\r\n        return this.assetService.paginate(state);\r\n    }\r\n}","import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\r\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\r\nimport { Pagination } from \"nestjs-typeorm-paginate\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\r\nimport { TransformInterceptor } from \"../../../interceptors/transform.interceptor\";\r\nimport { CustomerDto, NewCustomerDto } from \"../dto/customer.dto\";\r\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\r\nimport { CustomerService } from \"../service/customer.service\";\r\n// import { NewCustomerEntity } from \"../entity/customer.entity\";\r\n\r\n\r\n/**\r\n * Handles api requests related to customers \r\n */\r\n\r\n\r\n@Controller({\r\n    version: ['1'],\r\n    path: 'customers'\r\n  })\r\n  @ApiTags('customer-controller')\r\n  @UseInterceptors(ResTransformInterceptor)\r\n  export class CustomerController {\r\n    private readonly logger = new Logger(CustomerController.name);\r\n  \r\n    constructor(private customerService: CustomerService) {}\r\n  \r\n    @Post()\r\n    @HttpCode(HttpStatus.CREATED)\r\n    @UseInterceptors(new TransformInterceptor(CustomerDto))\r\n    @ApiOperation({ summary: 'Create Customer' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The customer has been successfully created.'})\r\n    public async create(@Body() data: CustomerDto): Promise<CustomerDto> {\r\n      return this.customerService.create(data);\r\n    }\r\n  \r\n    @Get()\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Find all customer' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async findAll() {\r\n      return this.customerService.findAll();\r\n    }\r\n  \r\n    @Get(':id')\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Find a customer by ID' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.OK, description: 'The customer has been successfully retrieved.'})\r\n    @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'The specified customer could not be found.'})\r\n    public async findOne(@Param('id') id: number) {\r\n      return this.customerService.findOne(id);\r\n    }\r\n\r\n    @Get('user/:id')\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Find a customer user by ID' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.OK, description: 'The customer has been successfully retrieved.'})\r\n    @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'The specified customer could not be found.'})\r\n    public async findCustomerUser(@Param('id') id: number) {\r\n      return this.customerService.findCustomerUser(id);\r\n    }\r\n  \r\n    @Put(':id')\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Update a customer by ID' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.OK, description: 'The customer has been successfully updated.'})\r\n    @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'The specified customer could not be found.'})\r\n    public async update(@Param('id') id: number, @Body() data: CustomerDto) {\r\n      return this.customerService.update(id, data);\r\n    }\r\n  \r\n    @Delete(':id')\r\n    @HttpCode(HttpStatus.NO_CONTENT)\r\n    @ApiOperation({ summary: 'Delete a customer by ID' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.NO_CONTENT, description: 'The customer has been successfully deleted.'})\r\n    @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'The specified customer could not be found.'})\r\n    public async delete(@Param('id') id: number) {\r\n      await this.customerService.delete(id);\r\n    }\r\n  }\r\n  ","import { Body, Controller, Delete, Get, Param, Post, Put } from '@nestjs/common';\r\nimport { ApiTags, ApiResponse, ApiBadRequestResponse, ApiNotFoundResponse } from '@nestjs/swagger';\r\nimport { EventNotificationMainDto } from '../dto/event.notification.dto';\r\nimport { EventNotificationService } from '../service/eventNotification.service';\r\nimport { EventBasedNotificationEntity } from '../entity/event.based.notification.entity';\r\n\r\n@ApiTags('Event Notifications')\r\n@Controller('event-notifications')\r\nexport class EventNotificationController {\r\n  constructor(private readonly eventNotificationService: EventNotificationService) {}\r\n\r\n  @Post()\r\n  @ApiResponse({ status: 201, description: 'Created', type: EventBasedNotificationEntity })\r\n  @ApiBadRequestResponse({ description: 'Bad Request' })\r\n  create(@Body() data: EventNotificationMainDto): Promise<EventBasedNotificationEntity> {\r\n    return this.eventNotificationService.create(data);\r\n  }\r\n\r\n  @Get(':id')\r\n  @ApiResponse({ status: 200, description: 'OK', type: EventBasedNotificationEntity })\r\n  @ApiNotFoundResponse({ description: 'Event Notification not found' })\r\n  findById(@Param('id') id: number): Promise<EventBasedNotificationEntity> {\r\n    return this.eventNotificationService.findById(id);\r\n  }\r\n\r\n  @Get()\r\n  @ApiResponse({ status: 200, description: 'OK', type: [EventBasedNotificationEntity] })\r\n  findAll(): Promise<EventBasedNotificationEntity[]> {\r\n    return this.eventNotificationService.findAll();\r\n  }\r\n\r\n  @Put(':id')\r\n  @ApiResponse({ status: 200, description: 'OK', type: EventBasedNotificationEntity })\r\n  @ApiNotFoundResponse({ description: 'Event Notification not found' })\r\n  update(\r\n    @Param('id') id: number,\r\n    @Body() data: EventNotificationMainDto\r\n  ): Promise<EventBasedNotificationEntity> {\r\n    return this.eventNotificationService.update(id, data);\r\n  }\r\n\r\n  @Delete(':id')\r\n  @ApiResponse({ status: 200, description: 'OK', type: EventBasedNotificationEntity })\r\n  @ApiNotFoundResponse({ description: 'Event Notification not found' })\r\n  remove(@Param('id') id: number): Promise<EventBasedNotificationEntity> {\r\n    return this.eventNotificationService.remove(id);\r\n  }\r\n}\r\n","import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\r\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\r\nimport { Pagination } from \"nestjs-typeorm-paginate\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { TransformInterceptor } from \"../../../interceptors/transform.interceptor\";\r\nimport { EventDetailDto } from \"../dto/event.detail.dto\";\r\nimport { EventDetailsEntity } from \"../entity/event.details.entity\";\r\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\r\nimport { EventDetailService } from \"../service/event.detail.service\";\r\n\r\n\r\n/**\r\n * Handles Event API request\r\n */\r\n@Controller({\r\n    version: ['1'],\r\n    path: 'event-details'\r\n})\r\n@ApiTags('event-details-controller')\r\n\r\n\r\nexport class EventDetailController {\r\n    private readonly logger = new Logger(EventDetailController.name);\r\n\r\n    /**\r\n     * Constructor for aplservice \r\n     * @param aplService \r\n     */\r\n    constructor(private aplService: EventDetailService) { }\r\n\r\n    /**\r\n     * Create new event \r\n     * @param data \r\n     * @returns \r\n     */\r\n    @Post()\r\n    @HttpCode(HttpStatus.CREATED)\r\n    @UseInterceptors(new TransformInterceptor(EventDetailDto))\r\n    @ApiOperation({ summary: 'Create event detail' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The event detail has been successfully created.'})\r\n    public async create(@Body() data: EventDetailDto): Promise<EventDetailDto> {\r\n        const d = await this.aplService.create(data);\r\n        this.logger.log(`data: ${JSON.stringify(d)}`);\r\n        return this.aplService.create(data);\r\n    }\r\n\r\n    /**\r\n     * Find all the event details \r\n     * @returns \r\n     */\r\n    @Get()\r\n    @HttpCode(HttpStatus.OK)\r\n    @UseInterceptors(new TransformInterceptor(EventDetailDto))\r\n    @ApiOperation({ summary: 'Fin all event detail' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async findAll() {\r\n        return this.aplService.findAll();\r\n    }\r\n\r\n    /**\r\n     * Find event detail by id \r\n     * @param id \r\n     * @returns \r\n     */\r\n    @Get(':id')\r\n    @HttpCode(HttpStatus.OK)\r\n    @UseInterceptors(new TransformInterceptor(EventDetailDto))\r\n    @ApiOperation({ summary: 'Find event detail by id' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async findOne(@Param('id') id) {\r\n        return this.aplService.findById(id);\r\n    }\r\n\r\n    /**\r\n     * Updates event detail\r\n     * @param id \r\n     * @param data \r\n     * @returns \r\n     */\r\n    @Put(':id')\r\n    @HttpCode(HttpStatus.CREATED)\r\n    @UseInterceptors(new TransformInterceptor(EventDetailDto))\r\n    @ApiOperation({ summary: 'Updated event detail' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The event detail has been successfully updated.'})\r\n    public async update(@Param('id') id: number, @Body() data: EventDetailDto) {\r\n        return this.aplService.update(id, data);\r\n    }\r\n\r\n    /**\r\n     * Delete event by id \r\n     * @param id \r\n     * @returns \r\n     */\r\n\r\n    @Delete(':id')\r\n    @HttpCode(HttpStatus.OK)\r\n    @UseInterceptors(new TransformInterceptor(EventDetailDto))\r\n    @ApiOperation({ summary: 'Delete event detail by id' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async remove(@Param('id') id: number): Promise<EventDetailDto> {\r\n        return this.aplService.remove(id);\r\n    }\r\n\r\n    /**\r\n     * Find event detail list by pagination\r\n     * @param state \r\n     * @returns \r\n     */\r\n    @Post('paginate')\r\n    @ApiOperation({ summary: 'Find event detail list by pagination' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    async paginate(@Body() state: StateDto): Promise<Pagination<EventDetailsEntity>> {\r\n        return this.aplService.paginate(state);\r\n    }\r\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\r\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\r\nimport { Pagination } from \"nestjs-typeorm-paginate\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\r\nimport { GeofenceDto } from \"../dto/geofence.dto\";\r\nimport { GeofenceEntity } from \"../entity/geofence.entity\";\r\nimport { GeofenceService } from \"../service/geofence.service\";\r\n\r\n\r\n/**\r\n * Handles geofence API request\r\n */\r\n@Controller({\r\n    version: ['1'],\r\n    path: 'geofence'\r\n})\r\n@ApiTags('geofence-controller')\r\n@UseInterceptors(ResTransformInterceptor)\r\n\r\n\r\nexport class GeofenceController {\r\n    private readonly logger = new Logger(GeofenceController.name);\r\n    /**\r\n     * Constructor for geofence controller \r\n     * @param geofenceService \r\n     */\r\n    constructor(private geofenceService: GeofenceService) { }\r\n\r\n    /**\r\n     * Create new geofence\r\n     * @param data \r\n     * @returns \r\n     */\r\n    @Post()\r\n    @HttpCode(HttpStatus.CREATED)\r\n    @ApiOperation({ summary: 'Create geofence' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The geofence has been successfully created.'})\r\n    public async create(@Body() data: GeofenceDto): Promise<GeofenceEntity> {\r\n        return this.geofenceService.create(data);\r\n    }\r\n\r\n    /**\r\n     * Find all geofence\r\n     * @returns \r\n     */\r\n\r\n    @Get()\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Find all geofence' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async findAll() {\r\n        return this.geofenceService.findAll();\r\n    }\r\n\r\n    /**\r\n     * Find geofence template by id \r\n     * @param id \r\n     * @returns \r\n     */\r\n\r\n    @Get(':id')\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Find geofence template by id' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async findOne(@Param('id') id) {\r\n        return this.geofenceService.findById(id);\r\n    }\r\n\r\n    /**\r\n     * Update geofence template by id and new data\r\n     * @param id \r\n     * @param data \r\n     * @returns \r\n     */\r\n\r\n    @Put(':id')\r\n    @HttpCode(HttpStatus.CREATED)\r\n    @ApiOperation({ summary: 'Updated geofence template' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The geofence has been successfully updated.'})\r\n    public async update(@Param('id') id: number, @Body() data: GeofenceDto) {\r\n        return this.geofenceService.update(id, data);\r\n    }\r\n\r\n    /**\r\n     * Delete geofence by id \r\n     * @param id \r\n     * @returns \r\n     */\r\n    @Delete(':id')\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Delete geofence by id' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async remove(@Param('id') id: number): Promise<GeofenceEntity> {\r\n        return this.geofenceService.remove(id);\r\n    }\r\n\r\n    /**\r\n     * Find notification template list by pagination\r\n     * @param state \r\n     * @returns \r\n     */\r\n    @Post('paginate')\r\n    @ApiOperation({ summary: 'Find notification template list by pagination' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    async paginate(@Body() state: StateDto): Promise<Pagination<GeofenceEntity>> {\r\n        return this.geofenceService.paginate(state);\r\n    }\r\n}","import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\r\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\r\nimport { Pagination } from \"nestjs-typeorm-paginate\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { TransformInterceptor } from \"../../../interceptors/transform.interceptor\";\r\nimport { GroupDto } from \"../dto/group.dto\";\r\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\r\nimport { GroupService } from \"../service/group.service\";\r\n\r\n\r\n/**\r\n * Handles api request related to group\r\n */\r\n@Controller({\r\n    version: ['1'],\r\n    path: 'groups'\r\n})\r\n@ApiTags('groups')\r\n\r\n\r\nexport class GroupController {\r\n    private readonly logger = new Logger(GroupController.name);\r\n    /**\r\n     * Constructor for group controller\r\n     * @param groupService \r\n     */\r\n    constructor(private groupService: GroupService) { }\r\n\r\n    /**\r\n     * Create a group\r\n     * @param data \r\n     * @returns \r\n     */\r\n    @Post()\r\n    @HttpCode(HttpStatus.CREATED)\r\n    @UseInterceptors(new TransformInterceptor(GroupDto))\r\n    @ApiOperation({ summary: 'Create Group' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The group has been successfully created.'})\r\n    public async create(@Body() data: GroupDto): Promise<GroupDto> {\r\n        return this.groupService.create(data);\r\n    }\r\n\r\n    /**\r\n     * Find all the group\r\n     * @returns \r\n     */\r\n    @Get()\r\n    @HttpCode(HttpStatus.OK)\r\n    @UseInterceptors(new TransformInterceptor(GroupDto))\r\n    @ApiOperation({ summary: 'Find all group' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async findAll() {\r\n        return this.groupService.findAll();\r\n    }\r\n\r\n    /**\r\n     * Find a group by id \r\n     * @param id \r\n     * @returns \r\n     */\r\n    @Get(':id')\r\n    @HttpCode(HttpStatus.OK)\r\n    @UseInterceptors(new TransformInterceptor(GroupDto))\r\n    @ApiOperation({ summary: 'Find group by id' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async findOne(@Param('id') id) {\r\n        return this.groupService.findById(id);\r\n    }\r\n\r\n    /**\r\n     * Update a group with new data based on id \r\n     * @param id \r\n     * @param data \r\n     * @returns \r\n     */\r\n    @Put(':id')\r\n    @HttpCode(HttpStatus.CREATED)\r\n    @UseInterceptors(new TransformInterceptor(GroupDto))\r\n    @ApiOperation({ summary: 'Updated group' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The group has been successfully updated.'})\r\n    public async update(@Param('id') id: number, @Body() data: GroupDto) {\r\n        return this.groupService.update(id, data);\r\n    }\r\n\r\n    /**\r\n     * Delete a group based on id\r\n     * @param id \r\n     * @returns \r\n     */\r\n    @Delete(':id')\r\n    @HttpCode(HttpStatus.OK)\r\n    @UseInterceptors(new TransformInterceptor(GroupDto))\r\n    @ApiOperation({ summary: 'Delete group by id' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async remove(@Param('id') id: number): Promise<GroupDto> {\r\n        return this.groupService.remove(id);\r\n    }\r\n\r\n    /**\r\n     * Find group list by pagination \r\n     * @param state \r\n     * @returns \r\n     */\r\n    @Post('paginate')\r\n    @ApiOperation({ summary: 'Find group list by pagination' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    async paginate(@Body() state: StateDto): Promise<Pagination<LandmarkEntity>> {\r\n        return this.groupService.paginate(state);\r\n    }\r\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\r\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\r\nimport { Pagination } from \"nestjs-typeorm-paginate\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { TransformInterceptor } from \"../../../interceptors/transform.interceptor\";\r\nimport { LandmarkCreateDto } from \"../dto/landmark.create.dto\";\r\nimport { LandmarkService } from \"../service/landmark.service\";\r\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\r\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\r\n\r\n\r\n/**\r\n * handles request related to landmarks\r\n */\r\n@Controller({\r\n    version: ['1'],\r\n    path: 'landmarks'\r\n})\r\n@ApiTags('landmarks')\r\n@UseInterceptors(ResTransformInterceptor)\r\n\r\n\r\nexport class LandmarkController {\r\n    private readonly logger = new Logger(LandmarkController.name);\r\n    /**\r\n     * Constructor for landmark controller \r\n     * @param landmarkService \r\n     */\r\n    constructor(private landmarkService: LandmarkService) { }\r\n\r\n    /**\r\n     * handles landmark creation\r\n     * @param data \r\n     * @returns \r\n     */\r\n    @Post()\r\n    @HttpCode(HttpStatus.CREATED)\r\n    @ApiOperation({ summary: 'Create Landmark' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The landmark has been successfully created.'})\r\n    public async create(@Body() data: LandmarkCreateDto): Promise<LandmarkCreateDto> {\r\n        return this.landmarkService.create(data);\r\n    }\r\n\r\n    /**\r\n     * Find all the landmark \r\n     * @returns \r\n     */\r\n    @Get()\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Fin all landmark' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async findAll() {\r\n        return this.landmarkService.findAll();\r\n    }\r\n\r\n    /**\r\n     * Find a landmark by id provided\r\n     * @param id \r\n     * @returns \r\n     */\r\n    @Get(':id')\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Find landmark by id' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async findOne(@Param('id') id) {\r\n        return this.landmarkService.findById(id);\r\n    }\r\n\r\n    /**\r\n     * Updates a landmark with new data based on id\r\n     * @param id \r\n     * @param data \r\n     * @returns \r\n     */\r\n\r\n    @Put(':id')\r\n    @HttpCode(HttpStatus.CREATED)\r\n    @ApiOperation({ summary: 'Updated Landmark' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The landmark has been successfully updated.'})\r\n    public async update(@Param('id') id: number, @Body() data: LandmarkCreateDto) {\r\n        return this.landmarkService.update(id, data);\r\n    }\r\n\r\n    /**\r\n     * Delete a landmark\r\n     * @param id \r\n     * @returns \r\n     */\r\n    @Delete(':id')\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Delete landmark by id' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async remove(@Param('id') id: number): Promise<LandmarkCreateDto> {\r\n        return this.landmarkService.remove(id);\r\n    }\r\n\r\n    /**\r\n     * Find landmark list by pagination\r\n     * @param state \r\n     * @returns \r\n     */\r\n    @Post('paginate')\r\n    @ApiOperation({ summary: 'Find landmark list by pagination' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    async paginate(@Body() state: StateDto): Promise<Pagination<LandmarkEntity>> {\r\n        return this.landmarkService.paginate(state);\r\n    }\r\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\r\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\r\nimport { Pagination } from \"nestjs-typeorm-paginate\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\r\nimport { LayerCreateDto } from \"../dto/layer.create.dto\";\r\nimport { LayerEntity } from \"../entity/layer.entity\";\r\nimport { LayerService } from \"../service/layer.service\";\r\n\r\n\r\n/**\r\n * This is LayerController class. handles API request related to Layer\r\n */\r\n@Controller({\r\n    version: ['1'],\r\n    path: 'layers'\r\n})\r\n@ApiTags('layers')\r\n@UseInterceptors(ResTransformInterceptor)\r\nexport class LayerController {\r\n    private readonly logger = new Logger(LayerController.name);\r\n    /**\r\n     * Constructor for layer services \r\n     * @param layerService \r\n     * \r\n     */\r\n    constructor(private layerService: LayerService) { }\r\n\r\n    /**\r\n     * This handles layer creation\r\n     * @param data \r\n     * @returns \r\n     */\r\n    @Post()\r\n    @HttpCode(HttpStatus.CREATED)\r\n    @ApiOperation({ summary: 'Create Layer' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The layer has been successfully created.'})\r\n    public async create(@Body() data: LayerCreateDto): Promise<LayerCreateDto> {\r\n        return this.layerService.create(data);\r\n    }\r\n\r\n    /**\r\n     * Handles find all the layer rquest\r\n     * @returns \r\n     */\r\n    @Get()\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Fin all layers' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async findAll() {\r\n        return this.layerService.findAll();\r\n    }\r\n\r\n    /**\r\n     * Find layer by id \r\n     * @param id \r\n     * @returns \r\n     */\r\n\r\n    @Get(':id')\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Find layer by id' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async findOne(@Param('id') id) {\r\n        return this.layerService.findById(id);\r\n    }\r\n\r\n    /**\r\n     * Update a layer\r\n     * @param id \r\n     * @param data \r\n     * @returns \r\n     */\r\n    @Put(':id')\r\n    @HttpCode(HttpStatus.CREATED)\r\n    @ApiOperation({ summary: 'Updated Layer' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The layer has been successfully updated.'})\r\n    public async update(@Param('id') id: number, @Body() data: LayerCreateDto) {\r\n        return this.layerService.update(id, data);\r\n    }\r\n\r\n    /**\r\n     * Handles layer deletion \r\n     * @param id \r\n     * @returns \r\n     */\r\n    @Delete(':id')\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Delete layer by id' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async remove(@Param('id') id: number): Promise<LayerCreateDto> {\r\n        return this.layerService.remove(id);\r\n    }\r\n\r\n    /**\r\n     * Find layer list  by pagination \r\n     * @param state \r\n     * @returns \r\n     */\r\n    @Post('paginate')\r\n    @ApiOperation({ summary: 'Find layer list by pagination' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    async paginate(@Body() state: StateDto): Promise<Pagination<LayerEntity>> {\r\n        return this.layerService.paginate(state);\r\n    }\r\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, NotFoundException, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\r\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\r\nimport { Pagination } from \"nestjs-typeorm-paginate\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { TransformInterceptor } from \"../../../interceptors/transform.interceptor\";\r\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\r\nimport { NewLayerService } from \"../service/newlayer.service\";\r\nimport { NLayerDto } from \"../dto/newlayer.dto\";\r\n\r\n\r\n/**\r\n * handles request related to NewLayers\r\n */\r\n@Controller({\r\n    version: ['1'],\r\n    path: 'newlayer'\r\n})\r\n@ApiTags('newlayer')\r\n@UseInterceptors(ResTransformInterceptor)\r\n\r\n\r\nexport class NewLayerController {\r\n    private readonly logger = new Logger(NewLayerController.name);\r\n    /**\r\n     * Constructor for NewLayer controller \r\n     * @param newlayer \r\n     */\r\n    constructor(private newlayer: NewLayerService) { }\r\n    // constructor(private  productCategoryService:NewLayerService ) {}\r\n  \r\n\r\n  //   /**\r\n  //    * handles NewLayer creation\r\n  //    * @param data \r\n  //    * @returns \r\n  //    */\r\n   \r\n  @Post()\r\n  @ApiOperation({ summary: 'Create a new layer' })\r\n  @ApiResponse({\r\n    status: 201,\r\n    description: 'The layer has been successfully created.',\r\n    type: NLayerDto,\r\n  })\r\n  @ApiResponse({ status: 400, description: 'Bad Request' })\r\n  async create(@Body() layerDto: NLayerDto) {\r\n    return this.newlayer.createLayer(layerDto);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all layers' })\r\n  @ApiResponse({ status: 200, description: 'Successful retrieval of layers', type: NLayerDto, isArray: true })\r\n  async getLayers(): Promise<NLayerDto[]> {\r\n    return this.newlayer.getLayers();\r\n  }\r\n\r\n\r\n  @Put(':id')\r\n  async updateLayer(\r\n    @Param('id') layerId: number,\r\n    @Body() layerDTO: NLayerDto,\r\n  ): Promise<NLayerDto> {\r\n    const updatedLayer = await this.newlayer.updateLayer(layerId, layerDTO);\r\n    if (!updatedLayer) {\r\n      throw new NotFoundException(`Layer with id ${layerId} not found`);\r\n    }\r\n    return updatedLayer;\r\n  }\r\n\r\n  @Delete(':id')\r\n  async deleteLayer(@Param('id') layerId: number): Promise<void> {\r\n    await this.newlayer.deleteLayer(layerId);\r\n  }\r\n\r\n\r\n\r\n\r\n  //22 feb controller \r\n \r\n    // @Post()\r\n    // create(@Body() productCategoryDTO: NLayerDto) {\r\n    //   return this.productCategoryService.create(productCategoryDTO);\r\n    // }\r\n  \r\n    // @Get()\r\n    // findAll() {\r\n    //   return this.productCategoryService.findAll();\r\n    // }\r\n  \r\n    // @Get(':id')\r\n    // findOne(@Param('id') id: string) {\r\n    //   return this.productCategoryService.findOne(+id);\r\n    // }\r\n  \r\n    // @Put(':id')\r\n    // update(@Param('id') id: string, @Body() productCategoryDTO: NLayerDto) {\r\n    //   return this.productCategoryService.update(+id, productCategoryDTO);\r\n    // }\r\n  \r\n    // @Delete(':id')\r\n    // remove(@Param('id') id: string) {\r\n    //   return this.productCategoryService.remove(+id);\r\n    // }\r\n  }\r\n  \r\n  \r\n\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\r\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\r\nimport { Pagination } from \"nestjs-typeorm-paginate\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\r\nimport { NotificationDto } from \"../dto/notification.dto\";\r\nimport { NotificationEntity } from \"../entity/notification.entity\";\r\nimport { NotificationTemplateEntity } from \"../entity/notification.template.entity\";\r\nimport { NotificationService } from \"../service/notification.service\";\r\n\r\n\r\n/**\r\n * This handles API request related to Notification\r\n */\r\n@Controller({\r\n    version: ['1'],\r\n    path: 'notification'\r\n})\r\n@ApiTags('notification-controller')\r\n@UseInterceptors(ResTransformInterceptor)\r\n\r\n\r\nexport class NotificationController {\r\n    private readonly logger = new Logger(NotificationController.name);\r\n    /**\r\n     * Constructor Controller for notification\r\n     * @param layerService \r\n     */\r\n    constructor(private layerService: NotificationService) { }\r\n\r\n    /**\r\n     * Create new notification\r\n     * @param data \r\n     * @returns \r\n     */\r\n    @Post()\r\n    @HttpCode(HttpStatus.CREATED)\r\n    @ApiOperation({ summary: 'Create notification' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The notification template has been successfully created.'})\r\n    public async create(@Body() data: NotificationDto): Promise<NotificationEntity> {\r\n        return this.layerService.create(data);\r\n    }\r\n\r\n    /**\r\n     * Get all the notitifcation\r\n     * @returns \r\n     */\r\n    @Get()\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Find all notification template' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async findAll() {\r\n        return this.layerService.findAll();\r\n    }\r\n\r\n    /**\r\n     * Find notification by id \r\n     * @param id \r\n     * @returns \r\n     */\r\n    @Get(':id')\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Find notification template by id' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async findOne(@Param('id') id) {\r\n        return this.layerService.findById(id);\r\n    }\r\n\r\n    /**\r\n     * Updated notification template\r\n     * @param id \r\n     * @param data \r\n     * @returns \r\n     */\r\n    @Put(':id')\r\n    @HttpCode(HttpStatus.CREATED)\r\n    @ApiOperation({ summary: 'Updated notification template' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The notification template has been successfully updated.'})\r\n    public async update(@Param('id') id: number, @Body() data: NotificationDto) {\r\n        return this.layerService.update(id, data);\r\n    }\r\n\r\n    /**\r\n     * Delete notification  by id \r\n     * @param id \r\n     * @returns \r\n     */\r\n    @Delete(':id')\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Delete layer by id' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async remove(@Param('id') id: number): Promise<NotificationEntity> {\r\n        return this.layerService.remove(id);\r\n    }\r\n\r\n    /**\r\n     * Find notification template list by pagination\r\n     * @param state \r\n     * @returns \r\n     */\r\n    @Post('paginate')\r\n    @ApiOperation({ summary: 'Find notification template list by pagination' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    async paginate(@Body() state: StateDto): Promise<Pagination<NotificationTemplateEntity>> {\r\n        return this.layerService.paginate(state);\r\n    }\r\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, UseInterceptors } from \"@nestjs/common\";\r\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\r\nimport { Pagination } from \"nestjs-typeorm-paginate\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\r\nimport { TransformInterceptor } from \"../../../interceptors/transform.interceptor\";\r\nimport { NotificationTemplateDto } from \"../dto/notification.template.dto\";\r\nimport { NotificationTemplateEntity } from \"../entity/notification.template.entity\";\r\nimport { NotificationTemplateService } from \"../service/notification.template.service\";\r\n/**\r\n * This handles API requests related to NotificationTemplateController.\r\n */\r\n@Controller({\r\n    version: ['1'],\r\n    path: 'notification-template'\r\n})\r\n@ApiTags('notification-template-controller')\r\n@UseInterceptors(ResTransformInterceptor)\r\n\r\nexport class NotificationTemplateController {\r\n    private readonly logger = new Logger(NotificationTemplateController.name);\r\n    /**\r\n     * Constructor for notification template controller \r\n     * @param layerService \r\n     */\r\n    constructor(private layerService: NotificationTemplateService) { }\r\n\r\n    /**\r\n     * Create notification template\r\n     * @param data \r\n     * @returns \r\n     */\r\n    @Post()\r\n    @HttpCode(HttpStatus.CREATED)\r\n    @ApiOperation({ summary: 'Create notification template' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The notification template has been successfully created.'})\r\n    public async create(@Body() data: NotificationTemplateDto): Promise<NotificationTemplateDto> {\r\n        return this.layerService.create(data);\r\n    }\r\n\r\n    /**\r\n     * Find all the notification template\r\n     * @returns \r\n     */\r\n    @Get()\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Fin all notification template' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async findAll() {\r\n        return this.layerService.findAll();\r\n    }\r\n\r\n    /**\r\n     * Find notification based on template id \r\n     * @param id \r\n     * @returns \r\n     */\r\n    @Get(':id')\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Find notification template by id' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async findOne(@Param('id') id) {\r\n        return this.layerService.findById(id);\r\n    }\r\n\r\n    /**\r\n     * Updated notification template\r\n     * @param id \r\n     * @param data \r\n     * @returns \r\n     */\r\n    @Put(':id')\r\n    @HttpCode(HttpStatus.CREATED)\r\n    @ApiOperation({ summary: 'Updated notification template' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    @ApiResponse({ status: HttpStatus.CREATED, description: 'The notification template has been successfully updated.'})\r\n    public async update(@Param('id') id: number, @Body() data: NotificationTemplateDto) {\r\n        return this.layerService.update(id, data);\r\n    }\r\n\r\n    /**\r\n     * Delete Notification by id\r\n     * @param id \r\n     * @returns \r\n     */\r\n    @Delete(':id')\r\n    @HttpCode(HttpStatus.OK)\r\n    @ApiOperation({ summary: 'Delete notification by id' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    public async remove(@Param('id') id: number): Promise<NotificationTemplateDto> {\r\n        return this.layerService.remove(id);\r\n    }\r\n\r\n    /**\r\n     * Find notification template list by pagination\r\n     * @param state \r\n     * @returns \r\n     */\r\n    @Post('paginate')\r\n    @ApiOperation({ summary: 'Find notification template list by pagination' })\r\n    @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n    async paginate(@Body() state: StateDto): Promise<Pagination<NotificationTemplateEntity>> {\r\n        return this.layerService.paginate(state);\r\n    }\r\n}","import { Body, Controller, Delete, Get, Param, Post, Put } from '@nestjs/common';\r\nimport { ApiTags, ApiResponse, ApiBadRequestResponse, ApiNotFoundResponse } from '@nestjs/swagger';\r\nimport { ReportNotification } from '../entity/report-notification.entity';\r\nimport { ReportNotificationDto } from '../dto/report-notification.dto';\r\nimport { ReportNotificationService } from '../service/report-notification.service';\r\n\r\n@ApiTags('Report Notifications')\r\n@Controller('report-notifications')\r\nexport class ReportNotificationController {\r\n  constructor(private readonly reportNotificationService: ReportNotificationService) {}\r\n\r\n  @Post()\r\n  @ApiResponse({ status: 201, description: 'Created', type: ReportNotification })\r\n  @ApiBadRequestResponse({ description: 'Bad Request' })\r\n  create(@Body() data: ReportNotificationDto): Promise<ReportNotification> {\r\n    return this.reportNotificationService.create(data);\r\n  }\r\n\r\n  @Put(':customerId/:reportName')\r\n  @ApiResponse({ status: 200, description: 'Updated', type: ReportNotification })\r\n  @ApiNotFoundResponse({ description: 'Report not found' })\r\n  async update(\r\n    @Param('customerId') customerId: number,\r\n    @Param('reportName') reportName: string,\r\n    @Body() data: ReportNotificationDto,\r\n  ): Promise<ReportNotification | null> {\r\n    return this.reportNotificationService.update(customerId, reportName, data);\r\n  }\r\n\r\n  @Get(':customerId/:reportName')\r\n  @ApiResponse({ status: 200, description: 'OK', type: ReportNotification })\r\n  @ApiNotFoundResponse({ description: 'Report not found' })\r\n  async get(\r\n    @Param('customerId') customerId: number,\r\n    @Param('reportName') reportName: string,\r\n  ): Promise<ReportNotification | null> {\r\n    return this.reportNotificationService.getByCustomerIdAndReportName(customerId, reportName);\r\n  }\r\n\r\n}\r\n","import { Body, Controller, Delete, Get, HttpCode, HttpStatus, Logger, Param, Post, Put, Req, Res, UseInterceptors } from \"@nestjs/common\";\r\nimport { ApiBody, ApiOperation, ApiParam, ApiResponse, ApiTags } from \"@nestjs/swagger\";\r\nimport { Pagination } from \"nestjs-typeorm-paginate\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { UserTypeEnum } from \"../../../enum/user.type.enum\";\r\nimport { ResTransformInterceptor } from \"../../../interceptors/response.interceptor\";\r\nimport { LoginDto } from \"../dto/login.dto\";\r\nimport { NewUserDto } from \"../dto/newUser.dto\";\r\nimport { UpdateUserDto } from \"../dto/updateUser.dto\";\r\nimport { UserDto } from \"../dto/user.dto\";\r\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\r\nimport { UserEntity } from \"../entity/user.entity\";\r\nimport { NewUserService } from \"../service/newUser.service\";\r\nimport { UserService } from \"../service/user.service\";\r\n\r\n\r\n/**\r\n * This is UserController  class. It handles all the API request related to users\r\n */\r\n@Controller({\r\n    version: ['1'],\r\n    path: 'users'\r\n})\r\n@ApiTags('users')\r\n@UseInterceptors(ResTransformInterceptor)\r\n\r\n\r\nexport class UserController {\r\n    private readonly logger = new Logger(UserController.name);\r\n    constructor(private userService: NewUserService) { }\r\n/**\r\n * Handles User creation request . Creates new user in database\r\n * @param data \r\n * @returns \r\n */\r\n\r\n@Post()\r\n@ApiResponse({ status: 201, description: 'User created successfully' })\r\n@ApiResponse({ status: 400, description: 'Bad Request' })\r\n@ApiBody({ type: NewUserDto })\r\nasync create(@Body() userDto: NewUserDto) {\r\n  return this.userService.create(userDto);\r\n}\r\n\r\n  /**\r\n   * Find all the users from database\r\n   * @returns \r\n   */\r\n  @ApiOperation({ summary: 'Get all users' })\r\n  @ApiResponse({\r\n    status: 200,\r\n    description: 'Get all users successfully',\r\n  })\r\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n  @Get()\r\n  async find() {\r\n    return this.userService.find();\r\n  }\r\n\r\n  /**\r\n   * Find users based on id provided\r\n   * @param id \r\n   * @returns \r\n   */\r\n  @Get(':id')\r\n  @HttpCode(HttpStatus.OK)\r\n  @ApiOperation({ summary: 'Find user by id' })\r\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n  public async findOne(@Param('id') id:number) {\r\n      return this.userService.findById(id);\r\n  }\r\n\r\n  /**\r\n   * Find user based on accountType\r\n   * @param accountType \r\n   * @returns \r\n   */\r\n  @Get(':accountType')\r\n  @ApiOperation({ summary: 'Find users by account type' })\r\n  @ApiResponse({ status: 200, description: 'Users were found successfully.', \r\n  type: UserEntity })\r\n  \r\n  async findByAccountType(@Param('accountType') accountType: UserTypeEnum) {\r\n      return this.userService.findByAccountType(accountType);\r\n  }\r\n\r\n  /**\r\n   * Update user with new data \r\n   * @param data \r\n   * @returns \r\n   */\r\n\r\n  @Put(':id')\r\n  @ApiParam({ name: 'id', type: Number })\r\n  @ApiResponse({ status: 200, type: UserEntity })\r\n  async update(@Param('id') id: number, @Body() updateUserDto: UpdateUserDto) {\r\n    return this.userService.update(id, updateUserDto);\r\n  }\r\n\r\n  /**\r\n   * Handles deletion of user.\r\n   * @param id \r\n   * @returns \r\n   */\r\n  @Delete(':id')\r\n  @HttpCode(HttpStatus.OK)\r\n  //@UseInterceptors(new TransformInterceptor(UserDto))\r\n  @ApiOperation({ summary: 'Delete user by id' })\r\n  @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n   public async remove(@Param('id') id: number ): Promise<NewUserDto> {\r\n      return this.userService.remove(id);\r\n  }\r\n\r\n  /**\r\n   * Find User list by pagination\r\n   * @param state \r\n   * @returns \r\n   */\r\n  // @Post('paginate')\r\n  // @ApiOperation({ summary: 'Find user list by pagination' })\r\n  // @ApiResponse({ status: 403, description: 'Forbidden.' })\r\n  // async paginate(@Body() state: StateDto): Promise<Pagination<LandmarkEntity>> {\r\n  //     return this.userService.paginate(state);\r\n  // }\r\n\r\n  /**\r\n   * Handles user login API. \r\n   * @param loginDto \r\n   * @returns \r\n   */\r\n  @Post('/user/authenticate')\r\n  @ApiOperation({ summary: 'Login a user' })\r\n  @ApiResponse({ status: 200, description: 'User found and logged in successfully' })\r\n  @ApiResponse({ status: 400, description: 'Bad Request' })\r\n  async login(@Body() body: any): Promise<NewUserDto> {\r\n    const username = body.username;\r\n    const loginId = body.login_id;\r\n    const password = body.password;\r\n    const user = await this.userService.login(username, loginId, password);\r\n    return user;\r\n  }\r\n\r\n  @Get('customer/:customerId')\r\n  @ApiOperation({ summary: 'Get all users for a logged-in customer' })\r\n  @ApiResponse({ status: 200, description: 'Get all users for a logged-in customer successfully', type: UserEntity, isArray: true })\r\n  async getUsersByCustomerId(@Param('customerId') customerId: number): Promise<UserEntity[]> {\r\n      return this.userService.getUsersByCustomerId(customerId);\r\n  }\r\n  \r\n}","import { ApiProperty } from \"@nestjs/swagger\";\r\nimport { Expose, Type } from \"class-transformer\";\r\nimport { IsBoolean, IsNotEmpty, IsNumber, IsOptional, IsString } from \"class-validator\";\r\nimport { AplItemDto } from \"./apl.item.dto.\";\r\n\r\n/**\r\n * This is AplDto class\r\n * @ignore\r\n * Describes all the fields of APl for API \r\n */\r\nexport class AplDto {\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'esn'\r\n    })\r\n    @IsNotEmpty()\r\n    esn?: string;\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'customer id'\r\n    })\r\n    @IsNumber()\r\n    customerId?: number;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'version'\r\n    })\r\n    @IsNotEmpty()\r\n    version?: string;\r\n    @Expose()\r\n    @ApiProperty()\r\n    @IsOptional()\r\n    @Type(() => AplItemDto)\r\n    aplItems: Array<AplItemDto>;\r\n}","import { ApiProperty } from \"@nestjs/swagger\";\r\nimport { Expose } from \"class-transformer\";\r\nimport { IsBoolean, IsNotEmpty, IsNumber, IsString } from \"class-validator\";\r\nimport { UserTypeEnum } from \"../../../enum/user.type.enum\";\r\n\r\n\r\n/**\r\n * This is AplItems class\r\n * @ignore\r\n * Describes all the fields of APlItems for API \r\n */\r\nexport class AplItemDto {\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'map id'\r\n    })\r\n    @IsNumber()\r\n    mapId?: number;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'units'\r\n    })\r\n    @IsNotEmpty()\r\n    units?: string;\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'min value'\r\n    })\r\n    @IsNumber()\r\n    minVal?: number;\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'max value'\r\n    })\r\n    @IsNumber()\r\n    maxVal?: number;\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'threshold'\r\n    })\r\n    @IsNumber()\r\n    thresHold?: number;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'color'\r\n    })\r\n    @IsNotEmpty()\r\n    color?: string;\r\n    @IsBoolean()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Display option'\r\n    })\r\n    displayOption?: boolean;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'notification'\r\n    })\r\n    @IsNotEmpty()\r\n    notification?: string;\r\n    @Expose()\r\n    @ApiProperty()\r\n    @IsNotEmpty()\r\n    severity?: number;\r\n}","import { ApiProperty } from '@nestjs/swagger';\r\nimport { Expose } from 'class-transformer';\r\nimport { IsBoolean, IsNotEmpty, IsNumber, IsString } from 'class-validator';\r\nimport { ExtendDto } from './extend.dto';\r\n\r\n\r\n\r\n/**\r\n * This is AssetDto class\r\n * @ignore\r\n * Describes all the fields of AssetDto for API \r\n */\r\nexport class AssetDto extends ExtendDto {\r\n\r\n    /**\r\n     *Asset esn field . It is of string type\r\n     */\r\n    prototype?: any;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'asset esn'\r\n    })\r\n\r\n    /**\r\n     * Vehicle type . It stores string \r\n     */\r\n    @IsNotEmpty()\r\n    esn?: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'vehicle type'\r\n    })\r\n    /**\r\n     * Device type , store string \r\n     */\r\n    @IsNotEmpty()\r\n    vehicletype?: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'device type'\r\n    })\r\n    @IsNotEmpty()\r\n    deviceType?: string;\r\n\r\n    /**\r\n     * Country id, stores number type\r\n     */\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'country id'\r\n    })\r\n    @IsNumber()\r\n    countryId?: number;\r\n    @Expose()\r\n\r\n    /**\r\n     * Customer id , stores number \r\n     */\r\n    @ApiProperty({\r\n        description: 'customer id'\r\n    })\r\n    @IsNumber()\r\n    customerId?: number;\r\n    @IsString()\r\n    @Expose()\r\n    /**\r\n     * Alias, stores string \r\n     */\r\n    @ApiProperty({\r\n        description: 'alias'\r\n    })\r\n    @IsNotEmpty()\r\n    alias?: string;\r\n    @IsString()\r\n    @Expose()\r\n    /**\r\n     * Description stores string \r\n     */\r\n    @ApiProperty({\r\n        description: 'description'\r\n    })\r\n    description?: string;\r\n    @Expose()\r\n\r\n    /**\r\n     * Stores symbol stroke size \r\n     */\r\n    @ApiProperty({\r\n        description: 'Symbol stroke size'\r\n    })\r\n    @IsNumber()\r\n    symbolStrokeSize?: number;\r\n    @IsString()\r\n    @Expose()\r\n\r\n    /**\r\n     * Symbol stroke color \r\n     */\r\n    @ApiProperty({\r\n        description: 'symbol stroke color'\r\n    })\r\n    @IsNotEmpty()\r\n    symbolStrokeColor?: string;\r\n    @IsString()\r\n    @Expose()\r\n    /**\r\n     * Track color \r\n     */\r\n    @ApiProperty({\r\n        description: 'track color'\r\n    })\r\n    @IsNotEmpty()\r\n    trackColor?: string;\r\n    @IsString()\r\n    @Expose()\r\n    /**\r\n     * Symbol color\r\n     */\r\n    @ApiProperty({\r\n        description: 'symbol color'\r\n    })\r\n    @IsNotEmpty()\r\n    symbolColor?: string;\r\n    @IsString()\r\n    @Expose()\r\n    /**\r\n     * Name of asset \r\n     */\r\n    @ApiProperty({\r\n        description: 'name of asset'\r\n    })\r\n    @IsNotEmpty()\r\n    name?: string;\r\n    @Expose()\r\n    /**\r\n     * Symbol size \r\n     */\r\n    @ApiProperty({\r\n        description: 'Symbol size'\r\n    })\r\n    @IsNumber()\r\n    symbolSize?: number;\r\n    @Expose()\r\n\r\n    /**\r\n     * track width\r\n     */\r\n    @ApiProperty({\r\n        description: 'Track width'\r\n    })\r\n    @IsNumber()\r\n    trackwidth?: number;\r\n    @Expose()\r\n\r\n    /**\r\n     * Symbol stroke size\r\n     */\r\n    @ApiProperty({\r\n        description: 'Symbol stroke size'\r\n    })\r\n    @IsBoolean()\r\n    twoWayMessaging?: boolean;\r\n    @Expose()\r\n    /**\r\n     * Two way message max length \r\n     */\r\n    @ApiProperty({\r\n        description: 'two way message max length'\r\n    })\r\n    @IsNumber()\r\n    twoWayMessageMaxLength?: number;\r\n    @Expose()\r\n    /**\r\n     * Web link \r\n     */\r\n    @ApiProperty({\r\n        description: 'Web link'\r\n    })\r\n    @IsNotEmpty()\r\n    @IsString()\r\n    weblink?: string;\r\n    @IsString()\r\n    @Expose()\r\n    /**\r\n     * Asset serial number \r\n     */\r\n    @ApiProperty({\r\n        description: 'asset serial number'\r\n    })\r\n    @IsNotEmpty()\r\n    assetSerialNumber?: string;\r\n    @IsString()\r\n    @Expose()\r\n\r\n    /**\r\n     * Asset registration number \r\n     */\r\n    @ApiProperty({\r\n        description: 'asset registration number'\r\n    })\r\n    @IsNotEmpty()\r\n    assetRegistrationNumber?: string;\r\n    @IsString()\r\n    @Expose()\r\n    /**\r\n     * Asset make \r\n     */\r\n    @ApiProperty({\r\n        description: 'asset make'\r\n    })\r\n    @IsNotEmpty()\r\n    assetMake?: string;\r\n    @IsString()\r\n    @Expose()\r\n\r\n    /**\r\n     * Asset model\r\n     */\r\n    @ApiProperty({\r\n        description: 'asset model'\r\n    })\r\n    @IsNotEmpty()\r\n    assetModel?: string;\r\n    @IsString()\r\n    @Expose()\r\n\r\n    /**\r\n     * Asset color \r\n     */\r\n    @ApiProperty({\r\n        description: 'asset color'\r\n    })\r\n    @IsNotEmpty()\r\n    assetColor?: string;\r\n    @IsString()\r\n    @Expose()\r\n\r\n    /**\r\n     * Vehicle serial number\r\n     */\r\n    @ApiProperty({\r\n        description: 'vehicle serial number'\r\n    })\r\n    @IsNotEmpty()\r\n    vehicleSerialNumber?: string;\r\n    @IsString()\r\n    @Expose()\r\n    /**\r\n     * phone \r\n     */\r\n    @ApiProperty({\r\n        description: 'phone'\r\n    })\r\n    @IsNotEmpty()\r\n    phone?: string;\r\n    @Expose()\r\n    /**\r\n     * Device state \r\n     */\r\n    @ApiProperty({\r\n        description: 'device state'\r\n    })\r\n    @IsNumber()\r\n    deviceState?: number;\r\n\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Trip Start Event Id'\r\n    })\r\n    @IsString()\r\n    start_event_id?: string;\r\n\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Trip End Event Id'\r\n    })\r\n    @IsString()\r\n    end_event_id?: string;\r\n}","import { ApiProperty } from \"@nestjs/swagger\";\r\nimport { Expose } from \"class-transformer\";\r\nimport { IsBoolean, IsEmail, IsNotEmpty, IsOptional, IsString } from \"class-validator\";\r\nimport { string } from \"joi\";\r\nimport { CustomerType } from \"../../../enum/user.type.enum\";\r\nimport { ExtendDto } from \"./extend.dto\";\r\nimport { NewUserDto } from \"./newUser.dto\";\r\n\r\n\r\n/**\r\n * This is CustomerDto class\r\n * @ignore\r\n * Describes all the fields of CustomerDto for API \r\n */\r\n// export class CustomerDto extends ExtendDto {\r\n//     @IsString()\r\n//     @Expose()\r\n//     @ApiProperty({\r\n//         description: 'name'\r\n//     })\r\n//     @IsNotEmpty()\r\n//     name?: string;\r\n//     @IsString()\r\n//     @Expose()\r\n//     @ApiProperty({\r\n//         description: 'name'\r\n//     })\r\n//     @IsNotEmpty()\r\n//     email?: string;\r\n//     @IsString()\r\n//     @Expose()\r\n//     @ApiProperty({\r\n//         description: 'address'\r\n//     })\r\n//     @IsNotEmpty()\r\n//     address?: string;\r\n//     @IsString()\r\n//     @Expose()\r\n//     @ApiProperty({\r\n//         description: 'website'\r\n//     })\r\n//     @IsNotEmpty()\r\n//     website?: string;\r\n//     @IsString()\r\n//     @Expose()\r\n//     @ApiProperty({\r\n//         description: 'phone number'\r\n//     })\r\n//     @IsNotEmpty()\r\n//     phoneNumber?: string;\r\n\r\n//     //Customer type \r\n//     @Expose()\r\n//     @ApiProperty({\r\n//         description: 'customer type',\r\n//     })\r\n//     @IsNotEmpty()\r\n//     customerType?: CustomerType;\r\n\r\n//     @Expose()\r\n//     @ApiProperty({\r\n//         description: 'country code'\r\n//     })\r\n//     @IsNotEmpty()\r\n//     countryCode?: string;\r\n// }\r\n\r\n\r\n\r\nexport class CustomerDto {\r\n\r\n    @ApiProperty()\r\n    @IsNotEmpty()\r\n    @IsString()\r\n    name: string;\r\n  \r\n    @ApiProperty()\r\n    @IsOptional()\r\n    @IsString()\r\n    phone?: string;\r\n  \r\n    @ApiProperty()\r\n    @IsNotEmpty()\r\n    @IsString()\r\n    email: string;\r\n  \r\n    @ApiProperty()\r\n    @IsBoolean()\r\n    isAdmin: boolean;\r\n\r\n    @ApiProperty()\r\n    @IsNotEmpty()\r\n    @IsString()\r\n    city: string;\r\n\r\n    @ApiProperty()\r\n    @IsNotEmpty()\r\n    @IsString()\r\n    state: string;\r\n\r\n    @ApiProperty()\r\n    @IsNotEmpty()\r\n    @IsString()\r\n    country: string;\r\n\r\n    @ApiProperty()\r\n    @IsNotEmpty()\r\n    @IsString()\r\n    address: string;\r\n\r\n    @ApiProperty()\r\n    @IsNotEmpty()\r\n    @IsString()\r\n    preLogoText: string;\r\n\r\n    @ApiProperty()\r\n    @IsNotEmpty()\r\n    @IsString()\r\n    postLogoText: string;\r\n\r\n    @ApiProperty()\r\n    @IsNotEmpty()\r\n    @IsString()\r\n    logo_filename: string;\r\n  \r\n    @ApiProperty()\r\n    user?: NewUserDto;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//Trying new customer creation \r\nexport class NewCustomerDto  extends ExtendDto{\r\n\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'name'\r\n    })\r\n    @IsNotEmpty()\r\n    name?: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'contact'\r\n    })\r\n    @IsNotEmpty()\r\n    contact: string;\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'email'\r\n    })\r\n    @IsEmail()\r\n    @IsNotEmpty()\r\n    email: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'phone'\r\n    })\r\n    @IsNotEmpty()\r\n    phone: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'address'\r\n    })\r\n    @IsNotEmpty()\r\n    address: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'city'\r\n    })\r\n    @IsNotEmpty()\r\n    city: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'state'\r\n    })\r\n    @IsNotEmpty()\r\n    state: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'country'\r\n    })\r\n    @IsNotEmpty()\r\n    country: string;\r\n    @IsBoolean()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'isAdmin'\r\n    })\r\n    isAdmin?: boolean;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'firstname'\r\n    })\r\n    firstName?: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'lastname'\r\n    })\r\n    lastName?: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'password'\r\n    })\r\n    password?: string;\r\n    @IsEmail()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'email id'\r\n    })\r\n    emailId?: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'phone number'\r\n    })\r\n    phoneNumber?: string;\r\n  }\r\n  \r\n","import { ApiProperty } from \"@nestjs/swagger\";\r\nimport { Expose, Type } from \"class-transformer\";\r\nimport { IsDateString, IsDefined, IsNotEmpty, IsNotEmptyObject, IsNumber, IsObject, IsString, ValidateNested } from \"class-validator\";\r\nimport { PacketTypeEnum } from \"../../../enum/packet.type.enum\";\r\nimport { EventParamDetailDto } from \"./event.param.detail.dto\";\r\n\r\n\r\n/**\r\n * This is EventDetails class\r\n * \r\n * @ignore\r\n */\r\nexport class EventDetailDto {\r\n    /**\r\n    * Describes all the fields of EventDetails for API \r\n\r\n     */\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'esn'\r\n    })\r\n    @IsNotEmpty()\r\n    esn?: string;\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'packet type'\r\n    })\r\n    @IsNotEmpty()\r\n    packetType?: PacketTypeEnum;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'aircraft id'\r\n    })\r\n    @IsNotEmpty()\r\n    aircraftId?: string;\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'customer id'\r\n    })\r\n    @IsDateString()\r\n    scheduledDepartureTime?: Date;\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'gps latitude'\r\n    })\r\n    @IsNumber()\r\n    gpsLatitude?: number;\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'gps longitude'\r\n    })\r\n    @IsNumber()\r\n    gpsLongitude?: number;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'altitude'\r\n    })\r\n    @IsNotEmpty()\r\n    altitude?: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'speed'\r\n    })\r\n    @IsNotEmpty()\r\n    speed?: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'heading'\r\n    })\r\n    @IsNotEmpty()\r\n    heading?: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'start time'\r\n    })\r\n    @IsNotEmpty()\r\n    startTime?: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'end time'\r\n    })\r\n    @IsNotEmpty()\r\n    endTime?: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'stop time'\r\n    })\r\n    @IsNotEmpty()\r\n    stopTime?: string;\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'param count'\r\n    })\r\n    @IsNumber()\r\n    paramCount?: number;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'event id'\r\n    })\r\n    @IsNotEmpty()\r\n    eventId?: string;\r\n    @Expose()\r\n    @ApiProperty()\r\n    @Type(() => EventParamDetailDto)\r\n    @IsDefined()\r\n    @IsNotEmptyObject()\r\n    @IsObject()\r\n    @ValidateNested()\r\n    eventParamDetails: Array<EventParamDetailDto>;\r\n}","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { ApiProperty } from \"@nestjsx/crud/lib/crud\";\r\nimport { Expose } from \"class-transformer\";\r\nimport { IsNotEmpty, IsOptional, IsString } from \"class-validator\";\r\nimport { ConfirmEnum } from \"../../../enum/ConfirmEnum\";\r\nimport { NotifyEnum } from \"../../../enum/notify.enum\";\r\nimport { ExtendDto } from \"./extend.dto\";\r\n\r\n\r\n/**\r\n * This is EventNotificationDto class\r\n * @ignore\r\n */\r\nexport class EventNotificationDto {\r\n    @ApiProperty({})\r\n    @Expose()\r\n    id?: number;\r\n}\r\n\r\n/**\r\n * This is EventAssetDto class\r\n * @ignore\r\n */\r\nexport class EventAssetDto {\r\n    @ApiProperty({})\r\n    @Expose()\r\n    id?: number;\r\n}\r\n\r\n/**\r\n * This is EventNotificationMainDto class\r\n * @ignore\r\n */\r\nexport class EventNotificationMainDto extends ExtendDto {\r\n    @Expose()\r\n    id?: number;\r\n\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'The name of event notification'\r\n    })\r\n    @IsNotEmpty()\r\n    name?: string;\r\n\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Is active'\r\n    })\r\n    active?: boolean;\r\n\r\n    @Expose()\r\n    @ApiProperty({ type: () => EventAssetDto, isArray: true })\r\n    @IsOptional()\r\n    vehicles?: EventAssetDto[];\r\n\r\n    @Expose()\r\n    @ApiProperty({ type: () => EventNotificationDto, isArray: true })\r\n    @IsOptional()\r\n    notifications?: EventNotificationDto[];\r\n\r\n    @Expose()\r\n    @ApiProperty({\r\n        enum: ConfirmEnum,\r\n        isArray: false\r\n    })\r\n    @IsNotEmpty()\r\n    notifyEmail?: ConfirmEnum;\r\n\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Description'\r\n    })\r\n    description?: string;\r\n\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Customer ID'\r\n    })\r\n    customerId?: number;\r\n\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'The name of event'\r\n    })\r\n    @IsNotEmpty()\r\n    eventName?: string;\r\n\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Event ID'\r\n    })\r\n    @IsNotEmpty()\r\n    eventId?: string;\r\n\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'customer name'\r\n    })\r\n    @IsNotEmpty()\r\n    customerName?: string;\r\n}\r\n","import { ApiProperty } from \"@nestjs/swagger\";\r\nimport { Expose } from \"class-transformer\";\r\nimport { IsNotEmpty, IsNumber, IsString } from \"class-validator\";\r\nimport { PacketTypeEnum } from \"../../../enum/packet.type.enum\";\r\n\r\n\r\n/**\r\n * This is EventParam class\r\n * \r\n * Describes all the fields of EventParam for API \r\n * \r\n * @ignore\r\n */\r\nexport class EventParamDetailDto {\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'id'\r\n    })\r\n    @IsNumber()\r\n    id?: number;\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'map id'\r\n    })\r\n    @IsNumber()\r\n    paramId?: number;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'units'\r\n    })\r\n    @IsNotEmpty()\r\n    paramValue?: string;\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'packet type'\r\n    })\r\n    @IsNotEmpty()\r\n    packetType?: PacketTypeEnum;\r\n}","import { ApiProperty } from \"@nestjsx/crud/lib/crud\";\r\nimport { Expose } from \"class-transformer\";\r\nimport { IsNotEmpty, IsString } from \"class-validator\";\r\nimport { StatusEnum } from \"../../../enum/status.enum\";\r\n\r\n\r\n\r\n/**\r\n * This is ExtendDto class\r\n * \r\n * Describes all the fields of ExtendedDto\r\n * \r\n * @ignore\r\n */\r\nexport class ExtendDto {\r\n    @Expose()\r\n    id?: number;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'created by'\r\n    })\r\n    @IsNotEmpty()\r\n    createdBy?: string;\r\n    @Expose()\r\n    createdAt?: Date;\r\n    @Expose()\r\n    updatedAt?: Date;\r\n    @Expose()\r\n    status?: StatusEnum;\r\n}","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { ApiProperty } from \"@nestjsx/crud/lib/crud\";\r\nimport { Expose } from \"class-transformer\";\r\nimport { IsNotEmpty, IsOptional, IsString } from \"class-validator\";\r\nimport { ConfirmEnum } from \"../../../enum/ConfirmEnum\";\r\nimport { EventSeverityEnum } from \"../../../enum/event.severity.enum\";\r\nimport { NotifyEnum } from \"../../../enum/notify.enum\";\r\nimport { ExtendDto } from \"./extend.dto\";\r\n\r\n\r\n/**\r\n * This is geofenceNotificationDto class\r\n * @ignore\r\n * @param {number} id \r\n */\r\nexport class GeofenceNotificationDto  {\r\n    @ApiProperty({})\r\n    @Expose()\r\n    id?: number;\r\n}\r\n/**\r\n * This is GeofenceAsset class\r\n * @ignore\r\n * Describes all the fields of GeofenceAsset for api\r\n *  @param {number} id\r\n */\r\nexport class GeofenceAssetDto {\r\n    @ApiProperty({})\r\n    @Expose()\r\n    id?: number;\r\n}\r\n\r\n/**\r\n * This is GeofenceDto class\r\n * \r\n * @ignore\r\n */\r\nexport class GeofenceDto extends ExtendDto {\r\n\r\n    /**\r\n     * @param {number} id\r\n     */\r\n    @Expose()\r\n    id?: number;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'The name of geofence'\r\n    })\r\n    /**\r\n     * @param {string}name \r\n     */\r\n    @IsNotEmpty()\r\n    name?: string;\r\n    @Expose()\r\n    @ApiProperty({\r\n        enum: NotifyEnum,\r\n        isArray: false\r\n    })\r\n    /**\r\n     * @param\r\n     */\r\n    @IsNotEmpty()\r\n    notify?:NotifyEnum;\r\n    @Expose()\r\n    @ApiProperty({ type: () => GeofenceAssetDto, isArray: true })\r\n    @IsOptional()\r\n    /**\r\n     * Vehicles stored in array \r\n     */\r\n    vehicles?: Array<GeofenceAssetDto>;\r\n    @Expose()\r\n    @ApiProperty({})\r\n    @IsNotEmpty()\r\n    /**\r\n     * Layer id \r\n     */\r\n    layerId?: number;\r\n    @Expose()\r\n    @ApiProperty({})\r\n    @IsNotEmpty()\r\n    /**\r\n     * Landmark id \r\n     */\r\n    landmarkId?: number;\r\n    @Expose()\r\n    @ApiProperty({ type: () => GeofenceNotificationDto, isArray: true })\r\n    @IsOptional()\r\n    /**\r\n     * Nofitication in array \r\n     */\r\n    notifications?: Array<GeofenceNotificationDto>;\r\n    @Expose()\r\n    @ApiProperty({\r\n        enum: ConfirmEnum,\r\n        isArray: false\r\n    })\r\n    @IsNotEmpty()\r\n    /**\r\n     * NotifyMap \r\n     */\r\n    notifyMap?: ConfirmEnum;\r\n    @Expose()\r\n    @ApiProperty({\r\n        enum: ConfirmEnum,\r\n        isArray: false\r\n    })\r\n    /**\r\n     * Notifyemail\r\n     */\r\n    @IsNotEmpty()\r\n    notifyEmail?: ConfirmEnum;\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Description'\r\n    })\r\n    /**\r\n     * Description \r\n     */\r\n    description?: string;\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Min Altitude'\r\n    })\r\n    /**\r\n     * Altitude minimum\r\n     */\r\n    minAltitude?: number;\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Max Altitude'\r\n    })\r\n\r\n    /**\r\n     * Max Altitude \r\n     */\r\n    maxAltitude?: number;\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Min Velocity'\r\n    })\r\n\r\n    /**\r\n     * Min Velocity \r\n     */\r\n    minVelocity?: number;\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Max Altitude'\r\n    })\r\n    /**\r\n     * Max Velocity \r\n     */\r\n    maxVelocity?: number;\r\n    @Expose()\r\n    @ApiProperty({\r\n        enum: EventSeverityEnum,\r\n        isArray: false\r\n    })\r\n    @IsNotEmpty()\r\n    /**\r\n     * Event severity found from enum \r\n     */\r\n    eventSeverity?:EventSeverityEnum;\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Schedule Start Time'\r\n    })\r\n    /**\r\n     * Schedule start time \r\n     */\r\n    scheduleStartTime?: string;\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Schedule End Time'\r\n    })\r\n    /**\r\n     * Schedule end time \r\n     */\r\n    scheduleEndTime?: string;\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Customer ID'\r\n    })\r\n    /**\r\n     * Customer id \r\n     */\r\n    customerId?: number;\r\n    @Expose()\r\n    @ApiProperty({})\r\n    /**\r\n     * Days in array \r\n     */\r\n    days?: Array<any>;\r\n\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Buffer Distance'\r\n    })\r\n    /**\r\n     * Buffer distance \r\n     */\r\n    bufferDistance?: number = 0;\r\n     \r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Aircraft'\r\n    })\r\n    aircraft:string;\r\n}","import { ApiProperty } from \"@nestjs/swagger\";\r\nimport { Expose } from \"class-transformer\";\r\nimport { IsNotEmpty, IsString } from \"class-validator\";\r\n\r\n\r\n/**\r\n * This is GroupDto class\r\n * \r\n * Describes all the fields of GroupDto for API \r\n * @ignore\r\n */\r\nexport class GroupDto {\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'username'\r\n    })\r\n    @IsNotEmpty()\r\n    name?: string;\r\n}","import { ApiProperty } from '@nestjs/swagger';\r\nimport { Expose } from 'class-transformer';\r\nimport { IsString } from 'class-validator';\r\n\r\n\r\n/**\r\n * This is LandmarkCreate class\r\n * \r\n * Describes all the fields of LandmarkCreate for API \r\n * \r\n * @ignore\r\n */\r\nexport class LandmarkCreateDto {\r\n    @Expose()\r\n    id?: number;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'The name of layer'\r\n    })\r\n    name?: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty()\r\n    createdBy?: string;\r\n    @Expose()\r\n    createdAt?: Date;\r\n    @Expose()\r\n    updatedAt?: Date;\r\n    @Expose()\r\n    @ApiProperty()\r\n    layerId?: number;\r\n    @Expose()\r\n    @ApiProperty()\r\n    geojsonobject?: unknown;\r\n    @Expose()\r\n    @ApiProperty()\r\n    locationType?: string;\r\n}","import { ApiProperty } from '@nestjs/swagger';\r\nimport { Expose } from 'class-transformer';\r\nimport { IsString, IsInt } from 'class-validator';\r\n\r\n\r\n/**\r\n * This is CreateLayer class\r\n * @ignore\r\n * Describes all the fields of LayerCreate for API \r\n */\r\nexport class LayerCreateDto {\r\n    @Expose()\r\n    id?: number;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'The name of layer'\r\n    })\r\n    name?: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Address for a layer'\r\n    })\r\n    address?: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty()\r\n    city?: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty()\r\n    country?: string;\r\n    @IsInt()\r\n    @Expose()\r\n    @ApiProperty()\r\n    zip?: number;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty()\r\n    state?: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty()\r\n    createdBy?: string;\r\n    @Expose()\r\n    createdAt?: Date;\r\n    @Expose()\r\n    updatedAt?: Date;\r\n}","import { ApiProperty } from '@nestjs/swagger';\r\nimport { IsOptional } from 'class-validator';\r\nimport {CustomerType, UserTypeEnum } from '../../../enum/user.type.enum';\r\nimport { ExtendDto } from './extend.dto';\r\n\r\nexport class NewUserDto extends ExtendDto {\r\n  @ApiProperty()\r\n  accountType?: UserTypeEnum;\r\n\r\n  @ApiProperty()\r\n  userType?:CustomerType\r\n\r\n\r\n  @ApiProperty()\r\n  active: boolean;\r\n\r\n  @ApiProperty()\r\n  canChangePassword: boolean;\r\n\r\n  @ApiProperty()\r\n  @IsOptional()\r\n  createdBy?: string;\r\n\r\n  @ApiProperty()\r\n  customerId?: number;\r\n\r\n  @ApiProperty()\r\n  email_id?: string;\r\n\r\n  @ApiProperty()\r\n  expires_on?: string;\r\n\r\n  @ApiProperty()\r\n  firstname?: string;\r\n\r\n  @ApiProperty()\r\n  lastname?: string;\r\n\r\n  @ApiProperty()\r\n  login_id?: string;\r\n\r\n  @ApiProperty()\r\n  neverExpire?: boolean;\r\n\r\n  @ApiProperty()\r\n  password?: string;\r\n\r\n  @ApiProperty()\r\n  phone_no?: string;\r\n\r\n  @ApiProperty()\r\n  username?: string;\r\n}\r\n","import { ApiProperty } from '@nestjs/swagger';\r\nimport { ValidateNested } from 'class-validator';\r\n\r\n/**\r\n * This is NewLayerCreate class\r\n * \r\n * Describes all the fields of new layer for API \r\n * \r\n * @ignore\r\n */\r\n\r\nexport class ProductDataDto {\r\n    @ApiProperty({ description: 'Id of the product data' })\r\n    product_id: string;\r\n  \r\n    @ApiProperty({ description: 'Name of the product data' })\r\n    product_name: string;\r\n  }\r\n  \r\n\r\nexport class LayerDataDto {\r\n  @ApiProperty({ description: 'Id of the layer data' })\r\n  id: number;\r\n\r\n  @ApiProperty({ description: 'Value of the layer data' })\r\n  value: string;\r\n\r\n  @ValidateNested({each:true})\r\n  @ApiProperty({\r\n    type: ProductDataDto,\r\n    isArray: true,\r\n    description: 'Array of product data',\r\n  })\r\n  data?: ProductDataDto[];\r\n  \r\n}\r\n\r\n\r\n\r\n//For new service\r\n// export class LayerDataDto {\r\n//   @ApiProperty({ description: 'Id of the layer data' })\r\n//   id: number;\r\n\r\n//   @ApiProperty({ description: 'Value of the layer data' })\r\n//   value: string;\r\n\r\n//   @ApiProperty({\r\n//     type: ProductDataDto,\r\n//     isArray: true,\r\n//     description: 'Array of product data',\r\n//   })\r\n//   data?: never;\r\n  \r\n//   @ApiProperty({\r\n//     type: ProductDataDto,\r\n//     isArray: false,\r\n//     description: 'Product data',\r\n//   })\r\n//   productData?: ProductDataDto;\r\n// }\r\n\r\n\r\n\r\nexport class NLayerDto {\r\n  @ApiProperty({ description: 'Id of the layer' })\r\n  id: number;\r\n\r\n  @ApiProperty({ description: 'Category of the layer' })\r\n  category: string;\r\n\r\n  @ApiProperty({\r\n    type: 'boolean',\r\n    description: 'Flag indicating if the layer has a subcategory',\r\n  })\r\n  has_subcategory: boolean;\r\n\r\n  @ApiProperty({\r\n    type: LayerDataDto,\r\n    isArray: true,\r\n    description: 'Array of layer data',\r\n  })\r\n  data: LayerDataDto[];\r\n}\r\n\r\n\r\n\r\n//For new service\r\n// export class NLayerDto {\r\n//   @ApiProperty({ description: 'Id of the layer' })\r\n//   id: number;\r\n\r\n//   @ApiProperty({ description: 'Category of the layer' })\r\n//   category: string;\r\n\r\n//   @ApiProperty({\r\n//     type: 'boolean',\r\n//     description: 'Flag indicating if the layer has a subcategory',\r\n//   })\r\n//   has_subcategory: boolean;\r\n\r\n//   @ApiProperty({\r\n//     type: LayerDataDto,\r\n//     isArray: true,\r\n//     description: 'Array of layer data',\r\n//   })\r\n//   data: LayerDataDto[] | ProductDataDto[];\r\n// }\r\n","import { ApiProperty } from '@nestjs/swagger';\r\nimport { Expose, Type } from 'class-transformer';\r\nimport { IsNotEmpty, IsOptional, IsString } from 'class-validator';\r\nimport { NotificationTypeEnum } from '../../../enum/notification.type.enum';\r\nimport { ExtendDto } from './extend.dto';\r\nimport { NotificationTemplateDto } from './notification.template.dto';\r\n\r\n\r\n/**\r\n * This is NotificationEmailDto class\r\n * \r\n * Describes all the fields of NotificationEmailDto for API \r\n * \r\n * @ignore\r\n */\r\nexport class NotificationEmailDto  {\r\n    @Expose()\r\n    @ApiProperty({})\r\n    email?: string;\r\n}\r\n/**\r\n * This is NotificationUserDto class\r\n * \r\n * Describes all the fields of NotificationUserDto for API \r\n * @param {number}id\r\n * @ignore\r\n */\r\nexport class NotificationUserDto {\r\n    @ApiProperty({})\r\n    @Expose()\r\n    id?: number;\r\n}\r\n/**\r\n * This is NotificationDto class\r\n * \r\n * @ignore\r\n */\r\nexport class NotificationDto extends ExtendDto {\r\n\r\n    /**\r\n     * Describes all the fields of NotificationDto for API \r\n     */\r\n    @Expose()\r\n    id?: number;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'The name of notification'\r\n    })\r\n    @IsNotEmpty()\r\n    name?: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Timezone for notification'\r\n    })\r\n    @IsNotEmpty()\r\n    timezone?: string;\r\n    @Expose()\r\n    @ApiProperty({\r\n        enum: NotificationTypeEnum,\r\n        isArray: false\r\n    })\r\n    @IsNotEmpty()\r\n    type?: NotificationTypeEnum;\r\n    @Expose()\r\n    @ApiProperty()\r\n    @IsNotEmpty()\r\n    customerId?: number;\r\n    @Expose()\r\n    @ApiProperty()\r\n    @IsNotEmpty()\r\n    emailTemplateId?: number;\r\n    @Expose()\r\n    @ApiProperty()\r\n    @IsNotEmpty()\r\n    smsTemplateId?: number;\r\n    @Expose()\r\n    @ApiProperty({ type: () => NotificationEmailDto, isArray: true })\r\n    @IsOptional()\r\n    emails: Array<NotificationEmailDto>;\r\n    @Expose()\r\n    @ApiProperty({ type: () => NotificationUserDto, isArray: true })\r\n    @IsOptional()\r\n    users: Array<NotificationUserDto>;\r\n    @Expose()\r\n    @ApiProperty()\r\n    @IsNotEmpty()\r\n    createdBy?: string;\r\n    @Expose()\r\n    createdAt?: Date;\r\n    @Expose()\r\n    updatedAt?: Date;\r\n    @Expose()\r\n    updatedBy?: string;\r\n    @Expose()\r\n    @Type(() => NotificationTemplateDto)\r\n    emailTemplate?: NotificationTemplateDto;\r\n    @Expose()\r\n    @Type(() => NotificationTemplateDto)\r\n    smsTemplate?: NotificationTemplateDto;\r\n}","import { ApiProperty } from '@nestjs/swagger';\r\nimport { Expose } from 'class-transformer';\r\nimport { IsNotEmpty, IsString } from 'class-validator';\r\n\r\n\r\n/**\r\n * This is NotificationTemplateDto class\r\n * \r\n * Describes all the fields of Notification Template for API \r\n * @ignore\r\n */\r\nexport class NotificationTemplateDto {\r\n    @Expose()\r\n    id?: number;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'The name of template'\r\n    })\r\n    @IsNotEmpty()\r\n    name?: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Subject for a template'\r\n    })\r\n    @IsNotEmpty()\r\n    subject?: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty()\r\n    @IsNotEmpty()\r\n    body?: string;@IsString()\r\n    @Expose()\r\n    @ApiProperty()\r\n    @IsNotEmpty()\r\n    createdBy?: string;\r\n    @Expose()\r\n    createdAt?: Date;\r\n    @Expose()\r\n    updatedAt?: Date;\r\n    @Expose()\r\n    updatedBy?: string;\r\n}","import { ApiProperty } from '@nestjs/swagger';\r\nimport { Expose } from 'class-transformer';\r\nimport { IsArray, IsNotEmpty, IsNumber, IsString } from 'class-validator';\r\n\r\n\r\nexport class ReportNotificationDto {\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Created By'\r\n    })\r\n    @IsNotEmpty()\r\n    createdBy: string;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Customer Name'\r\n    })\r\n    @IsNotEmpty()\r\n    customerName: string;\r\n\r\n    @IsNumber()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Customer Id'\r\n    })\r\n    @IsNotEmpty()\r\n    customerId: number;\r\n\r\n    @IsArray()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'Notifications Ids'\r\n    })\r\n    @IsNotEmpty()\r\n     notifications: Array<{ id: number }>;\r\n    @IsString()\r\n    @Expose()\r\n    @ApiProperty({\r\n        description: 'The report name'\r\n    })\r\n    @IsNotEmpty()\r\n    report: string;\r\n  }","import { IsBoolean, IsString } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { CustomerType } from '../../../enum/user.type.enum';\r\n\r\nexport class UpdateUserDto {\r\n  @ApiProperty({ example: 'newFirstName' })\r\n  @IsString()\r\n  firstname?: string;\r\n\r\n  @ApiProperty({ example: 'newLastName' })\r\n  @IsString()\r\n  lastname?: string;\r\n\r\n  @ApiProperty({ example: 'newEmail@email.com' })\r\n  @IsString()\r\n  email_id?: string;\r\n\r\n  @ApiProperty({ example: 'newPhoneNo' })\r\n  @IsString()\r\n  phone_no?: string;\r\n\r\n  @ApiProperty({ example: true })\r\n  @IsBoolean()\r\n  active?: boolean;\r\n\r\n\r\n  @ApiProperty({example: CustomerType})\r\n  userType?: CustomerType\r\n}\r\n","import { Column, Entity, OneToMany } from 'typeorm';\r\nimport { AplItemEntity } from './apl.item.entity';\r\nimport { ExtendEntity } from './extend.entity';\r\n\r\n/**\r\n * This is apl entity \r\n * Contains apl fields , Creates  apl table im database with respective fields\r\n */\r\n\r\n@Entity({name: \"apl\"})\r\nexport class AplEntity extends ExtendEntity {\r\n    @Column({nullable: true, length: 128})\r\n    esn?: string;\r\n    @Column({nullable: true})\r\n    customerId?: number;\r\n    @Column({nullable: true, length: 128})\r\n    version?: string;\r\n    @OneToMany(() => AplItemEntity, (item) => item.apl)\r\n    aplItems: AplItemEntity[]    \r\n}","import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\r\nimport { AplEntity } from './apl.entity';\r\nimport { ExtendEntity } from './extend.entity';\r\n\r\n/**\r\n * This is apl_items entity\r\n * Contains apl_items fields \r\n */\r\n\r\n@Entity({name: \"apl_items\"})\r\nexport class AplItemEntity extends ExtendEntity {\r\n    @Column({nullable: true})\r\n    mplId?: number;\r\n    @Column({nullable: true})\r\n    units?: string;\r\n    @Column({nullable: true})\r\n    minVal?: number;\r\n    @Column({nullable: true})\r\n    maxVal?: number;\r\n    @Column({nullable: true})\r\n    thresHold?: number;\r\n    @Column({nullable: true})\r\n    color?: string;\r\n    @Column({nullable: true})\r\n    displayOption?: boolean;\r\n    @Column({nullable: true})\r\n    notification?: string;\r\n    @Column({nullable: true})\r\n    severity?: number;\r\n    @ManyToOne(() => AplEntity, (apl) => apl.aplItems , {eager: false, cascade: ['insert', 'update', 'remove'], nullable: false})\r\n    @JoinColumn({name: \"apl_id\"})\r\n    apl?: AplEntity;\r\n}","import { Column, Entity } from 'typeorm';\r\nimport { ExtendEntity } from './extend.entity';\r\n\r\n/**\r\n * This is asset entity\r\n * Contains asset fields . Creates asset table in database with respective fields\r\n */\r\n\r\n@Entity({ name: \"asset\" })\r\nexport class AssetEntity extends ExtendEntity {\r\n    @Column({ length: 100, nullable: false })\r\n    esn?: string;\r\n    @Column({nullable: true})\r\n    vehicletype?: string;\r\n    @Column({nullable: true})\r\n    deviceType?: string;\r\n    @Column({nullable: true})\r\n    countryId?: number;\r\n    @Column({nullable: false})\r\n    customerId?: number;\r\n    @Column({nullable: true})\r\n    alias?: string;\r\n    @Column({nullable: true})\r\n    description?: string;\r\n    @Column({nullable: true})\r\n    symbolStrokeSize?: number;\r\n    @Column({nullable: true})\r\n    symbolStrokeColor?: string;\r\n    @Column({nullable: true})\r\n    trackColor?: string;\r\n    @Column({nullable: true})\r\n    symbolColor?: string;\r\n    @Column({nullable: false})\r\n    name?: string;\r\n    @Column(\"decimal\", { precision: 6, scale: 2 })\r\n    symbolSize?: number;\r\n    @Column(\"decimal\", { precision: 6, scale: 2 })\r\n    trackwidth?: number;\r\n    @Column({nullable: true})\r\n    twoWayMessaging?: boolean;\r\n    @Column({nullable: true})\r\n    twoWayMessageMaxLength?: number;\r\n    @Column({nullable: true})\r\n    weblink?: string;\r\n    @Column({nullable: true})\r\n    assetSerialNumber?: string;\r\n    @Column({nullable: true})\r\n    assetRegistrationNumber?: string;\r\n    @Column({nullable: true})\r\n    assetMake?: string;\r\n    @Column({nullable: true})\r\n    assetModel?: string;\r\n    @Column({nullable: true})\r\n    assetColor?: string;\r\n    @Column({nullable: true})\r\n    vehicleSerialNumber?: string;\r\n    @Column({nullable: true})\r\n    phone?: string;\r\n    @Column({nullable: true})\r\n    deviceState?: number;\r\n    @Column({nullable: true})\r\n    start_event_id?: string;\r\n    @Column({nullable: true})\r\n    end_event_id?: string;\r\n}","import { Column, Entity, JoinColumn, ManyToOne, OneToOne, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { CustomerType } from '../../../enum/user.type.enum';\r\nimport { ExtendEntity } from './extend.entity';\r\nimport { UserEntity } from './user.entity';\r\n\r\n/**\r\n * This is customer entity\r\n * Contains customer fields, Create customer in database \r\n */\r\n\r\n// @Entity({name: \"customers\"})\r\n// export class CustomerEntity extends ExtendEntity {\r\n//     @Column({length: 100, nullable: false})\r\n//     name?: string;\r\n//     email?: string;\r\n//     address?: string;\r\n//     website?: string;\r\n//     phoneNumber?: string;\r\n//     customerType:CustomerType;\r\n//     countryCode?: string;\r\n\r\n    \r\n//   @Column({ default: false })\r\n//   administrator: boolean;\r\n\r\n//   @ManyToOne(() => UserEntity, (user) => user.customerId)\r\n//   user: UserEntity;\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n@Entity({name:\"new_customer\"})\r\nexport class CustomerEntity {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column({ length: 100, nullable: false })\r\n  name: string;\r\n\r\n  @Column({ nullable: false })\r\n  phone: string;\r\n\r\n  @Column({ nullable: false })\r\n  email: string;\r\n\r\n  @Column({ nullable: true })\r\n  city: string;\r\n\r\n  @Column({ nullable: true })\r\n  state: string;\r\n\r\n  @Column({ nullable: true })\r\n  country: string;\r\n\r\n  @Column({ nullable: true })\r\n  address: string;\r\n\r\n  @Column({ nullable: true })\r\n  preLogoText: string;\r\n\r\n  @Column({ nullable: true })\r\n  postLogoText: string;\r\n\r\n  @Column({ nullable: true })\r\n  logo_filename: string;\r\n\r\n  @Column({ default: false })\r\n  isAdmin: boolean;\r\n\r\n  @Column({ nullable: true })\r\n  userId: number;\r\n\r\n\r\n\r\n  @OneToOne(() => UserEntity, { cascade: true, onDelete: 'CASCADE' })\r\n  @JoinColumn()\r\n  user: UserEntity;\r\n}\r\n\r\n","\r\nimport { Column, CreateDateColumn, Entity, JoinColumn, ManyToOne, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\r\nimport { EventBasedNotificationEntity } from './event.based.notification.entity';\r\n/**\r\n * This is geofence_assets entity\r\n * Contains geofence_assets fields \r\n */\r\n\r\n\r\n@Entity({ name: \"event_assets\" })\r\nexport class EventAssetEntity {\r\n    @PrimaryGeneratedColumn()\r\n    id?: number;\r\n    @CreateDateColumn({name: \"created_at\"})\r\n    createdAt?: Date;\r\n    @UpdateDateColumn({name: \"updated_at\"})\r\n    updatedAt?: Date;\r\n\r\n    @ManyToOne(() => EventBasedNotificationEntity, map => map.vehicles)\r\n    @JoinColumn({name: \"event_id\"})\r\n    asset?: EventBasedNotificationEntity;\r\n\r\n    @Column({name: 'asset_id'})\r\n    assetId?: number;\r\n    \r\n}","import { Column, Entity, OneToMany } from 'typeorm';\r\nimport { ExtendEntity } from './extend.entity';\r\nimport { EventAssetEntity } from './event.asset.entity';\r\nimport { EventNotificationEntity } from './event.notification.entity';\r\n\r\n\r\n/**\r\n * This is Event entity\r\n * Contains Event fields creates new entry in database\r\n */\r\n\r\n@Entity({name: \"event_based_notification\"})\r\nexport class EventBasedNotificationEntity extends ExtendEntity {\r\n    @Column({length: 100, nullable: false})\r\n    name?: string;\r\n    @Column({name: 'notify_email', length: 3})\r\n    notifyEmail?: string = \"Yes\";\r\n    @Column({name: 'description'})\r\n    description?: string;\r\n    @Column({nullable: false, name: 'customer_id'})\r\n    customerId?: number;\r\n    @Column({nullable:false,name:'customer_name', default:\"\"})\r\n    customerName?:string;\r\n    @Column({name: 'eventid', default:\"\"})\r\n    eventId?: string;\r\n    @Column({name: 'eventname', default:\"\"})\r\n    eventName?:string;\r\n\r\n    @Column({ name: 'asset_id',type:'integer', nullable: true })\r\n    assetIds?: number;\r\n  \r\n    @Column({ name: 'notification_id', type:'integer',nullable: true })\r\n    notificationsId?: number;\r\n    \r\n    @OneToMany('EventAssetEntity', 'asset', { eager: true, cascade: true })\r\n    vehicles?: EventAssetEntity[];\r\n\r\n    @OneToMany('EventNotificationEntity', 'notification', {onDelete: 'CASCADE', eager: true, cascade: true })\r\n    notifications?: EventNotificationEntity[];\r\n    \r\n}","import { Column, Entity, OneToMany } from 'typeorm';\r\nimport { PacketTypeEnum } from '../../../enum/packet.type.enum';\r\nimport { EventParamDetailsEntity } from './event.param.details.entity';\r\nimport { ExtendEntity } from './extend.entity';\r\n\r\n\r\n/**\r\n * This is event_details entity\r\n * Contains event_details fields \r\n */\r\n\r\n@Entity({name: \"event_details\"})\r\nexport class EventDetailsEntity extends ExtendEntity {\r\n    @Column({length: 100, nullable: false})\r\n    name?: string;\r\n    @Column({ type: \"enum\", enum: PacketTypeEnum, default: PacketTypeEnum.A })\r\n    packetType?: PacketTypeEnum;\r\n    aircraftId?: string;\r\n    @Column({ type: 'timestamp', nullable: true })\r\n    scheduledDepartureTime?: Date;\r\n    @Column(\"decimal\", { precision: 6, scale: 2 })\r\n    gpsLatitude?: number;\r\n    @Column(\"decimal\", { precision: 6, scale: 2 })\r\n    gpsLongitude?: number;\r\n    altitude?: string;\r\n    speed?: string;\r\n    heading?: string;\r\n    startTime?: string;\r\n    stopTime?: string;\r\n    paramCount?: number;\r\n    eventId?: string;\r\n    @OneToMany('EventParamDetailsEntity', 'eventDetails', { onDelete: 'CASCADE' })\r\n    eventParamDetails: EventParamDetailsEntity[]    \r\n}","\r\n\r\n\r\nimport { Column, CreateDateColumn, Entity, JoinColumn, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\r\n import { EventBasedNotificationEntity } from './event.based.notification.entity';\r\n\r\n\r\n/**\r\n * This is Geofence Notification entity\r\n * Contains Geofence Notification field creates new geofence Notification\r\n */\r\n\r\n@Entity({ name: \"events_notifications_list\" })\r\nexport class EventNotificationEntity {\r\n    @PrimaryGeneratedColumn()\r\n    id?: number;\r\n    @CreateDateColumn({name: \"created_at\"})\r\n    createdAt?: Date;\r\n    @UpdateDateColumn({name: \"updated_at\"})\r\n    updatedAt?: Date;\r\n\r\n    @ManyToOne(() => EventBasedNotificationEntity, map => map.notifications, {onDelete: 'CASCADE'})\r\n    @JoinColumn({name: \"event_id\"})\r\n    notification?: EventBasedNotificationEntity;\r\n\r\n    \r\n    @Column({name: 'notification_id'})\r\n    notificationId?: number;\r\n}","import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\r\nimport { PacketTypeEnum } from '../../../enum/packet.type.enum';\r\nimport { EventDetailsEntity } from './event.details.entity';\r\nimport { ExtendEntity } from './extend.entity';\r\n\r\n\r\n/**\r\n * This is event_param_details entity\r\n * Contains event_param fields \r\n */\r\n\r\n@Entity({name: \"event_param_details\"})\r\nexport class EventParamDetailsEntity extends ExtendEntity {\r\n    @Column({ type: \"enum\", enum: PacketTypeEnum, default: PacketTypeEnum.A })\r\n    packetType?: PacketTypeEnum;\r\n    paramId?: number;\r\n    paramValue?: string;\r\n    @ManyToOne(() => EventDetailsEntity, (event) => event.eventParamDetails , {nullable: false, eager: false, cascade: ['insert', 'update', 'remove']})\r\n    @JoinColumn({name: \"event_id\"})\r\n    eventDetails?: EventParamDetailsEntity;\r\n}","import { BaseEntity, Column, CreateDateColumn, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\r\nimport { StatusEnum } from \"../../../enum/status.enum\";\r\n\r\n\r\n/**\r\n * This is Extended  entity\r\n * Contains Extended fields . It supports other entities\r\n * \r\n * @ignore\r\n */\r\n\r\nexport class ExtendEntity extends BaseEntity {\r\n    @PrimaryGeneratedColumn()\r\n    id?: number;\r\n    @CreateDateColumn({name: \"created_at\"})\r\n    createdAt?: Date;\r\n    @UpdateDateColumn({name: \"updated_at\"})\r\n    updatedAt?: Date;\r\n    @Column({ type: \"enum\", enum: StatusEnum, default: StatusEnum.ACTIVE })\r\n    status?: StatusEnum;\r\n    @Column({ length: 64 , name: \"created_by\", nullable:true})\r\n    createdBy?: string;\r\n    @Column({ length: 64, nullable: true, name: \"updated_by\"})\r\n    updatedBy?: string;\r\n}","import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\r\nimport { ExtendEntity } from './extend.entity';\r\nimport { FlighPlanEntity } from './flight.plan.entity';\r\n\r\n\r\n/**\r\n * This is FlightLocation entity\r\n * Contains FlightLocation fields.  Creates new flight in database. \r\n */\r\n\r\n@Entity({name: \"fligh_location\"})\r\nexport class FlighLocationEntity extends ExtendEntity {\r\n    sequence?: number;\r\n    type?: string;\r\n    legTime?: number;\r\n    @Column(\"decimal\", { precision: 6, scale: 2 })\r\n    latitude?: number;\r\n    @Column(\"decimal\", { precision: 6, scale: 2 })\r\n    longitude?: number;\r\n    altitude?: number;\r\n    radius?: number;\r\n    bufferHeight?: number;\r\n    bufferWidth?: number;\r\n    stage?: string;\r\n    stopTime?: number;\r\n    @ManyToOne(() => FlighPlanEntity, (plan) => plan.locations , {nullable: false, eager: false, cascade: ['insert', 'update', 'remove']})\r\n    @JoinColumn({name: \"flight_plan_id\"})\r\n    flightPlan?: FlighPlanEntity;\r\n    @Column({nullable: true})\r\n    name?: string;\r\n    @Column({ type: 'timestamp', nullable: true })\r\n    scheduledArrivalTime?: Date;\r\n    aircraftModel?: string;\r\n    pilots?: string;\r\n    @Column({ type: 'timestamp', nullable: true })\r\n    estimatedDepartureTime?: Date;\r\n    @Column({ type: 'timestamp', nullable: true })\r\n    estimatedArrivalTime?: Date;\r\n    @Column({ type: 'timestamp', nullable: true })\r\n    actualDepartureTime?: Date;\r\n    @Column({ type: 'timestamp', nullable: true })\r\n    actualArrivalTime?: Date;\r\n    routeBufferHeight?: number;\r\n    routeBufferWidth?: number;\r\n    locationRadius?: number;\r\n    state?: number;\r\n}","import { Column, Entity, OneToMany } from 'typeorm';\r\nimport { ExtendEntity } from './extend.entity';\r\nimport { FlighLocationEntity } from './fligh.location.entity';\r\n\r\n\r\n/**\r\n * This is flight_Plan entity\r\n * Contains flightPlan fields \r\n */\r\n\r\n@Entity({name: \"fligh_plan\"})\r\nexport class FlighPlanEntity extends ExtendEntity {\r\n    @Column({length: 64, nullable: false})\r\n    tailNumber?: string;\r\n    @Column({length: 64, nullable: false})\r\n    flightNumber?: string;\r\n    @Column({ type: 'timestamp', nullable: false })\r\n    scheduledDepartureTime?: Date;\r\n    @OneToMany(() => FlighLocationEntity, (location) => location.flightPlan)\r\n    locations: FlighLocationEntity[]\r\n}","import { Column, CreateDateColumn, Entity, JoinColumn, ManyToOne, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\r\nimport { AssetEntity } from './asset.entity';\r\nimport { GeofenceEntity } from './geofence.entity';\r\n\r\n/**\r\n * This is geofence_assets entity\r\n * Contains geofence_assets fields \r\n */\r\n\r\n\r\n@Entity({ name: \"geofence_assets\" })\r\nexport class GeofenceAssetEntity {\r\n    @PrimaryGeneratedColumn()\r\n    id?: number;\r\n    @CreateDateColumn({name: \"created_at\"})\r\n    createdAt?: Date;\r\n    @UpdateDateColumn({name: \"updated_at\"})\r\n    updatedAt?: Date;\r\n\r\n    @ManyToOne(() => GeofenceEntity, map => map.vehicles)\r\n    @JoinColumn({name: \"geofence_id\"})\r\n    asset?: GeofenceEntity;\r\n\r\n    @Column({name: 'asset_id'})\r\n    assetId?: number;\r\n    \r\n}","import { Column, Entity, OneToOne } from 'typeorm';\r\nimport { ExtendEntity } from './extend.entity';\r\nimport { LandmarkEntity } from './landmark.entity';\r\n\r\n\r\n/**\r\n * This is geo_object entity\r\n * Contains geo_object fields creates new entry\r\n */\r\n\r\n@Entity({name: \"geo_object\"})\r\nexport class GeoObjectEntity extends ExtendEntity {\r\n    @Column({length: 64})\r\n    type?: string;\r\n    bufferDistance?: string;\r\n    geom?: string;\r\n    geoFormat?: string;\r\n    srid?: number;\r\n    @OneToOne('LandmarkEntity', 'landmark', { onDelete: 'CASCADE' })\r\n    landmark: LandmarkEntity;\r\n}","import { Column, Entity, OneToMany } from 'typeorm';\r\nimport { EventSeverityEnum } from '../../../enum/event.severity.enum';\r\nimport { NotifyEnum } from '../../../enum/notify.enum';\r\nimport { ExtendEntity } from './extend.entity';\r\nimport { GeofenceAssetEntity } from './genfence.asset.entity';\r\nimport { GeofenceNotificationEntity } from './geofence.notification.entity';\r\n\r\n\r\n/**\r\n * This is Geofence entity\r\n * Contains Geofence fields creates new entry in database\r\n */\r\n\r\n@Entity({name: \"geofence\"})\r\nexport class GeofenceEntity extends ExtendEntity {\r\n    @Column({length: 100, nullable: false})\r\n    name?: string;\r\n    @Column({ type: \"enum\", enum: NotifyEnum, default: NotifyEnum.INSIDE })\r\n    notify?:NotifyEnum;  \r\n    @Column({name: 'buffer_distance'})\r\n    bufferDistance?: number;\r\n    @Column({name: 'notify_map', length: 3})\r\n    notifyMap?: string = \"Yes\";\r\n    @Column({name: 'notify_email', length: 3})\r\n    notifyEmail?: string = \"Yes\";\r\n    @Column({name: 'description'})\r\n    description?: string;\r\n    @Column({name: 'min_altitude'})\r\n    minAltitude?: number;\r\n    @Column({name: 'max_altitude'})\r\n    maxAltitude?: number;\r\n    @Column(\"decimal\", { precision: 6, scale: 2 , name: 'min_velocity'})\r\n    minVelocity?: number;\r\n    @Column(\"decimal\", { precision: 6, scale: 2, name: 'max_velocity' })\r\n    maxVelocity?: number;\r\n    @Column({ type: \"enum\", enum: EventSeverityEnum, default: EventSeverityEnum.low, name: 'event_severity' })\r\n    eventSeverity?:EventSeverityEnum;\r\n    @Column({name: 'schedule_start_time'})\r\n    scheduleStartTime?: string;\r\n    @Column({name: 'schedule_end_time'})\r\n    scheduleEndTime?: string;\r\n    @Column({nullable: false, name: 'customer_id'})\r\n    customerId?: number;\r\n    @Column({type: \"simple-json\", nullable: true})\r\n    geojsonobject?: unknown;\r\n\r\n    @OneToMany('GeofenceAssetEntity', 'asset', { eager: true, cascade: true })\r\n    vehicles?: GeofenceAssetEntity[];\r\n\r\n    @Column({name: 'g_layer_id'})\r\n    layerId?: number;\r\n\r\n    @Column({name: 'g_landmark_id'})\r\n    landmarkId?: number;\r\n    \r\n    @OneToMany('GeofenceNotificationEntity', 'notification', {onDelete: 'CASCADE', eager: true, cascade: true })\r\n    notifications?: GeofenceNotificationEntity[];\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n@Entity({name: \"geofence_new\"})\r\nexport class GeofenceNewEntity extends ExtendEntity {\r\n    @Column({length: 100, nullable: false})\r\n    name?: string;\r\n    @Column({ type: \"enum\", enum: NotifyEnum, default: NotifyEnum.INSIDE })\r\n    notify?:NotifyEnum;  \r\n    @Column({name: 'buffer_distance'})\r\n    bufferDistance?: number;\r\n    @Column({name: 'notify_map', length: 3})\r\n    notifyMap?: string = \"Yes\";\r\n    @Column({name: 'notify_email', length: 3})\r\n    notifyEmail?: string = \"Yes\";\r\n    @Column({name: 'description'})\r\n    description?: string;\r\n    @Column({name: 'min_altitude'})\r\n    minAltitude?: number;\r\n    @Column({name: 'max_altitude'})\r\n    maxAltitude?: number;\r\n    @Column(\"decimal\", { precision: 6, scale: 2 , name: 'min_velocity'})\r\n    minVelocity?: number;\r\n    @Column(\"decimal\", { precision: 6, scale: 2, name: 'max_velocity' })\r\n    maxVelocity?: number;\r\n    @Column({ type: \"enum\", enum: EventSeverityEnum, default: EventSeverityEnum.low, name: 'event_severity' })\r\n    eventSeverity?:EventSeverityEnum;\r\n    @Column({name: 'schedule_start_time'})\r\n    scheduleStartTime?: string;\r\n    @Column({name: 'schedule_end_time'})\r\n    scheduleEndTime?: string;\r\n    @Column({nullable: false, name: 'customer_id'})\r\n    customerId?: number;\r\n    @Column({type: \"simple-json\", nullable: true})\r\n    geojsonobject?: unknown;\r\n\r\n    @OneToMany('GeofenceAssetEntity', 'asset', { eager: true, cascade: true })\r\n    vehicles?: GeofenceAssetEntity[];\r\n\r\n    @Column({name: 'g_layer_id'})\r\n    layerId?: number;\r\n\r\n    @Column({name: 'g_landmark_id'})\r\n    landmarkId?: number;\r\n    \r\n    @OneToMany('GeofenceNotificationEntity', 'notification', {onDelete: 'CASCADE', eager: true, cascade: true })\r\n    notifications?: GeofenceNotificationEntity[];    \r\n\r\n    \r\n    @Column({length: 100, nullable: true})\r\n    aircraft?: string;\r\n}","import { Column, CreateDateColumn, Entity, JoinColumn, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\r\nimport { GeofenceEntity } from './geofence.entity';\r\n\r\n\r\n/**\r\n * This is Geofence Notification entity\r\n * Contains Geofence Notification field creates new geofence Notification\r\n */\r\n\r\n@Entity({ name: \"geofence_notifications\" })\r\nexport class GeofenceNotificationEntity {\r\n    @PrimaryGeneratedColumn()\r\n    id?: number;\r\n    @CreateDateColumn({name: \"created_at\"})\r\n    createdAt?: Date;\r\n    @UpdateDateColumn({name: \"updated_at\"})\r\n    updatedAt?: Date;\r\n\r\n    @ManyToOne(() => GeofenceEntity, map => map.notifications, {onDelete: 'CASCADE'})\r\n    @JoinColumn({name: \"geofence_id\"})\r\n    notification?: GeofenceEntity;\r\n\r\n    \r\n    @Column({name: 'notification_id'})\r\n    notificationId?: number;\r\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Column, Entity } from 'typeorm';\r\nimport { ExtendEntity } from './extend.entity';\r\n\r\n\r\n/**\r\n * This is group entity\r\n * Contains all group fields. Creates new group  \r\n */\r\n\r\n@Entity({name: \"all_groups\"})\r\nexport class GroupEntity extends ExtendEntity {\r\n    @Column({length: 100, nullable: false})\r\n    name?: string;\r\n}","import { Column, Entity, JoinColumn, ManyToOne, OneToOne } from 'typeorm';\r\nimport { ExtendEntity } from './extend.entity';\r\nimport { GeoObjectEntity } from './geo.object.entity';\r\nimport { LayerEntity } from './layer.entity';\r\n\r\n\r\n/**\r\n * This is landmark entity\r\n * Contains Landmark fields  creates landmark in database\r\n */\r\n\r\n@Entity({name: \"landmark\"})\r\nexport class LandmarkEntity extends ExtendEntity {\r\n    @Column({length: 64})\r\n    name?: string;\r\n    @Column({type: \"simple-json\", nullable: true})\r\n    geojsonobject?: unknown;\r\n    @Column({length: 16})\r\n    locationType?: string;\r\n\r\n    @OneToOne(() => LayerEntity, { eager: true })\r\n    @JoinColumn({ name: \"landmark_layer_id\"})\r\n    layer?: LayerEntity;\r\n\r\n    @OneToOne('GeoObjectEntity', 'geoobject', { onDelete: 'CASCADE', cascade: true })\r\n    @JoinColumn({name: \"geo_object_id\", referencedColumnName: 'id'})\r\n\tgeoObject?: GeoObjectEntity;\r\n}","import { Column, Entity, OneToMany } from 'typeorm';\r\nimport { ExtendEntity } from './extend.entity';\r\nimport { GeofenceEntity } from './geofence.entity';\r\n\r\n\r\n/**\r\n * This is Layer entity\r\n * Contains layer fields creates layer in database \r\n */\r\n\r\n@Entity({name: \"layers\"})\r\nexport class LayerEntity extends ExtendEntity {\r\n    @Column({length: 64})\r\n    name?: string;\r\n    @Column({length: 512})\r\n    address?: string;\r\n    @Column({length: 64})\r\n    city?: string;\r\n    @Column({length: 64})\r\n    country?: string;\r\n    @Column()\r\n    zip?: number;\r\n    @Column({length: 64})\r\n    state?: string;\r\n    @Column({nullable: true})\r\n    customerId?: number;\r\n    @OneToMany('GeofenceEntity', 'geofence', { onDelete: 'CASCADE' })\r\n    geofence: GeofenceEntity[]\r\n}","import {Column, Entity, ManyToOne, OneToMany, PrimaryGeneratedColumn} from 'typeorm';\r\n\r\n\r\n@Entity({name:\"layer_category\"})\r\nexport class NLayer {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  category: string;\r\n\r\n  @Column()\r\n  has_subcategory: boolean;\r\n\r\n  @OneToMany(\r\n    type => LayerData,\r\n    layerData => layerData.layer,\r\n    { cascade: true },\r\n  )\r\n  data: LayerData[];\r\n}\r\n\r\n@Entity({name:\"layer_data\"})\r\nexport class LayerData {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  value?: string;\r\n  \r\n  @OneToMany(\r\n    type => ProductData,\r\n    productData => productData.layerData,\r\n    { cascade: true },\r\n  )\r\n  data?: ProductData[];\r\n\r\n\r\n  \r\n  @ManyToOne(\r\n    type => NLayer,\r\n    layer => layer.data,\r\n    { onDelete: 'CASCADE' },\r\n  )\r\n  layer?: NLayer;\r\n\r\n}\r\n\r\n@Entity({name:\"product_data\"})\r\nexport class ProductData {\r\n  @PrimaryGeneratedColumn()\r\n  id?: number;\r\n\r\n  @Column()\r\n  product_id: string;\r\n\r\n  @Column()\r\n  product_name: string;\r\n\r\n  @ManyToOne(\r\n    type => LayerData,\r\n    layerData => layerData.data,\r\n    { onDelete: 'CASCADE' },\r\n  )\r\n  layerData?: LayerData;\r\n}\r\n","import { Column, CreateDateColumn, Entity, JoinColumn, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\r\nimport { NotificationEntity } from './notification.entity';\r\n\r\n\r\n/**\r\n * This is notification email  entity\r\n * Contains notification email fields \r\n */\r\n\r\n@Entity({name: \"notification_emails\"})\r\nexport class NotificationEmailEntity {\r\n    @PrimaryGeneratedColumn()\r\n    id?: number;\r\n    @CreateDateColumn({name: \"created_at\"})\r\n    createdAt?: Date;\r\n    @UpdateDateColumn({name: \"updated_at\"})\r\n    updatedAt?: Date;\r\n    @Column({length: 64})\r\n    email?: string;\r\n    @ManyToOne(() => NotificationEntity, map => map.emails, {onDelete: 'CASCADE'})\r\n    @JoinColumn({name: \"notification_id\"})\r\n    notification?: NotificationEntity;\r\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Column, Entity, JoinColumn, OneToMany, OneToOne } from 'typeorm';\r\nimport { NotificationTypeEnum } from '../../../enum/notification.type.enum';\r\nimport { ExtendEntity } from './extend.entity';\r\nimport { NotificationEmailEntity } from './notification.email.entity';\r\nimport { NotificationTemplateEntity } from './notification.template.entity';\r\nimport { NotificationUserEntity } from './notification.user.entity';\r\n\r\n\r\n/**\r\n * This is npotification  entity\r\n * Contains notification fields and creates notification in database\r\n */\r\n\r\n@Entity({ name: \"notification\" })\r\nexport class NotificationEntity extends ExtendEntity {\r\n    @Column({ length: 64, nullable: false })\r\n    name?: string;\r\n    @Column({ name: \"timezone\", nullable: false })\r\n    timezone?: string;\r\n    @Column({ type: \"enum\", enum: NotificationTypeEnum, default: NotificationTypeEnum.EMAIL })\r\n    type?: NotificationTypeEnum;\r\n    @Column({ name: \"customer_id\", nullable: false })\r\n    customerId?: number;\r\n    @OneToMany('NotificationEmailEntity', 'notification', { onDelete: 'CASCADE', eager: true, cascade: true })\r\n    emails?: NotificationEmailEntity[];\r\n    @OneToOne(type => NotificationTemplateEntity, { eager: true })\r\n    @JoinColumn({ name: \"email_template_id\" })\r\n    emailTemplate?: NotificationTemplateEntity;\r\n    @OneToOne(type => NotificationTemplateEntity, { eager: true })\r\n    @JoinColumn({ name: \"sms_template_id\" })\r\n    smsTemplate?: NotificationTemplateEntity;\r\n    \r\n    @OneToMany('NotificationUserEntity', 'notification', { onDelete: 'CASCADE', eager: true, cascade: true })\r\n    users?: NotificationUserEntity[];\r\n}","import { Column, Entity } from 'typeorm';\r\nimport { ExtendEntity } from './extend.entity';\r\n\r\n\r\n/**\r\n * This is Notification template  entity\r\n * Contains Notification template fields and creates notification in database \r\n */\r\n\r\n@Entity({name: \"notification_template\"})\r\nexport class NotificationTemplateEntity extends ExtendEntity {\r\n    @Column({type: 'text', nullable: false})\r\n    body?: string;\r\n    @Column({length: 64, nullable: false})\r\n    name?: string;\r\n    @Column({length: 64, nullable: false})\r\n    subject?: string;\r\n}","import { CreateDateColumn, Entity, JoinColumn, ManyToOne, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\r\nimport { NotificationEntity } from './notification.entity';\r\nimport { UserEntity } from './user.entity';\r\n\r\n\r\n/**\r\n * This Notification entity\r\n * Contains notification fields and creates notification in database \r\n */\r\n\r\n@Entity({ name: \"notification_users\" })\r\nexport class NotificationUserEntity {\r\n    @PrimaryGeneratedColumn()\r\n    id?: number;\r\n    @CreateDateColumn({name: \"created_at\"})\r\n    createdAt?: Date;\r\n    @UpdateDateColumn({name: \"updated_at\"})\r\n    updatedAt?: Date;\r\n    @ManyToOne(() => NotificationEntity, map => map.emails, {onDelete: 'CASCADE'})\r\n    @JoinColumn({name: \"notification_id\"})\r\n    notification?: NotificationEntity;\r\n\r\n    @OneToOne(() => UserEntity, { eager: true })\r\n    @JoinColumn({ name: \"id\" })\r\n    user?: UserEntity;\r\n}","import { Entity, Column, PrimaryGeneratedColumn, ManyToOne } from 'typeorm';\r\n\r\n\r\n@Entity({name: \"report_notifications\"})\r\nexport class ReportNotification {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  customerName: string;\r\n\r\n  @Column()\r\n  report: string;\r\n\r\n  @Column()\r\n  createdBy:string;\r\n \r\n  @Column()\r\n  customerId:number;\r\n\r\n\r\n  @Column('simple-array' ) \r\n  notificationIds: number[];\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { Column, Entity } from 'typeorm';\r\nimport { CustomerType, UserTypeEnum } from '../../../enum/user.type.enum';\r\nimport { ExtendEntity } from './extend.entity';\r\n\r\n\r\n/**\r\n * This is users entity\r\n * Contains users fields and creates column based on these fields into database\r\n */\r\n \r\n\r\n\r\n@Entity({name: \"users\"})\r\nexport class UserEntity extends ExtendEntity {\r\n    @Column({length: 100, nullable: false})\r\n    username?: string;\r\n    @Column({length: 100, nullable: false})\r\n    password?: string;\r\n    @Column({length: 100, nullable: true})\r\n    lastname?: string;\r\n    @Column({ type: \"enum\", enum: UserTypeEnum, default: UserTypeEnum.USER })\r\n    accountType?: UserTypeEnum;\r\n    @Column({ type: \"enum\", enum: CustomerType, default: CustomerType.USER })\r\n    userType?: CustomerType;\r\n    @Column({nullable: true})\r\n    customerId?: number;\r\n    @Column({default:true})\r\n    active: boolean;\r\n    @Column({default:true})\r\n    canChangePassword: boolean;\r\n    @Column({default:\"star@admin.com\"})\r\n    email_id: string;\r\n    @Column({default:\"2025-07-12 12:35:00\"})\r\n    expires_on: string;\r\n    @Column({default:\"admin\"})\r\n    firstname: string;\r\n    @Column({default:\"admin\"})\r\n    login_id: string;\r\n    @Column({default:false})\r\n    neverExpire: boolean;\r\n    @Column({nullable:true})\r\n    phone_no: string;\r\n  \r\n}","import { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { QueryBuilder } from '../../service/query.builder.service';\r\nimport { AplController } from './controller/apl.controller';\r\nimport { AssetController } from './controller/asset.controller';\r\nimport { CustomerController } from './controller/customer.controller';\r\nimport { EventDetailController } from './controller/event.detail.controller';\r\nimport { GeofenceController } from './controller/geofence.controller';\r\nimport { GroupController } from './controller/group.controller';\r\nimport { LandmarkController } from './controller/landmark.controller';\r\nimport { LayerController } from './controller/layer.controller';\r\nimport { NewLayerController } from './controller/newlayer.controller';\r\nimport { NotificationController } from './controller/notification.controller';\r\nimport { NotificationTemplateController } from './controller/notification.template.controller';\r\nimport { UserController } from './controller/user.controller';\r\nimport { AplEntity } from './entity/apl.entity';\r\nimport { AplItemEntity } from './entity/apl.item.entity';\r\nimport { AssetEntity } from './entity/asset.entity';\r\nimport { CustomerEntity} from './entity/customer.entity';\r\nimport { EventDetailsEntity } from './entity/event.details.entity';\r\nimport { EventParamDetailsEntity } from './entity/event.param.details.entity';\r\nimport { FlighLocationEntity } from './entity/fligh.location.entity';\r\nimport { FlighPlanEntity } from './entity/flight.plan.entity';\r\nimport { GeofenceAssetEntity } from './entity/genfence.asset.entity';\r\nimport { GeofenceEntity } from './entity/geofence.entity';\r\nimport { GeofenceNotificationEntity } from './entity/geofence.notification.entity';\r\nimport { GroupEntity } from './entity/group.entity';\r\nimport { LandmarkEntity } from './entity/landmark.entity';\r\nimport { LayerEntity } from './entity/layer.entity';\r\nimport { LayerData, NLayer, ProductData} from './entity/newlayer.entity';\r\nimport { NotificationEmailEntity } from './entity/notification.email.entity';\r\nimport { NotificationEntity } from './entity/notification.entity';\r\nimport { NotificationTemplateEntity } from './entity/notification.template.entity';\r\nimport { NotificationUserEntity } from './entity/notification.user.entity';\r\nimport { UserEntity } from './entity/user.entity';\r\nimport { AplService } from './service/apl.service';\r\nimport { AssetService } from './service/asset.service';\r\nimport { CustomerService } from './service/customer.service';\r\nimport { EventDetailService } from './service/event.detail.service';\r\nimport { GeofenceService } from './service/geofence.service';\r\nimport { GroupService } from './service/group.service';\r\nimport { LandmarkService } from './service/landmark.service';\r\nimport { LayerService } from './service/layer.service';\r\nimport { NewLayerService } from './service/newlayer.service';\r\nimport { NewUserService } from './service/newUser.service';\r\nimport { NotificationService } from './service/notification.service';\r\nimport { NotificationTemplateService } from './service/notification.template.service';\r\nimport { UserService } from './service/user.service';\r\nimport { EventNotificationController } from './controller/event.based.notification.controller';\r\nimport { EventNotificationService } from './service/eventNotification.service';\r\nimport { EventBasedNotificationEntity } from './entity/event.based.notification.entity';\r\nimport { EventNotificationEntity } from './entity/event.notification.entity';\r\nimport { EventAssetEntity } from './entity/event.asset.entity';\r\nimport { ReportNotificationService } from './service/report-notification.service';\r\nimport { ReportNotification } from './entity/report-notification.entity';\r\nimport { ReportNotificationController } from './controller/report-notification.controller';\r\n\r\n/**\r\n * @ignore\r\n */\r\n\r\n@Module({\r\n    imports: [\r\n        TypeOrmModule.forFeature([\r\n            EventBasedNotificationEntity,EventNotificationEntity,EventAssetEntity,ReportNotification,\r\n            NLayer,LayerData,ProductData,/*NewCustomerEntity,*/ \r\n            LayerEntity, LandmarkEntity, NotificationEmailEntity, NotificationEntity, \r\n            NotificationTemplateEntity, GeofenceEntity, AplEntity, AplItemEntity, AssetEntity, CustomerEntity,\r\n            EventDetailsEntity, EventParamDetailsEntity, FlighLocationEntity, FlighPlanEntity, UserEntity, GroupEntity,\r\n            CustomerEntity, NotificationUserEntity, GeofenceNotificationEntity, GeofenceAssetEntity, AssetEntity\r\n        ])\r\n    ],\r\n    providers: [\r\n      NewLayerService,NewUserService, EventNotificationService,ReportNotificationService,\r\n        LayerService, QueryBuilder, LandmarkService, NotificationService, NotificationTemplateService,\r\n        AssetService, UserService, GroupService, CustomerService, AplService, EventDetailService, GeofenceService\r\n    ],\r\n    exports: [TypeOrmModule],\r\n    controllers: [\r\n       NewLayerController,EventNotificationController,ReportNotificationController,\r\n        LayerController, LandmarkController, NotificationController, NotificationTemplateController, \r\n        AssetController, UserController, GroupController, CustomerController, AplController, EventDetailController,\r\n        GeofenceController, AssetController\r\n    ]\r\n})\r\nexport class LayerModule {\r\n\r\n}","import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\r\nimport { Repository } from \"typeorm\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { StatusEnum } from \"../../../enum/status.enum\";\r\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\r\nimport { AplDto } from \"../dto/apl.dto\";\r\nimport { AplEntity } from \"../entity/apl.entity\";\r\n\r\n\r\n/**\r\n * This provides AplService methods for API Query\r\n */\r\n@Injectable()\r\nexport class AplService {\r\n    private readonly logger = new Logger(AplService.name);\r\n    /**\r\n     * Constructor for apl services \r\n     * @param repository \r\n     * @param queryBuilderService \r\n     */\r\n    constructor(\r\n        @InjectRepository(AplEntity) private repository: Repository<AplEntity>,\r\n        private readonly queryBuilderService: QueryBuilder) { }\r\n     /**\r\n      * Creates new Api based on data \r\n      * @param data \r\n      * @returns \r\n      */\r\n    async create(data: AplDto): Promise<AplEntity> {\r\n        return this.repository.save(data);\r\n    }\r\n    /**\r\n     * Find APl based on id\r\n     * @param id \r\n     * @returns \r\n     */\r\n    async findById(id: number): Promise<AplEntity> {\r\n        return this.repository.findOne({ id });\r\n    }\r\n    /**\r\n     * Find all the apl in database\r\n     * @returns \r\n     */\r\n    async findAll(): Promise<Array<AplEntity>> {\r\n        return this.repository.find();\r\n    }\r\n\r\n    /**\r\n     * This query removes apl based on id \r\n     * @param id \r\n     * @returns \r\n     */\r\n    async remove(id: number): Promise<AplEntity> {\r\n        const layer = await this.findById(id);\r\n        layer.status = StatusEnum.DELETED;\r\n        return this.repository.save(layer);\r\n    }\r\n\r\n    /**\r\n     * Updates apl with new data checks firstly with id \r\n     * @param id \r\n     * @param data \r\n     * @returns \r\n     */\r\n    async update(id: number, data: AplDto): Promise<AplEntity> {\r\n        let layer = await this.findById(id);\r\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\r\n        if (layer == null) {\r\n            throw new HttpException({\r\n                status: HttpStatus.FORBIDDEN,\r\n                error: `Apl id: ${id} not found`,\r\n            }, HttpStatus.FORBIDDEN);\r\n        }\r\n        layer = Object.assign(layer, data);\r\n        return this.repository.save(layer);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param state \r\n     * @returns \r\n     */\r\n    async paginate(state: StateDto): Promise<Pagination<AplEntity>> {\r\n        const options = { page: state.page.current, limit: state.page.size };\r\n        const queryBuilder = this.repository.createQueryBuilder('t');\r\n        return await paginate<AplEntity>(this.queryBuilderService.getQuery(state, queryBuilder), options);\r\n    }\r\n}","import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\r\nimport { Repository } from \"typeorm\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { StatusEnum } from \"../../../enum/status.enum\";\r\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\r\nimport { LayerCreateDto } from \"../dto/layer.create.dto\";\r\nimport { AssetEntity } from \"../entity/asset.entity\";\r\nimport * as _ from \"lodash\";\r\n\r\n\r\n/**\r\n * This class contains methods for AssetService API Query\r\n */\r\n@Injectable()\r\nexport class AssetService {\r\n    private readonly logger = new Logger(AssetService.name);\r\n    /**\r\n     * Constructor for AssetServices \r\n     * @param repository \r\n     * @param queryBuilderService \r\n     */\r\n    constructor(\r\n        @InjectRepository(AssetEntity) private repository: Repository<AssetEntity>,\r\n        private readonly queryBuilderService: QueryBuilder) { }\r\n\r\n\r\n        /**\r\n         * Creates new asset in database\r\n         * @param data \r\n         * @returns \r\n         */\r\n    async create(data: LayerCreateDto): Promise<AssetEntity> {\r\n        return this.repository.save(data);\r\n    }\r\n\r\n    /**\r\n     * Find a asset based on id of asset\r\n     * @param id \r\n     * @returns \r\n     */\r\n    async findById(id: number): Promise<AssetEntity> {\r\n        return this.repository.findOne({id});\r\n    }\r\n    /**\r\n     * Find all the assets from database\r\n     * @returns \r\n     */\r\n    async findAll(): Promise<Array<AssetEntity>> {\r\n        return this.repository.find({status: StatusEnum.ACTIVE});\r\n    }\r\n\r\n    async findUserAssets(customerId: number): Promise<AssetEntity[]> {\r\n        return this.repository.find({ customerId: customerId, status: StatusEnum.ACTIVE });\r\n      }\r\n    \r\n      async findCustomerAssets(customerId: number): Promise<AssetEntity[]> {\r\n        return this.repository.find({ customerId: customerId, status: StatusEnum.ACTIVE });\r\n      }\r\n\r\n    /**\r\n     * Remove a asset from database\r\n     * @param id \r\n     * @returns \r\n     */\r\n    async remove(id: number): Promise<AssetEntity> {\r\n        const layer = await this.findById(id);\r\n        layer.status = StatusEnum.DELETED;\r\n        return this.repository.save(layer);\r\n    }\r\n\r\n    /**\r\n     * Updates asset with new data \r\n     * @param data \r\n     * @returns \r\n     */\r\n    async update(data: LayerCreateDto): Promise<AssetEntity> {\r\n        const id: number = _.result(data,'id',0);\r\n        data = _.omit(data, ['id']);\r\n        let layer = await this.findById(id);\r\n        if (layer == null) {\r\n            throw new HttpException({\r\n                status: HttpStatus.FORBIDDEN,\r\n                error: `Asset id: ${id} not found`,\r\n            }, HttpStatus.FORBIDDEN);\r\n        }\r\n        layer = Object.assign(layer, data);\r\n        return this.repository.save(layer);\r\n    }\r\n\r\n/**\r\n * This method finds all the assets based on Customer ID.\r\n * @param {number}customerId  Functions to find customer asset based on id\r\n * @returns \r\n */\r\n   async findUserAsset(customerId:number):Promise<Array<AssetEntity>> {\r\n       return this.repository.find({customerId})\r\n       \r\n   }\r\n\r\n\r\n    /**\r\n     * @ignore\r\n     * @param state \r\n     * @returns \r\n     */\r\n\r\n    async paginate(state: StateDto): Promise<Pagination<AssetEntity>> {\r\n        const options = { page: state.page.current, limit: state.page.size };\r\n        const queryBuilder = this.repository.createQueryBuilder('t');\r\n        return await paginate<AssetEntity>(this.queryBuilderService.getQuery(state, queryBuilder), options);\r\n    }\r\n}","import { HttpException, HttpStatus, Injectable, Logger, NotFoundException } from \"@nestjs/common\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\r\nimport { Repository } from \"typeorm\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { StatusEnum } from \"../../../enum/status.enum\";\r\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\r\nimport { CustomerDto, NewCustomerDto } from \"../dto/customer.dto\";\r\nimport { CustomerEntity } from \"../entity/customer.entity\";\r\nimport * as _ from \"lodash\";\r\nimport { UserEntity } from \"../entity/user.entity\";\r\n\r\n/**\r\n * This class contains methods for CustomerService API.\r\n */\r\n\r\n// @Injectable()\r\n// export class CustomerService {\r\n//     private readonly logger = new Logger(CustomerService.name);\r\n//     /**\r\n//      * Constructor for Customer services \r\n//      * @param repository \r\n//      * @param queryBuilderService \r\n//      */\r\n//     constructor(\r\n//         @InjectRepository(CustomerEntity) private repository: Repository<CustomerEntity>,\r\n//         @InjectRepository(NewCustomerEntity)private newCustomer: Repository<NewCustomerEntity>,\r\n//         private readonly queryBuilderService: QueryBuilder) { }\r\n        \r\n\r\n        \r\n        \r\n//         /**\r\n//          * \r\n//          * Creates new customer in database\r\n//          * @param data \r\n//          * @returns \r\n//          */\r\n//     async create(data: CustomerDto): Promise<CustomerEntity> {\r\n//         return this.repository.save(data);\r\n//     }\r\n\r\n//     /**\r\n//      * Find a customer based on id\r\n//      * @param id \r\n//      * @returns \r\n//      */\r\n//     async findById(id: number): Promise<CustomerEntity> {\r\n//         return this.repository.findOne({ id });\r\n//     }\r\n\r\n//     /**\r\n//      * Find all the customers \r\n//      * @returns \r\n//      */\r\n//     async findAll(): Promise<Array<CustomerEntity>> {\r\n//         return this.repository.find({status: StatusEnum.ACTIVE});\r\n//     }\r\n//     /**\r\n//      * Remove a customer from database\r\n//      * @param id \r\n//      * @returns \r\n//      */\r\n//     async remove(id: number): Promise<CustomerEntity> {\r\n//         const layer = await this.findById(id);\r\n//         layer.status = StatusEnum.DELETED;\r\n//         return this.repository.save(layer);\r\n//     }\r\n\r\n//     /**\r\n//      * Updates a customer field based on new data \r\n//      * @param data \r\n//      * @returns \r\n//      */\r\n//     async update(data: CustomerDto): Promise<CustomerEntity> {\r\n//         const id: number = _.result(data,'id',0);\r\n//         data = _.omit(data, ['id']);\r\n//         let layer = await this.findById(id);\r\n//         if (layer == null) {\r\n//             throw new HttpException({\r\n//                 status: HttpStatus.FORBIDDEN,\r\n//                 error: `Customer id: ${id} not found`,\r\n//             }, HttpStatus.FORBIDDEN);\r\n//         }\r\n//         layer = Object.assign(layer, data);\r\n//         return this.repository.save(layer);\r\n//     }\r\n\r\n//     /**\r\n//      * @ignore\r\n//      * @param state \r\n//      * @returns \r\n//      */\r\n//     async paginate(state: StateDto): Promise<Pagination<CustomerEntity>> {\r\n//         const options = { page: state.page.current, limit: state.page.size };\r\n//         const queryBuilder = this.repository.createQueryBuilder('t');\r\n//         return await paginate<CustomerEntity>(this.queryBuilderService.getQuery(state, queryBuilder), options);\r\n//     }\r\n\r\n\r\n\r\n\r\n\r\n@Injectable()\r\nexport class CustomerService {\r\n  constructor(\r\n    @InjectRepository(CustomerEntity)\r\n    private customerRepository: Repository<CustomerEntity>,\r\n    @InjectRepository(UserEntity)\r\n    private userRepository: Repository<UserEntity>,\r\n    private readonly queryBuilderService: QueryBuilder\r\n  ) {}\r\n\r\n  async create(customerDto: CustomerDto): Promise<CustomerDto> {\r\n    const { name, phone, email, city,state , country,address,preLogoText,postLogoText,logo_filename,isAdmin, user } = customerDto;\r\n\r\n    const customer = this.customerRepository.create({\r\n      name,\r\n      phone,\r\n      email,\r\n      city,\r\n      state,\r\n      country,\r\n      address,\r\n      preLogoText,\r\n      postLogoText,\r\n      logo_filename,\r\n      isAdmin,\r\n    });\r\n\r\n    if (isAdmin && user) {\r\n      const newUser = this.userRepository.create({\r\n        ...user,\r\n        customerId: null,\r\n      });\r\n\r\n      await this.userRepository.save(newUser);\r\n\r\n      customer.userId = newUser.id;\r\n    }\r\n\r\n    await this.customerRepository.save(customer);\r\n\r\n    return customerDto;\r\n  }\r\n\r\n\r\n\r\n  async findAll(): Promise<CustomerEntity[]> {\r\n    return this.customerRepository.createQueryBuilder('customer')\r\n      .leftJoinAndSelect('customer.user', 'user')\r\n      .getMany();\r\n  }\r\n  \r\n  async findOne(id: number): Promise<CustomerEntity> {\r\n    return this.customerRepository.createQueryBuilder('customer')\r\n      .leftJoinAndSelect('customer.user', 'user')\r\n      .where('customer.id = :id', { id })\r\n      .getOne();\r\n  }\r\n  \r\n  async findCustomerUser(id: number): Promise<CustomerEntity> {\r\n    return this.customerRepository.createQueryBuilder('customer')\r\n      .leftJoinAndSelect('customer.user', 'user')\r\n      .where('customer.userId = :id', { id })\r\n      .getOne();\r\n  }\r\n\r\n\r\n\r\n  // async update(id: number, customerDto: CustomerDto): Promise<CustomerDto> {\r\n\r\n  //   const { name, phone, email, city,state , country,address,preLogoText,postLogoText,logo_filename,isAdmin, user } = customerDto;\r\n\r\n  //   const customer = await this.customerRepository.findOne(id);\r\n\r\n  //   customer.name = name;\r\n  //   customer.phone = phone;\r\n  //   customer.email = email;\r\n  //   customer.city=city;\r\n  //   customer.state=state;\r\n  //   customer.country=country;\r\n  //   customer.address=address;\r\n  //   customer.preLogoText= preLogoText,\r\n  //   customer.postLogoText=  postLogoText,\r\n  //   customer.logo_filename=  logo_filename,\r\n  //   customer.isAdmin = isAdmin;\r\n      \r\n  //   if (isAdmin && user) {\r\n  //     const newUser = this.userRepository.create({\r\n  //       ...user,\r\n  //       customerId: customer.id,\r\n  //     });\r\n\r\n  //     await this.userRepository.save(newUser);\r\n\r\n  //     customer.userId = newUser.id;\r\n  //   } else {\r\n  //     customer.userId = null;\r\n  //   }\r\n\r\n  //   await this.customerRepository.save(customer);\r\n\r\n  //   return customerDto;\r\n  // }\r\n\r\n\r\n  async update(id: number, customerDto: CustomerDto): Promise<CustomerDto> {\r\n    const { name, phone, email, city, state, country, address, preLogoText, postLogoText, logo_filename, isAdmin, user } = customerDto;\r\n  \r\n    // Retrieve the customer from the database\r\n    const customer = await this.customerRepository.findOne(id);\r\n  \r\n    // Check if the customer exists\r\n    if (!customer) {\r\n      // Handle the case where the customer is not found (e.g., throw an exception)\r\n      throw new NotFoundException(`Customer with id ${id} not found`);\r\n    }\r\n  \r\n    // Update only the fields that are provided in the customerDto\r\n    if (name) customer.name = name;\r\n    if (phone) customer.phone = phone;\r\n    if (email) customer.email = email;\r\n    if (city) customer.city = city;\r\n    if (state) customer.state = state;\r\n    if (country) customer.country = country;\r\n    if (address) customer.address = address;\r\n    if (preLogoText) customer.preLogoText = preLogoText;\r\n    if (postLogoText) customer.postLogoText = postLogoText;\r\n    if (logo_filename) customer.logo_filename = logo_filename;\r\n    if (isAdmin !== undefined) customer.isAdmin = isAdmin;\r\n  \r\n    // Update user information if isAdmin is provided\r\n    if (isAdmin && user) {\r\n      // Check if the customer already has a user associated\r\n      if (customer.userId) {\r\n        // If yes, update the existing user\r\n        await this.userRepository.update(customer.userId, user);\r\n      } else {\r\n        // If no, create a new user and associate it with the customer\r\n        const newUser = this.userRepository.create({\r\n          ...user,\r\n          customerId: customer.id,\r\n        });\r\n  \r\n        await this.userRepository.save(newUser);\r\n  \r\n        customer.userId = newUser.id;\r\n      }\r\n    } else {\r\n      // If isAdmin is false or not provided, remove the associated user\r\n      customer.userId = null;\r\n    }\r\n  \r\n    // Save the updated customer to the database\r\n    await this.customerRepository.save(customer);\r\n  \r\n    // Return the updated customerDto\r\n    return customerDto;\r\n  }\r\n  \r\n\r\n \r\n  async delete(id: number): Promise<void> {\r\n    const customer = await this.customerRepository.findOne(id);\r\n  \r\n    if (!customer) {\r\n      throw new NotFoundException(`Customer with ID ${id} not found`);\r\n    }\r\n  \r\n    if (customer.userId) {\r\n      const user = await this.userRepository.findOne(customer.userId);\r\n  \r\n      if (user) {\r\n        user.status = StatusEnum.DELETED;\r\n        await this.userRepository.save(user);\r\n      }\r\n    }\r\n    await this.customerRepository.delete(id);\r\n  }\r\n  \r\n\r\n    /**\r\n     * @ignore\r\n     * @param state \r\n     * @returns \r\n     */\r\n    async paginate(state: StateDto): Promise<Pagination<CustomerEntity>> {\r\n      const options = { page: state.page.current, limit: state.page.size };\r\n      const queryBuilder = this.customerRepository.createQueryBuilder('t');\r\n      return await paginate<CustomerEntity>(this.queryBuilderService.getQuery(state, queryBuilder), options);\r\n  }\r\n\r\n}\r\n","import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\r\nimport { Repository } from \"typeorm\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { StatusEnum } from \"../../../enum/status.enum\";\r\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\r\nimport { EventDetailDto } from \"../dto/event.detail.dto\";\r\nimport { EventDetailsEntity } from \"../entity/event.details.entity\";\r\n\r\n/**\r\n * This class contains methods for EventDetaial API\r\n * @class EventDetailService\r\n */\r\n\r\n@Injectable()\r\nexport class EventDetailService {\r\n    private readonly logger = new Logger(EventDetailService.name);\r\n\r\n    /**\r\n     * Constructor for Event details\r\n     * @param repository \r\n     * @param queryBuilderService \r\n     */\r\n    constructor(\r\n        @InjectRepository(EventDetailsEntity) private repository: Repository<EventDetailsEntity>,\r\n        private readonly queryBuilderService: QueryBuilder) { }\r\n/**\r\n *Creates new EventDetail in database \r\n * @param data \r\n * @returns \r\n */\r\n    async create(data: EventDetailDto): Promise<EventDetailsEntity> {\r\n        return this.repository.save(data);\r\n    }\r\n    /**\r\n     * Find event based on id provided\r\n     * @param id \r\n     * @returns \r\n     */\r\n    async findById(id: number): Promise<EventDetailsEntity> {\r\n        return this.repository.findOne({ id });\r\n    }\r\n    /**\r\n     * Find all the events \r\n     * @returns \r\n     */\r\n    async findAll(): Promise<Array<EventDetailsEntity>> {\r\n        return this.repository.find();\r\n    }\r\n\r\n    /**\r\n     * Remove a event based on id provided\r\n     * @param id \r\n     * @returns \r\n     */\r\n    async remove(id: number): Promise<EventDetailsEntity> {\r\n        const layer = await this.findById(id);\r\n        layer.status = StatusEnum.DELETED;\r\n        return this.repository.save(layer);\r\n    }\r\n    /**\r\n     * Updates event based on id \r\n     * @param id \r\n     * @param data \r\n     * @returns \r\n     */\r\n    async update(id: number, data: EventDetailDto): Promise<EventDetailsEntity> {\r\n        let layer = await this.findById(id);\r\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\r\n        if (layer == null) {\r\n            throw new HttpException({\r\n                status: HttpStatus.FORBIDDEN,\r\n                error: `Event detail id: ${id} not found`,\r\n            }, HttpStatus.FORBIDDEN);\r\n        }\r\n        layer = Object.assign(layer, data);\r\n        return this.repository.save(layer);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param state \r\n     * @returns \r\n     */\r\n    async paginate(state: StateDto): Promise<Pagination<EventDetailsEntity>> {\r\n        const options = { page: state.page.current, limit: state.page.size };\r\n        const queryBuilder = this.repository.createQueryBuilder('t');\r\n        return await paginate<EventDetailsEntity>(this.queryBuilderService.getQuery(state, queryBuilder), options);\r\n    }\r\n}","import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { paginate, Pagination } from \"nestjs-typeorm-paginate\";\r\nimport { Repository } from \"typeorm\";\r\nimport * as _ from \"lodash\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { StatusEnum } from \"../../../enum/status.enum\";\r\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\r\nimport { EventNotificationMainDto } from \"../dto/event.notification.dto\";\r\nimport { EventBasedNotificationEntity } from \"../entity/event.based.notification.entity\";\r\n\r\nimport { EventNotificationEntity } from \"../entity/event.notification.entity\";\r\nimport { NotificationEntity } from \"../entity/notification.entity\";\r\nimport { EventAssetEntity } from \"../entity/event.asset.entity\";\r\nimport { AssetEntity } from \"../entity/asset.entity\";\r\nimport { CustomerEntity } from \"../entity/customer.entity\";\r\n\r\n\r\n/**\r\n * This class contains methods for event notification services\r\n * @class EventNotificationService\r\n */\r\n@Injectable()\r\nexport class EventNotificationService {\r\n  private readonly logger = new Logger(EventNotificationService.name);\r\n\r\n  /**\r\n   * Constructor for event notification service \r\n   * @param repository \r\n   * @param queryBuilderService \r\n   */\r\n  constructor(\r\n    @InjectRepository(EventBasedNotificationEntity)\r\n    private repository: Repository<EventBasedNotificationEntity>,\r\n    private readonly queryBuilderService: QueryBuilder\r\n  ) {}\r\n\r\n  /**\r\n   * Create a new event notification \r\n   * @param data \r\n   * @returns \r\n   */\r\n  // async create(data: EventNotificationMainDto): Promise<EventBasedNotificationEntity> {\r\n  //   data.vehicles.forEach(o => {\r\n  //       o = Object.assign(o, {assetId: o.id})\r\n  //       _.omit(o, ['id']);\r\n  //   });\r\n  //   data.notifications.forEach(o => {\r\n  //       o = Object.assign(o, {notificationId: o.id})\r\n  //       _.omit(o, ['id']);\r\n  //   });\r\n  //   const geofence: EventBasedNotificationEntity = Object.assign(data);\r\n  //   const notification = await this.repository.save(geofence);\r\n  //   return notification;\r\n  // }\r\n\r\n  // service\r\nasync create(data: EventNotificationMainDto): Promise<EventBasedNotificationEntity> {\r\n  // First, create the EventBasedNotificationEntity\r\n  const eventNotification = new EventBasedNotificationEntity();\r\n  eventNotification.name = data.name;\r\n  eventNotification.customerId = data.customerId;\r\n  eventNotification.customerName = data.customerName;\r\n  eventNotification.eventId = data.eventId;\r\n  eventNotification.eventName = data.eventName;\r\n  eventNotification.description=data.description;\r\n  // Create and associate the EventAssetEntity instances\r\n  const vehicles = data.vehicles.map((vehicleData) => {\r\n    const eventAsset = new EventAssetEntity();\r\n    eventAsset.assetId = vehicleData.id; \r\n    eventNotification.assetIds=vehicleData.id;\r\n    return eventAsset;\r\n  });\r\n  eventNotification.vehicles = vehicles;\r\n  // eventNotification.assetIds = vehicles.map((vehicle) => vehicle.assetId);\r\n\r\n\r\n  // Create and associate the EventNotificationEntity instances\r\n  const notifications = data.notifications.map((notificationData) => {\r\n    const eventNotificationEntity = new EventNotificationEntity();\r\n    eventNotificationEntity.notificationId = notificationData.id; \r\n    eventNotification.notificationsId=notificationData.id;\r\n    return eventNotificationEntity;\r\n  });\r\n  eventNotification.notifications = notifications;\r\n\r\n  // eventNotification.notificationsId = notifications.map((notification) => notification.notificationId);\r\n\r\n\r\n  // Save the EventBasedNotificationEntity and its associations in the database\r\n  const savedEventNotification = await this.repository.save(eventNotification);\r\n  return savedEventNotification;\r\n}\r\n\r\n\r\n  /**\r\n   * Find an event notification by ID\r\n   * @param id \r\n   * @returns \r\n   */\r\n  async findById(id: number): Promise<EventBasedNotificationEntity> {\r\n    return this.repository\r\n      .createQueryBuilder(\"t\")\r\n      .leftJoinAndMapMany(\r\n        \"t.notifications\",\r\n        EventNotificationEntity,\r\n        \"n\",\r\n        \"t.id = n.event_id\"\r\n      )\r\n      .leftJoinAndMapOne(\r\n        \"n.notification\",\r\n        NotificationEntity,\r\n        \"notification\",\r\n        \"n.notification_id = notification.id\"\r\n      )\r\n      .leftJoinAndMapMany(\r\n        \"t.assets\",\r\n        EventAssetEntity,\r\n        \"a\",\r\n        \"t.id = a.event_id\"\r\n      )\r\n      .leftJoinAndMapOne(\"a.asset\", AssetEntity, \"asset\", \"a.asset_id = asset.id\")\r\n      .where(\"t.id = :id\", { id })\r\n      .where('t.status = :status', {status: StatusEnum.ACTIVE})\r\n      .getOne();\r\n  }\r\n\r\n  /**\r\n   * Find all event notifications in the database\r\n   * @returns \r\n   */\r\n  async findAll(): Promise<Array<EventBasedNotificationEntity>> {\r\n    return this.repository.createQueryBuilder('t')\r\n        .leftJoinAndMapOne('t.customer',CustomerEntity,'customer','t.customer_id = customer.id')\r\n        .leftJoinAndMapMany('t.notifications',EventNotificationEntity,'n','t.id  = n.event_id')\r\n        .leftJoinAndMapOne('n.notification', NotificationEntity,'notification','n.notification_id  = notification.id')\r\n        .leftJoinAndMapMany('t.vehicles',EventAssetEntity,'a','t.id  = a.event_id')\r\n        .leftJoinAndMapOne('a.asset', AssetEntity,'asset','a.asset_id  = asset.id')\r\n        .where('t.status = :status', {status: StatusEnum.ACTIVE})\r\n        .getMany();\r\n  }\r\n\r\n  /**\r\n   * Remove an event notification by ID\r\n   * @param id \r\n   * @returns \r\n   */\r\n  async remove(id: number): Promise<EventBasedNotificationEntity> {\r\n    console.log(\"id: \", id);\r\n    await this.repository\r\n      .createQueryBuilder(\"t\")\r\n      .update(EventBasedNotificationEntity)\r\n      .set({ status: StatusEnum.DELETED })\r\n      .where(\"id = :id\", { id })\r\n      .execute();\r\n    return this.findById(id);\r\n  }\r\n\r\n  /**\r\n   * Update an event notification\r\n   * @param id \r\n   * @param data \r\n   * @returns \r\n   */\r\n  async update(id: number, data: EventNotificationMainDto): Promise<EventBasedNotificationEntity> {\r\n    data = _.omit(data, [\"id\"]);\r\n    data.vehicles.forEach((o) => {\r\n      o = Object.assign(o, { assetId: o.id });\r\n      _.omit(o, [\"id\"]);\r\n    });\r\n    data.notifications.forEach((o) => {\r\n      o = Object.assign(o, { notificationId: o.id });\r\n      _.omit(o, [\"id\"]);\r\n    });\r\n    let event = await this.findById(id);\r\n    this.logger.log(`update: ${JSON.stringify(event)}`);\r\n    if (event == null) {\r\n      throw new HttpException(\r\n        {\r\n          status: HttpStatus.FORBIDDEN,\r\n          error: `Event notification id: ${id} not found`,\r\n        },\r\n        HttpStatus.FORBIDDEN\r\n      );\r\n    }\r\n    event = Object.assign(event, data);\r\n    const notification = await this.repository.save(event);\r\n    return notification;\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   * @param state \r\n   * @returns \r\n   */\r\n  async paginate(state: StateDto): Promise<Pagination<EventBasedNotificationEntity>> {\r\n    const options = { page: state.page.current, limit: state.page.size };\r\n    const queryBuilder = this.repository.createQueryBuilder(\"t\");\r\n    return await paginate<EventBasedNotificationEntity>(\r\n      this.queryBuilderService.getQuery(state, queryBuilder),\r\n      options\r\n    );\r\n  }\r\n}\r\n","import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { paginate, Pagination } from \"nestjs-typeorm-paginate\";\r\nimport { Repository } from \"typeorm\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { StatusEnum } from \"../../../enum/status.enum\";\r\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\r\nimport { GeofenceDto } from \"../dto/geofence.dto\";\r\nimport { GeofenceEntity, GeofenceNewEntity } from \"../entity/geofence.entity\";\r\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\r\nimport { LayerEntity } from \"../entity/layer.entity\";\r\nimport { UserEntity } from \"../entity/user.entity\";\r\nimport * as _ from \"lodash\";\r\nimport { CustomerEntity } from \"../entity/customer.entity\";\r\nimport { GeofenceNotificationEntity } from \"../entity/geofence.notification.entity\";\r\nimport { NotificationEntity } from \"../entity/notification.entity\";\r\nimport { GeofenceAssetEntity } from \"../entity/genfence.asset.entity\";\r\nimport { AssetEntity } from \"../entity/asset.entity\";\r\n\r\n\r\n/**\r\n * This class contains method for geofence services\r\n * @class Geofence\r\n */\r\n@Injectable()\r\nexport class GeofenceService {\r\n    private readonly logger = new Logger(GeofenceService.name);\r\n    /**\r\n     * Constructor for geofence service \r\n     * @param repository \r\n     * @param layerRepository \r\n     * @param landmarkRepository \r\n     * @param userRepository \r\n     * @param queryBuilderService \r\n     */\r\n    constructor(\r\n        @InjectRepository(GeofenceEntity) private repository: Repository<GeofenceEntity>,\r\n        @InjectRepository(LayerEntity) private layerRepository: Repository<LayerEntity>,\r\n        @InjectRepository(LandmarkEntity) private landmarkRepository: Repository<LandmarkEntity>,\r\n        @InjectRepository(UserEntity) private userRepository: Repository<UserEntity>,\r\n        private readonly queryBuilderService: QueryBuilder) { }\r\n\r\n        /**\r\n         * Create new GeoFence \r\n         * @param data \r\n         * @returns \r\n         */\r\n    async create(data: GeofenceDto): Promise<GeofenceNewEntity> {\r\n        data.vehicles.forEach(o => {\r\n            o = Object.assign(o, {assetId: o.id})\r\n            _.omit(o, ['id']);\r\n        });\r\n        data.notifications.forEach(o => {\r\n            o = Object.assign(o, {notificationId: o.id})\r\n            _.omit(o, ['id']);\r\n        });\r\n        const geofence: GeofenceEntity = Object.assign(data);\r\n        const notification = await this.repository.save(geofence);\r\n        return notification;\r\n    }\r\n\r\n    /**\r\n     * Finds Geofence based on id provided\r\n     * @param id \r\n     * @returns \r\n     */\r\n    async findById(id: number): Promise<GeofenceEntity> {\r\n        return this.repository.createQueryBuilder('t')\r\n        .leftJoinAndMapOne('t.customer',CustomerEntity,'customer','t.customer_id = customer.id')\r\n        .leftJoinAndMapOne('t.layer',LayerEntity,'layer','t.g_layer_id  = layer.id')\r\n        .leftJoinAndMapOne('t.landmark',LandmarkEntity,'landmark','t.g_landmark_id  = landmark.id')\r\n        .leftJoinAndMapMany('t.notifications',GeofenceNotificationEntity,'n','t.id  = n.geofence_id')\r\n        .leftJoinAndMapOne('n.notification', NotificationEntity,'notification','n.notification_id  = notification.id')\r\n        .leftJoinAndMapMany('t.vehicles',GeofenceAssetEntity,'a','t.id  = a.geofence_id')\r\n        .leftJoinAndMapOne('a.asset', AssetEntity,'asset','a.asset_id  = asset.id')\r\n        .where('t.id = :id', {id})\r\n        .getOne();\r\n        return this.repository.findOne({ id: id, status: StatusEnum.ACTIVE });\r\n    }\r\n\r\n    /**\r\n     * Finds all the geofence entries in database\r\n     * @returns \r\n     */\r\n    async findAll(): Promise<Array<GeofenceEntity>> {\r\n        return this.repository.createQueryBuilder('t')\r\n        .leftJoinAndMapOne('t.customer',CustomerEntity,'customer','t.customer_id = customer.id')\r\n        .leftJoinAndMapOne('t.layer',LayerEntity,'layer','t.g_layer_id  = layer.id')\r\n        .leftJoinAndMapOne('t.landmark',LandmarkEntity,'landmark','t.g_landmark_id  = landmark.id')\r\n        .leftJoinAndMapMany('t.notifications',GeofenceNotificationEntity,'n','t.id  = n.geofence_id')\r\n        .leftJoinAndMapOne('n.notification', NotificationEntity,'notification','n.notification_id  = notification.id')\r\n        .leftJoinAndMapMany('t.vehicles',GeofenceAssetEntity,'a','t.id  = a.geofence_id')\r\n        .leftJoinAndMapOne('a.asset', AssetEntity,'asset','a.asset_id  = asset.id')\r\n        .where('t.status = :status', {status: StatusEnum.ACTIVE})\r\n        .getMany();\r\n    }\r\n\r\n    /**\r\n     * Remove Geofence based on id provided\r\n     * @param id \r\n     * @returns \r\n     */\r\n    async remove(id: number): Promise<GeofenceEntity> {\r\n        console.log('id: ', id);\r\n        await this.repository.createQueryBuilder('t').update(GeofenceEntity).set({status: StatusEnum.DELETED})\r\n        .where(\"id = :id\", {id}).execute();\r\n        return this.findById(id);\r\n    }\r\n\r\n    /**\r\n     * Updates Geofence entry based on id\r\n     * @param id \r\n     * @param data \r\n     * @returns \r\n     */\r\n    async update(id: number, data: GeofenceDto): Promise<GeofenceEntity> {\r\n        data = _.omit(data, ['id']);\r\n        data.vehicles.forEach(o => {\r\n            o = Object.assign(o, {assetId: o.id})\r\n            _.omit(o, ['id']);\r\n        });\r\n        data.notifications.forEach(o => {\r\n            o = Object.assign(o, {notificationId: o.id})\r\n            _.omit(o, ['id']);\r\n        });\r\n        let layer = await this.findById(id);\r\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\r\n        if (layer == null) {\r\n            throw new HttpException({\r\n                status: HttpStatus.FORBIDDEN,\r\n                error: `Notification id: ${id} not found`,\r\n            }, HttpStatus.FORBIDDEN);\r\n        }\r\n        layer = Object.assign(layer, data);\r\n        const notification = await this.repository.save(layer);\r\n        return notification;\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param state \r\n     * @returns \r\n     */\r\n    async paginate(state: StateDto): Promise<Pagination<GeofenceEntity>> {\r\n        const options = { page: state.page.current, limit: state.page.size };\r\n        const queryBuilder = this.repository.createQueryBuilder('t');\r\n        return await paginate<GeofenceEntity>(this.queryBuilderService.getQuery(state, queryBuilder), options);\r\n    }\r\n}","import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\r\nimport { Repository } from \"typeorm\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { StatusEnum } from \"../../../enum/status.enum\";\r\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\r\nimport { GroupDto } from \"../dto/group.dto\";\r\nimport { GroupEntity } from \"../entity/group.entity\";\r\nimport * as _ from \"lodash\";\r\n\r\n\r\n/**\r\n * This class contains methods for GroupService API\r\n */\r\n@Injectable()\r\nexport class GroupService {\r\n    private readonly logger = new Logger(GroupService.name);\r\n    /**\r\n     * Constructor for group service \r\n     * @param repository \r\n     * @param queryBuilderService \r\n     */\r\n    constructor(\r\n        @InjectRepository(GroupEntity) private repository: Repository<GroupEntity>,\r\n        private readonly queryBuilderService: QueryBuilder) { }\r\n\r\n         /**\r\n          * Creates new Group in database\r\n          * @param data \r\n          * @returns \r\n          */\r\n    async create(data: GroupDto): Promise<GroupEntity> {\r\n        return this.repository.save(data);\r\n    }\r\n\r\n    /**\r\n     * Finds a GroupService based on id \r\n     * @param id \r\n     * @returns \r\n     */\r\n    async findById(id: number): Promise<GroupEntity> {\r\n        return this.repository.findOne({ id });\r\n    }\r\n    /**\r\n     * Finds all the Group\r\n     * @returns With all the entries in database\r\n     */\r\n    async findAll(): Promise<Array<GroupEntity>> {\r\n        return this.repository.find();\r\n    }\r\n    /**\r\n     * Remove a GroupService based on id provided\r\n     * @param id \r\n     * @returns \r\n     */\r\n    async remove(id: number): Promise<GroupEntity> {\r\n        const layer = await this.findById(id);\r\n        layer.status = StatusEnum.DELETED;\r\n        return this.repository.save(layer);\r\n    }\r\n\r\n    /**\r\n     * Updates new entries based on id and new data provided \r\n     * @param id \r\n     * @param data \r\n     * @returns \r\n     */\r\n    async update(id: number, data: GroupDto): Promise<GroupEntity> {\r\n        data = _.omit(data, ['id']);\r\n        let layer = await this.findById(id);\r\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\r\n        if (layer == null) {\r\n            throw new HttpException({\r\n                status: HttpStatus.FORBIDDEN,\r\n                error: `Group id: ${id} not found`,\r\n            }, HttpStatus.FORBIDDEN);\r\n        }\r\n        layer = Object.assign(layer, data);\r\n        return this.repository.save(layer);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param state \r\n     * @returns \r\n     */\r\n    async paginate(state: StateDto): Promise<Pagination<GroupEntity>> {\r\n        const options = { page: state.page.current, limit: state.page.size };\r\n        const queryBuilder = this.repository.createQueryBuilder('t');\r\n        return await paginate<GroupEntity>(this.queryBuilderService.getQuery(state, queryBuilder), options);\r\n    }\r\n}","import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { Repository } from \"typeorm\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { StatusEnum } from \"../../../enum/status.enum\";\r\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\r\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\r\nimport { LandmarkEntity } from \"../entity/landmark.entity\";\r\nimport { LandmarkCreateDto } from \"../dto/landmark.create.dto\";\r\nimport * as _ from \"lodash\";\r\n\r\n/**\r\n * LandmarkService consist of methods for Landmark API\r\n */\r\n\r\n@Injectable()\r\nexport class LandmarkService {\r\n    private readonly logger = new Logger(LandmarkService.name);\r\n    /**\r\n     * This is constructor for Landmark Service \r\n     * @param repository \r\n     * @param queryBuilderService \r\n     */\r\n    constructor(\r\n        @InjectRepository(LandmarkEntity) private repository: Repository<LandmarkEntity>,\r\n        private readonly queryBuilderService: QueryBuilder) { }\r\n     \r\n    /**\r\n     * Create new Landmark in database \r\n     * @param {object}data Takes this and save it into database (new entry)\r\n     * @returns Saves this data into database\r\n     */\r\n    async create(data: LandmarkCreateDto): Promise<LandmarkEntity> {\r\n        return this.repository.save(data);\r\n    }\r\n    /**\r\n     * Find Landmark based on id provided \r\n     * @param {number}id Checks for the id of landmark into database \r\n     * @returns with the data related to the id \r\n     */\r\n    async findById(id: number): Promise<LandmarkEntity> {\r\n        return this.repository.findOne({ id });\r\n    }\r\n    /**\r\n     * Find all the landmarks into database\r\n     * @returns All the landmarks saved in database\r\n     */\r\n    async findAll(): Promise<Array<LandmarkEntity>> {\r\n        return this.repository.find({status: StatusEnum.ACTIVE});\r\n    }\r\n\r\n    /**\r\n     * Removes the landmark based on id provided.\r\n     * @param {number}id  Checks for the id  \r\n     * @returns \r\n     */\r\n    async remove(id: number): Promise<LandmarkEntity> {\r\n        const layer = await this.findById(id);\r\n        layer.status = StatusEnum.DELETED;\r\n        return this.repository.save(layer);\r\n    }\r\n\r\n    /**\r\n     * Updates landmark based on id  provided \r\n     * @param id Updates Landmark based on id provided\r\n     * @param data \r\n     * @returns \r\n     */\r\n    async update(id: number, data: LandmarkCreateDto): Promise<LandmarkEntity> {\r\n        data = _.omit(data, ['id']);\r\n        let layer = await this.findById(id);\r\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\r\n        if (layer == null) {\r\n            throw new HttpException({\r\n                status: HttpStatus.FORBIDDEN,\r\n                error: `Layer id: ${id} not found`,\r\n            }, HttpStatus.FORBIDDEN);\r\n        }\r\n        layer = Object.assign(layer, data);\r\n        return this.repository.save(layer);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param state \r\n     * @returns \r\n     */\r\n    async paginate(state: StateDto): Promise<Pagination<LandmarkEntity>> {\r\n        const options = { page: state.page.current, limit: state.page.size };\r\n        const queryBuilder = this.repository.createQueryBuilder('t');\r\n        return await paginate<LandmarkEntity>(this.queryBuilderService.getQuery(state, queryBuilder), options);\r\n    }\r\n}","import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { Repository } from \"typeorm\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { StatusEnum } from \"../../../enum/status.enum\";\r\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\r\nimport { LayerCreateDto } from \"../dto/layer.create.dto\";\r\nimport { LayerEntity } from \"../entity/layer.entity\";\r\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\r\nimport * as _ from \"lodash\";\r\n\r\n/**\r\n * LayerService consist of methods for Layer API\r\n * @property create new Layer \r\n */\r\n\r\n@Injectable()\r\nexport class LayerService {\r\n    private readonly logger = new Logger(LayerService.name);\r\n    /**\r\n     * THis is LayerService Constructor \r\n     * @param repository \r\n     * @param queryBuilderService \r\n     */\r\n    constructor(\r\n        @InjectRepository(LayerEntity) private repository: Repository<LayerEntity>,\r\n        private readonly queryBuilderService: QueryBuilder) { }\r\n     /**\r\n      * This creates a new Layer in database\r\n      * @param {object}data Takes data from GUI \r\n      * @returns Updates the database\r\n      */\r\n    async create(data: LayerCreateDto): Promise<LayerEntity> {\r\n        return this.repository.save(data);\r\n    }\r\n\r\n    /**\r\n     * Finds the layer based on id provided \r\n     * @param {number}id Finds the layer based on id provided \r\n     * @returns With the data matched with id \r\n     */\r\n    async findById(id: number): Promise<LayerEntity> {\r\n        return this.repository.findOne({ id });\r\n    }\r\n    /**\r\n     * All the data related to layer \r\n     * @returns All the data related to layer \r\n     */\r\n    async findAll(): Promise<Array<LayerEntity>> {\r\n        return this.repository.find({status: StatusEnum.ACTIVE});\r\n    }\r\n\r\n    /**\r\n     * Checks for id in database and delete that layer \r\n     * @param {number}id Checks for id in database \r\n     * @returns Delete the respective id if found in database\r\n     */\r\n    async remove(id: number): Promise<LayerEntity> {\r\n        const layer = await this.findById(id);\r\n        layer.status = StatusEnum.DELETED;\r\n        return this.repository.save(layer);\r\n    }\r\n\r\n    /**\r\n     * Updates a layer with new entries\r\n     * @param {number}id Checks for the id  \r\n     * @param {object}data Update the Layer data based on id \r\n     * @returns Update the database\r\n     */\r\n    async update(id: number, data: LayerCreateDto): Promise<LayerEntity> {\r\n        data = _.omit(data, ['id']);\r\n        let layer = await this.findById(id);\r\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\r\n        if (layer == null) {\r\n            throw new HttpException({\r\n                status: HttpStatus.FORBIDDEN,\r\n                error: `Layer id: ${id} not found`,\r\n            }, HttpStatus.FORBIDDEN);\r\n        }\r\n        layer = Object.assign(layer, data);\r\n        return this.repository.save(layer);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     * @param state \r\n     * @returns \r\n     */\r\n    async paginate(state: StateDto): Promise<Pagination<LayerEntity>> {\r\n        const options = { page: state.page.current, limit: state.page.size };\r\n        const queryBuilder = this.repository.createQueryBuilder('t');\r\n        return await paginate<LayerEntity>(this.queryBuilderService.getQuery(state, queryBuilder), options);\r\n    }\r\n}","import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\r\n\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Pagination } from 'nestjs-typeorm-paginate';\r\nimport { Repository } from 'typeorm';\r\nimport { StatusEnum } from '../../../enum/status.enum';\r\nimport { UserTypeEnum } from '../../../enum/user.type.enum';\r\nimport { QueryBuilder } from '../../../service/query.builder.service';\r\nimport { NewUserDto } from '../dto/newUser.dto';\r\nimport { UpdateUserDto } from '../dto/updateUser.dto';\r\nimport { UserEntity } from '../entity/user.entity';\r\n\r\n@Injectable()\r\nexport class NewUserService {\r\n    private readonly logger = new Logger(NewUserService.name);\r\n  constructor(\r\n    @InjectRepository(UserEntity) private userRepository: Repository<UserEntity>, \r\n    private readonly queryBuilderService: QueryBuilder) { }\r\n\r\n  async create(userDto: NewUserDto): Promise<UserEntity> {\r\n    const user = new UserEntity();\r\n    user.accountType = userDto.accountType;\r\n    user.active = userDto.active;\r\n    user.canChangePassword = userDto.canChangePassword;\r\n    user.createdBy = userDto.createdBy;\r\n    user.customerId = userDto.customerId;\r\n    user.email_id = userDto.email_id;\r\n    user.expires_on = userDto.expires_on;\r\n    user.firstname = userDto.firstname;\r\n    user.lastname = userDto.lastname;\r\n    user.login_id = userDto.login_id;\r\n    user.neverExpire = userDto.neverExpire;\r\n    user.password = userDto.password;\r\n    user.phone_no = userDto.phone_no;\r\n    user.username = userDto.username;\r\n    user.userType=userDto.userType;\r\n    return this.userRepository.save(user);\r\n  }\r\n\r\n  async login(username: string, loginId: string, password: string): Promise<UserEntity> {\r\n    let user: UserEntity;\r\n    if (username) {\r\n      user = await this.userRepository.findOne({ where: { username, password , status: StatusEnum.ACTIVE} });\r\n    } else if (loginId) {\r\n      user = await this.userRepository.findOne({ where: { login_id: loginId, password, status: StatusEnum.ACTIVE } });\r\n    }\r\n    if (!user) {\r\n      throw new Error('Invalid request');\r\n    }\r\n    return user;\r\n  }\r\n\r\n  async find(): Promise<Array<UserEntity>> {\r\n    try {\r\n      const users = await this.userRepository.find({status: StatusEnum.ACTIVE});\r\n      return users;\r\n    } catch (error) {\r\n      // Log the error\r\n      console.error(error);\r\n      throw new HttpException('Invalid request', HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n//Handle list of users for logged in customer \r\nasync getUsersByCustomerId(customerId: number): Promise<UserEntity[]> {\r\n  return this.userRepository.find({ where: { customerId, status: StatusEnum.ACTIVE } });\r\n}\r\n\r\n\r\n  async update(id: number, updateUserDto: UpdateUserDto): Promise<UserEntity[]> {\r\n    try {\r\n      const user = await this.userRepository.find({ id });\r\n      if (!user) {\r\n        throw new Error('User not found');\r\n      }\r\n      await this.userRepository.update({ id }, updateUserDto);\r\n      return user;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async remove(id: number): Promise<UserEntity | any> {\r\n    try{\r\n    const layer = await this.findById(id);\r\n    layer.status = StatusEnum.DELETED\r\n    return this.userRepository.save(layer);\r\n    }catch(err){\r\n             console.log(err);\r\n             const obj = {\r\n                error:\"No user found\",\r\n                status:404\r\n             }\r\n             return obj;\r\n    }\r\n    }\r\n\r\n  async findById(id: number): Promise<UserEntity> {\r\n    try {\r\n      const user = await this.userRepository.findOne({id});\r\n      if (!user) {\r\n        throw new Error('User not found');\r\n      }\r\n      return user;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  //Find by account type\r\n  async findByAccountType(accountType: UserTypeEnum): Promise<UserEntity> {\r\n    console.log('account type: ', accountType);\r\n    return this.userRepository.findOne({ status: StatusEnum.ACTIVE, accountType });\r\n}\r\n\r\n//Paginate\r\n\r\n\r\n}\r\n","import { Injectable, NotFoundException } from \"@nestjs/common\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { plainToClass } from \"class-transformer\";\r\nimport { Repository } from \"typeorm\";\r\nimport {  NLayerDto,LayerDataDto,ProductDataDto } from \"../dto/newlayer.dto\";\r\nimport { LayerData, NLayer, ProductData} from \"../entity/newlayer.entity\";\r\n\r\n@Injectable()\r\nexport class NewLayerService {\r\n  // constructor(@InjectRepository(NLayer) private layerRepository: Repository<NLayer>) {}\r\n \r\n  constructor(\r\n    @InjectRepository(NLayer)\r\n    private readonly layerRepository: Repository<NLayer>,\r\n    @InjectRepository(NLayer)\r\n    private productCategoryRepository: Repository<NLayer>,\r\n    @InjectRepository(LayerData)\r\n    private readonly layerDataRepository: Repository<LayerData>,\r\n    @InjectRepository(ProductData)\r\n    private readonly productRepository: Repository<ProductData>,\r\n  ) {}\r\n\r\n\r\n  //added -1-3-23\r\n  private categories: NLayer[] = [\r\n    {\r\n      id: 1,\r\n      category: 'Aeronotical Charts',\r\n      has_subcategory: false,\r\n      data: [\r\n        {\r\n          id: 1,\r\n          value: 'US High',\r\n          data: [\r\n            {\r\n              product_id: 'C39-0x0302-0',\r\n              product_name: 'camulas weather',\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: 2,\r\n          value: 'US Low',\r\n          data: [\r\n            {\r\n              product_id: 'C39-0x0302-0',\r\n              product_name: 'camulas weather',\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: 3,\r\n          value: 'US VFR',\r\n          data: [\r\n            {\r\n              product_id: 'C39-0x0302-0',\r\n              product_name: 'camulas weather',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 2,\r\n      category: 'Weather Subscription Basics',\r\n      has_subcategory: true,\r\n      data: [\r\n        {\r\n          id: 4,\r\n          value: 'Enroute',\r\n          data: [\r\n            {\r\n              product_id: 'C39-0x0302-0',\r\n              product_name: 'camulas weather',\r\n            },\r\n            {\r\n              product_id: 'C39-0x0302-0',\r\n              product_name: 'camulas weather',\r\n            }, {\r\n              product_id: 'C39-0x0302-0',\r\n              product_name: 'camulas weather',\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: 5,\r\n          value: 'Forecast',\r\n          data: [\r\n            {\r\n              product_id: 'C39-0x0302-0',\r\n              product_name: 'camulas weather',\r\n            },\r\n            {\r\n              product_id: 'C39-0x0302-0',\r\n              product_name: 'camulas weather',\r\n            }, {\r\n              product_id: 'C39-0x0302-0',\r\n              product_name: 'camulas weather',\r\n            },\r\n          ],\r\n        },{\r\n          id: 6,\r\n          value: 'Lightining and Hazardus',\r\n          data: [\r\n            {\r\n              product_id: 'C39-0x0302-0',\r\n              product_name: 'camulas weather',\r\n            },\r\n            {\r\n              product_id: 'C39-0x0302-0',\r\n              product_name: 'camulas weather',\r\n            }, {\r\n              product_id: 'C39-0x0302-0',\r\n              product_name: 'camulas weather',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n\r\n// Get all layers \r\nasync getLayers(): Promise<NLayerDto[]> { \r\n    return this.categories.map((category) => this.toCategoryDto(category));\r\n}\r\n\r\nprivate toCategoryDto(category: NLayer): NLayerDto {\r\n  if (category.has_subcategory) {\r\n    return {\r\n      id: category.id,\r\n      category: category.category,\r\n      has_subcategory: category.has_subcategory,\r\n      data: category.data.map((subcategory) => ({\r\n        id: subcategory.id,\r\n        value: subcategory.value,\r\n        product: subcategory.data.map((product) => ({\r\n          product_id: product.product_id,\r\n          product_name: product.product_name,\r\n        })),\r\n      })),\r\n    };\r\n  } else {\r\n    const products = category.data.flatMap((subcategory) =>\r\n      subcategory.data.map((product) => ({\r\n        id: subcategory.id,\r\n        value: subcategory.value,\r\n        product_id: product.product_id,\r\n        product_name: product.product_name,\r\n      })),\r\n    );\r\n\r\n    return {\r\n      id: category.id,\r\n      category: category.category,\r\n      has_subcategory: category.has_subcategory,\r\n      data: products,\r\n    };\r\n  }\r\n}\r\n\r\n// to handle create request \r\nasync createLayer(layerDTO: NLayerDto): Promise<NLayerDto> {\r\n  const layer = new NLayer();\r\n  layer.category = layerDTO.category;\r\n  layer.has_subcategory = layerDTO.has_subcategory;\r\n  await this.layerRepository.save(layer);\r\n\r\n  layerDTO.data.forEach(async layerDataDTO => {\r\n    const layerData = new LayerData();\r\n    layerData.value = layerDataDTO.value;\r\n    layerData.layer = layer;\r\n    await this.layerDataRepository.save(layerData);\r\n\r\n    if (layerDataDTO.data) {\r\n      layerDataDTO.data.forEach(async productDTO => {\r\n        const product = new ProductData();\r\n        product.product_id = productDTO.product_id;\r\n        product.product_name = productDTO.product_name;\r\n        product.layerData = layerData;\r\n        await this.productRepository.save(product);\r\n      });\r\n    }\r\n  });\r\n\r\n  return layerDTO;\r\n}\r\n\r\n//Update Layer \r\nasync updateLayer(layerId: number, layerDTO: NLayerDto): Promise<NLayerDto> {\r\n  const layer = await this.layerRepository.findOne(layerId);\r\n  layer.category = layerDTO.category;\r\n  layer.has_subcategory = layerDTO.has_subcategory;\r\n  await this.layerRepository.save(layer);\r\n\r\n  for (const layerDataDTO of layerDTO.data) {\r\n    const layerData = await this.layerDataRepository.findOne(layerDataDTO.id);\r\n    if (!layerData) {\r\n      continue;\r\n    }\r\n    layerData.value = layerDataDTO.value;\r\n    layerData.layer = layer;\r\n    await this.layerDataRepository.save(layerData);\r\n\r\n    if (layerDataDTO.data) {\r\n      for (const productDTO of layerDataDTO.data) {\r\n        const product = await this.productRepository.findOne(productDTO.product_id);\r\n        if (!product) {\r\n          continue;\r\n        }\r\n        product.product_id = productDTO.product_id;\r\n        product.product_name = productDTO.product_name;\r\n        product.layerData = layerData;\r\n        await this.productRepository.save(product);\r\n      }\r\n    }\r\n  }\r\n\r\n  return layerDTO;\r\n}\r\n\r\nasync deleteLayer(layerId: number): Promise<void> {\r\n  const layer = await this.layerRepository.findOne(layerId);\r\n  if (!layer) {\r\n    throw new NotFoundException(`Layer with id ${layerId} not found`);\r\n  }\r\n  await this.layerRepository.remove(layer);\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n//Layer Data Code Latest\r\n\r\n// @Injectable()\r\n// export class NewLayerService {\r\n//   constructor(\r\n//     @InjectRepository(NLayer)\r\n//     private readonly nLayerRepository: Repository<NLayer>,\r\n//     @InjectRepository(LayerData)\r\n//     private readonly layerDataRepository: Repository<LayerData>,\r\n//     @InjectRepository(ProductData)\r\n//     private readonly productDataRepository: Repository<ProductData>,\r\n//   ) {}\r\n  \r\n//   // async getLayers(): Promise<NLayerDto[]> {\r\n//   //   const nLayers = await this.nLayerRepository.find({ relations: ['data', 'data.data'] });\r\n//   //   return nLayers.map(nLayer => this.mapNLayerToDto(nLayer));\r\n//   // }\r\n\r\n//   async  getLayers(): Promise<NLayerDto[]> {\r\n//     const layers = await this.nLayerRepository.find({ relations: ['data', 'data.data'] });\r\n//     return layers.map(layer => {\r\n//       if (layer.has_subcategory) {\r\n//         return plainToClass(NLayerDto, layer, { excludeExtraneousValues: true });\r\n//       } else {\r\n//         const data = layer.data.reduce((acc, curr) => {\r\n//           const productData = curr.data.map(pd => plainToClass(ProductDataDto, pd, { excludeExtraneousValues: true }));\r\n//           const layerDataDto = plainToClass(LayerDataDto, { ...curr, productData }, { excludeExtraneousValues: true });\r\n//           return [...acc, layerDataDto];\r\n//         }, []);\r\n//         const { id, category, has_subcategory } = layer;\r\n//         return plainToClass(NLayerDto, { id, category, has_subcategory, data }, { excludeExtraneousValues: true });\r\n//       }\r\n//     });\r\n//   }\r\n  \r\n\r\n\r\n//   // async createNLayer(nLayerDto: NLayerDto): Promise<NLayerDto> {\r\n//   //   const nLayer = this.mapDtoToNLayer(nLayerDto);\r\n//   //   const savedNLayer = await this.nLayerRepository.save(nLayer);\r\n//   //   return this.mapNLayerToDto(savedNLayer);\r\n//   // }\r\n\r\n//   // private mapNLayerToDto(nLayer: NLayer): NLayerDto {\r\n//   //   const { id, category, has_subcategory, data } = nLayer;\r\n//   //   const layerDataDto = data.map(layerData => this.mapLayerDataToDto(layerData));\r\n//   //   return { id, category, has_subcategory, data: layerDataDto };\r\n//   // }\r\n\r\n//   // private mapLayerDataToDto(layerData: LayerData): LayerDataDto {\r\n//   //   const { id, value, data } = layerData;\r\n//   //   const productDataDto = data.map(productData => this.mapProductDataToDto(productData));\r\n//   //   return { id, value, productData: productDataDto };\r\n//   // }\r\n\r\n//   // private mapProductDataToDto(productData: ProductData): ProductDataDto {\r\n//   //   const { product_id, product_name } = productData;\r\n//   //   return { product_id, product_name };\r\n//   // }\r\n\r\n//   // private mapDtoToNLayer(nLayerDto: NLayerDto): NLayer {\r\n//   //   const { category, has_subcategory, data } = nLayerDto;\r\n//   //   const layerData = data.map(layerDataDto => this.mapDtoToLayerData(layerDataDto));\r\n//   //   const nLayer = new NLayer();\r\n//   //   nLayer.category = category;\r\n//   //   nLayer.has_subcategory = has_subcategory;\r\n//   //   nLayer.data = layerData;\r\n//   //   return nLayer;\r\n//   // }\r\n\r\n//   // private mapDtoToLayerData(layerDataDto: LayerDataDto): LayerData {\r\n//   //   const { value, data } = layerDataDto;\r\n//   //   const productData = data.map(productDataDto => this.mapDtoToProductData(productDataDto));\r\n//   //   const layerData = new LayerData();\r\n//   //   layerData.value = value;\r\n//   //   layerData.data = productData;\r\n//   //   return layerData;\r\n//   // }\r\n\r\n//   // private mapDtoToProductData(productDataDto: ProductDataDto): ProductData {\r\n//   //   const { product_id, product_name } = productDataDto;\r\n//   //   const productData = new ProductData();\r\n//   //   productData.product_id = product_id;\r\n//   //   productData.product_name = product_name;\r\n//   //   return productData;\r\n//   // }\r\n// }\r\n\r\n\r\n\r\n","import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\r\nimport { IsNull, Repository } from \"typeorm\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { StatusEnum } from \"../../../enum/status.enum\";\r\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\r\nimport { NotificationDto } from \"../dto/notification.dto\";\r\nimport { NotificationEmailEntity } from \"../entity/notification.email.entity\";\r\nimport { NotificationEntity } from \"../entity/notification.entity\";\r\nimport { NotificationTemplateEntity } from \"../entity/notification.template.entity\";\r\nimport { UserEntity } from \"../entity/user.entity\";\r\nimport * as _ from \"lodash\";\r\n\r\n/**\r\n * NotificationService consist of methods for notification API\r\n */\r\n@Injectable()\r\nexport class NotificationService {\r\n    private readonly logger = new Logger(NotificationService.name);\r\n    /**\r\n     * This is constructor for notification services \r\n     * @param repository \r\n     * @param templateRepository \r\n     * @param notiEmailRepository \r\n     * @param userRepository \r\n     * @param queryBuilderService \r\n     */\r\n    constructor(\r\n        @InjectRepository(NotificationEntity) private repository: Repository<NotificationEntity>,\r\n        @InjectRepository(NotificationTemplateEntity) private templateRepository: Repository<NotificationTemplateEntity>,\r\n        @InjectRepository(NotificationEmailEntity) private notiEmailRepository: Repository<NotificationEmailEntity>,\r\n        @InjectRepository(UserEntity) private userRepository: Repository<UserEntity>,\r\n        private readonly queryBuilderService: QueryBuilder) { }\r\n\r\n        /**\r\n         * This creates new notification in database\r\n         * @param {object}data Takes data as input from API  \r\n         * @returns with a Nofitication based on data \r\n         */\r\n    async create(data: NotificationDto): Promise<NotificationEntity> {\r\n        console.log('data: ', data);\r\n        const emailTemplate = await this.templateRepository.findOne({id: data.emailTemplateId});\r\n        const smsTemplate = await this.templateRepository.findOne({id: data.smsTemplateId});\r\n        data.emailTemplate = emailTemplate;\r\n        data.smsTemplate = smsTemplate;\r\n        const notification = await this.repository.save(data);\r\n        return notification;\r\n    }\r\n    /**\r\n     * This method is used to find notification by provided id\r\n     * @param {number}id Takes id as input from GUI \r\n     * @returns  with the notification found based on id provided \r\n     */\r\n    async findById(id: number): Promise<NotificationEntity> {\r\n        return this.repository.findOne({ id: id, status: StatusEnum.ACTIVE });\r\n    }\r\n\r\n    /**\r\n     * Finds all the notification \r\n     * @returns All the notification found in database.\r\n     */\r\n    async findAll(): Promise<Array<NotificationEntity>> {\r\n        return this.repository.find({status: StatusEnum.ACTIVE});\r\n    }\r\n\r\n    /**\r\n     * Delete a notification based on id \r\n     * This deletes notification based on id provided\r\n     * @param {number}id Checks for the id provided from GUI into database\r\n     * @returns  Deletes the respective id found in database and update it \r\n     */\r\n    async remove(id: number): Promise<NotificationEntity> {\r\n        const layer = await this.findById(id);\r\n        layer.status = StatusEnum.DELETED;\r\n        return this.repository.save(layer);\r\n    }\r\n/**\r\n * Updates notification based on id provided \r\n * @param {number}id Checks for the id  \r\n * @param {object}data New Data provided \r\n * @returns  Updates the database\r\n */\r\n\r\n    async update(id: number, data: NotificationDto): Promise<NotificationEntity> {\r\n        \r\n        data = _.omit(data, ['id']);\r\n        let layer = await this.findById(id);\r\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\r\n        if (layer == null) {\r\n            throw new HttpException({\r\n                status: HttpStatus.FORBIDDEN,\r\n                error: `Notification id: ${id} not found`,\r\n            }, HttpStatus.FORBIDDEN);\r\n        }\r\n        layer = Object.assign(layer, data);\r\n        const notification = await this.repository.save(layer);\r\n        await this.notiEmailRepository.delete({notification: IsNull()});\r\n       \r\n        return notification;\r\n    }\r\n    /**\r\n     * For paginate\r\n     * @ignore\r\n     * @param state \r\n     * @returns \r\n     */\r\n    async paginate(state: StateDto): Promise<Pagination<NotificationEntity>> {\r\n        const options = { page: state.page.current, limit: state.page.size };\r\n        const queryBuilder = this.repository.createQueryBuilder('t');\r\n        return await paginate<NotificationEntity>(this.queryBuilderService.getQuery(state, queryBuilder), options);\r\n    }\r\n}","import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { Repository } from \"typeorm\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { StatusEnum } from \"../../../enum/status.enum\";\r\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\r\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\r\nimport { NotificationTemplateEntity } from \"../entity/notification.template.entity\";\r\nimport { NotificationTemplateDto } from \"../dto/notification.template.dto\";\r\nimport * as _ from \"lodash\";\r\n\r\n\r\n/**\r\n *  This class handles functions of Notification based API Queries.\r\n * @class\r\n */\r\n@Injectable()\r\n\r\nexport class NotificationTemplateService {\r\n    private readonly logger = new Logger(NotificationTemplateService.name);\r\n    /**\r\n     * Constructor for notifciation template \r\n     * @param repository \r\n     * @param queryBuilderService \r\n     */\r\n    constructor(\r\n        @InjectRepository(NotificationTemplateEntity) private repository: Repository<NotificationTemplateEntity>,\r\n        private readonly queryBuilderService: QueryBuilder) { }\r\n\r\n        /**\r\n         * Takes  data as input and create new notification in database\r\n         * @param data \r\n         * @returns Saves the notification data into database \r\n         */\r\n    async create(data: NotificationTemplateDto): Promise<NotificationTemplateEntity> {\r\n        return this.repository.save(data);\r\n    }\r\n     /**\r\n      * Finds by id\r\n      * @param id Find a notification based on id provided \r\n      * @returns With the notification found by the respective id in database.\r\n      */\r\n\r\n    async findById(id: number): Promise<NotificationTemplateEntity> {\r\n        return this.repository.findOne({ id });\r\n    }\r\n\r\n    /**\r\n     * Finds all the notification\r\n     * @returns Find all the notification in database \r\n     */\r\n    async findAll(): Promise<Array<NotificationTemplateEntity>> {\r\n        return this.repository.find({status: StatusEnum.ACTIVE});\r\n    }\r\n\r\n    /**\r\n     * Remove notification based on id provided\r\n     * @param id Search for a notification based on the provided id\r\n     * @returns  It delete the respective notification and update the database.\r\n     */\r\n    async remove(id: number): Promise<NotificationTemplateEntity> {\r\n        const layer = await this.findById(id);\r\n        layer.status = StatusEnum.DELETED;\r\n        return this.repository.save(layer);\r\n    }\r\n\r\n    /**\r\n     * Updates database with new entries based on id \r\n     * @param {number}id Search for notification based on id \r\n     * @param {object}data  To be updated data for notification. \r\n     * @returns It updates the database with new entries \r\n     */\r\n    async update(id: number, data: NotificationTemplateDto): Promise<NotificationTemplateEntity> {\r\n        data = _.omit(data, ['id']);\r\n        let layer = await this.findById(id);\r\n        this.logger.log(`update: ${JSON.stringify(layer)}`);\r\n        if (layer == null) {\r\n            throw new HttpException({\r\n                status: HttpStatus.FORBIDDEN,\r\n                error: `Notification template id: ${id} not found`,\r\n            }, HttpStatus.FORBIDDEN);\r\n        }\r\n        layer = Object.assign(layer, data);\r\n        return this.repository.save(layer);\r\n    }\r\n\r\n    /**\r\n     * For paginate \r\n     * @param state CreateQueryBuilder based on state data provided\r\n     * @returns With new paginate \r\n     */\r\n    async paginate(state: StateDto): Promise<Pagination<NotificationTemplateEntity>> {\r\n        const options = { page: state.page.current, limit: state.page.size };\r\n        const queryBuilder = this.repository.createQueryBuilder('t');\r\n        return await paginate<NotificationTemplateEntity>(this.queryBuilderService.getQuery(state, queryBuilder), options);\r\n    }\r\n}","import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { ReportNotificationDto } from '../dto/report-notification.dto';\r\nimport { ReportNotification } from '../entity/report-notification.entity';\r\n\r\n@Injectable()\r\nexport class ReportNotificationService {\r\n  constructor(\r\n    @InjectRepository(ReportNotification)\r\n    private readonly reportNotificationRepository: Repository<ReportNotification>,\r\n  ) {}\r\n\r\n  async create(dto: ReportNotificationDto): Promise<ReportNotification> {\r\n  const notificationIds = dto.notifications.map((notification) => notification.id);\r\n\r\n    const reportNotification = this.reportNotificationRepository.create({\r\n      createdBy: dto.createdBy,\r\n      customerName: dto.customerName,\r\n      customerId:dto.customerId,\r\n      notificationIds: notificationIds,\r\n      report: dto.report,\r\n    });\r\n\r\n    return this.reportNotificationRepository.save(reportNotification);\r\n  }\r\n\r\n  async update(\r\n    customerId: number,\r\n    reportName: string,\r\n    data: ReportNotificationDto,\r\n  ): Promise<ReportNotification | null> {\r\n    const notificationIds = data.notifications.map((notification) => notification.id);\r\n\r\n    const existingRecord = await this.reportNotificationRepository.findOne({\r\n      where: { customerId: customerId, report: reportName },\r\n    });\r\n\r\n    if (!existingRecord) {\r\n      return null;\r\n    }\r\n\r\n    existingRecord.customerName = data.customerName;\r\n    existingRecord.notificationIds = notificationIds;\r\n\r\n    return this.reportNotificationRepository.save(existingRecord);\r\n  }\r\n\r\n  async getByCustomerIdAndReportName(\r\n    customerId: number,\r\n    reportName: string,\r\n  ): Promise<ReportNotification | null> {\r\n    return this.reportNotificationRepository.findOne({\r\n      where: { customerId: customerId, report: reportName },\r\n    });\r\n  }\r\n}\r\n","import { HttpException, HttpStatus, Injectable, Logger } from \"@nestjs/common\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { paginate, Pagination } from 'nestjs-typeorm-paginate';\r\nimport { Repository } from \"typeorm\";\r\nimport { StateDto } from \"../../../dto/state.interface\";\r\nimport { StatusEnum } from \"../../../enum/status.enum\";\r\nimport { QueryBuilder } from \"../../../service/query.builder.service\";\r\nimport { UserDto } from \"../dto/user.dto\";\r\nimport { UserEntity } from \"../entity/user.entity\";\r\nimport * as _ from \"lodash\";\r\nimport { UserTypeEnum } from \"../../../enum/user.type.enum\";\r\nimport { LoginDto } from \"../dto/login.dto\";\r\n\r\n/**\r\n * This class consist of methods which verify user login creation and also to find users\r\n * @class UserService  \r\n */\r\n\r\n@Injectable()\r\nexport class UserService {\r\n\r\n\r\n    private readonly logger = new Logger(UserService.name);\r\n    /**\r\n     * Constructor for user services \r\n     * @param repository \r\n     * @param queryBuilderService \r\n     */\r\n    constructor(\r\n        @InjectRepository(UserEntity) private repository: Repository<UserEntity>,\r\n        private readonly queryBuilderService: QueryBuilder) { }\r\n\r\n        /**\r\n         * This method is used to create new user\r\n         * @param data UserDto is used as param for create function \r\n         * @returns This saves new user into database respective to entries made in UserDto fields.\r\n         */\r\n    async create(data: UserDto): Promise<UserEntity> {\r\n        return this.repository.save(data);\r\n    }\r\n\r\n    /**\r\n     * This method is used to find individual user based on id\r\n     * @param {number} id Find user by the provided id\r\n     * @returns The user with provided id \r\n     */\r\n    async findById(id: number): Promise<UserEntity> {\r\n        return this.repository.findOne({ id });\r\n    }\r\n    /**\r\n     * Find a user based on account type\r\n     * @param {object} accountType \r\n     * @returns Find user based on accountType and the account status.\r\n     */\r\n    async findByAccountType(accountType: UserTypeEnum): Promise<UserEntity> {\r\n        console.log('account type: ', accountType);\r\n        return this.repository.findOne({ status: StatusEnum.ACTIVE, accountType });\r\n    }\r\n    /**Find all the user exist in database\r\n     * @returns All the users in the database \r\n     */\r\n    async findAll(): Promise<Array<UserEntity>> {\r\n        return this.repository.find({status: StatusEnum.ACTIVE});\r\n    }\r\n    /**\r\n     * Remove a user from database\r\n     * @param {number}id Takes id and delete the user if found in database \r\n     * @returns Updates the database after the provoded id user is deleted.\r\n     */\r\n    async remove(id: number): Promise<UserEntity> {\r\n        const layer = await this.findById(id);\r\n        layer.status = StatusEnum.DELETED;\r\n        return this.repository.save(layer);\r\n    }\r\n\r\n    /**\r\n     * Update new entries for a user in database based on id\r\n     * @param data Updates the database with new detail of user\r\n     * @returns  It saves updated entries of user into database\r\n     */\r\n    async update(data: UserDto): Promise<UserEntity> {\r\n        const id: number = _.result(data,'id',0);\r\n        data = _.omit(data, ['id']);\r\n        let layer = await this.findById(id);\r\n        if (layer == null) {\r\n            throw new HttpException({\r\n                status: HttpStatus.FORBIDDEN,\r\n                error: `User id: ${id} not found`,\r\n            }, HttpStatus.FORBIDDEN);\r\n        }\r\n        layer = Object.assign(layer, data);\r\n        return this.repository.save(layer);\r\n    }\r\n\r\n    /**\r\n     * For user paginate \r\n     * @param state Uses StateDto\r\n     * @returns With updated paginate.\r\n     */\r\n    async paginate(state: StateDto): Promise<Pagination<UserEntity>> {\r\n        const options = { page: state.page.current, limit: state.page.size };\r\n        const queryBuilder = this.repository.createQueryBuilder('t');\r\n        return await paginate<UserEntity>(this.queryBuilderService.getQuery(state, queryBuilder), options);\r\n    }\r\n\r\n    /**\r\n     * This is used to validate user login \r\n     * @param {JSON}payload Takes user input at login GUI  \r\n     * @returns With a data if match found else returns with HTTP exception\r\n     */\r\n    async validate(payload: LoginDto){\r\n        try{\r\n            const loginData = await this.repository;\r\n           const {username , password} = payload\r\n            // console.log(loginData)\r\n            // This functions checks for user \r\n          const user = await loginData.findOne({username ,password})\r\n          if(user){return user}else{ return new HttpException({\r\n            status: HttpStatus.FORBIDDEN,\r\n            error: `User not found`,\r\n        }, HttpStatus.FORBIDDEN);};\r\n        }\r\n        catch(err){console.log(err.message)}\r\n    }\r\n}","import { Module } from '@nestjs/common';\r\nimport { TypeOrmModule, TypeOrmModuleAsyncOptions } from '@nestjs/typeorm';\r\nimport { DatabaseType, getMetadataArgsStorage } from 'typeorm';\r\nimport { PostgresSQLConfigModule } from '../../../config/database/postgres/config.module';\r\nimport { PostgresSqlConfigService } from '../../../config/database/postgres/configuration.service';\r\n\r\n/**\r\n * @description  This module is for Connecting to postgres database\r\n * @module TypeOrmModule is for database connectivity\r\n * @class This class is exported as PostgresDatabaseProviderModule\r\n */\r\n\r\n@Module({\r\n    imports: [\r\n        TypeOrmModule.forRootAsync({\r\n            imports: [PostgresSQLConfigModule],\r\n            useFactory: async (postgresConfigService: PostgresSqlConfigService) => ({\r\n                type: 'postgres' as DatabaseType,\r\n                host: postgresConfigService.host,\r\n                port: postgresConfigService.port,\r\n                username: postgresConfigService.username,\r\n                password: postgresConfigService.password,\r\n                database: postgresConfigService.dbname,\r\n                logging: postgresConfigService.logging,\r\n                synchronize: postgresConfigService.synchronize,\r\n                entities: getMetadataArgsStorage().tables.map(tbl => tbl.target)\r\n            }),\r\n            inject: [PostgresSqlConfigService],\r\n            } as TypeOrmModuleAsyncOptions)\r\n    ]\r\n})\r\nexport class PostgresDatabaseProviderModule {}","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport { Injectable } from '@nestjs/common';\r\nimport { SelectQueryBuilder } from 'typeorm';\r\nimport { StateDto } from '../dto/state.interface';\r\n\r\n/**\r\n * @ignore\r\n */\r\n\r\n@Injectable()\r\nexport class QueryBuilder {\r\n    public getQuery(state: StateDto, queryBuilder: SelectQueryBuilder<any>): SelectQueryBuilder<any> {\r\n        this.filter(state, queryBuilder);\r\n        this.sort(state, queryBuilder);\r\n        return queryBuilder;\r\n    }\r\n    private filter(state: StateDto, queryBuilder: SelectQueryBuilder<any>) {\r\n        if (typeof state.filters !== 'undefined') {\r\n            queryBuilder.where(\"t.\"+state.filters[0].property+\" like '%\"+state.filters[0].value+\"%'\");\r\n            if (state.filters.length > 1) {\r\n                for (let i = 1; i < state.filters.length; i++) {\r\n                    queryBuilder.where(\"t.\"+state.filters[i].property+\" like '%\"+state.filters[i].value+\"%'\");\r\n                }\r\n            }\r\n        }\r\n        return queryBuilder;\r\n    }\r\n    private sort(state: StateDto, queryBuilder: SelectQueryBuilder<any>) {\r\n        if (typeof state.sort !== 'undefined') {\r\n            queryBuilder.addOrderBy(`t.${state.sort.by}`, state.sort.reverse ? 'DESC': 'ASC');\r\n        }\r\n        return queryBuilder;\r\n    }\r\n}\r\n","module.exports = require(\"@hapi/joi\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/serve-static\");","module.exports = require(\"@nestjs/swagger\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"@nestjsx/crud/lib/crud\");","module.exports = require(\"axios\");","module.exports = require(\"class-transformer\");","module.exports = require(\"class-validator\");","module.exports = require(\"fs\");","module.exports = require(\"https\");","module.exports = require(\"lodash\");","module.exports = require(\"nestjs-typeorm-paginate\");","module.exports = require(\"rxjs/operators\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as fs from 'fs';\r\nimport * as https from 'https';\r\nimport { Logger, ValidationPipe, VersioningType } from '@nestjs/common';\r\nimport { NestFactory } from '@nestjs/core';\r\nimport { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';\r\n\r\nimport { AppModule } from './app/app.module';\r\n/**\r\n * @ignore\r\n */\r\nasync function bootstrap() {\r\n  // const app = await NestFactory.create(AppModule);\r\n\r\n  // const app = await NestFactory.create(AppModule, {\r\n  //   httpsOptions: {\r\n  //     key: fs.readFileSync('/home/ssl_cert/star-ads-app/new-private-key.txt', 'utf8'),\r\n  //     cert: fs.readFileSync('/home/ssl_cert/star-ads-app/new-certificate.crt', 'utf8'),\r\n  //   },\r\n  // });\r\n\r\n  const app = await NestFactory.create(AppModule, {\r\n    httpsOptions: {\r\n      key: fs.readFileSync('/home/ssl_cert/star-ads-app/new-private-key.txt', 'utf8'),\r\n      cert: fs.readFileSync('/home/ssl_cert/star-ads-app/8254c3b042470198.crt'),\r\n    },\r\n  });\r\n  \r\n\r\n  const globalPrefix = 'application-service/secured';\r\n  app.setGlobalPrefix(globalPrefix);\r\n  app.useGlobalPipes(new ValidationPipe());\r\n  app.enableVersioning({\r\n    type: VersioningType.URI,\r\n  });\r\n\r\n  /**\r\n   * Display API using swagger to a port \r\n   * @function \r\n   */\r\n  const port = process.env.APP_PORT || 3377;\r\n  // const port = 3333;\r\n  const config = new DocumentBuilder()\r\n    .setTitle('Star Api')\r\n    .setDescription('Star API Documentation')\r\n    .setVersion('2.0')\r\n    .addTag('star')\r\n    .build();\r\n    /**\r\n     * @param app is argument passed to createDocument of swaggerModule. It contains all the api components.\r\n     */\r\n  const document = SwaggerModule.createDocument(app, config);\r\n  SwaggerModule.setup(globalPrefix, app, document);\r\n  app.enableCors({});\r\n  /**\r\n   * @param port is where our Swagger API is running \r\n   */\r\n  await app.listen(port);\r\n  /**\r\n   * Logger is simply message function . It display port  \r\n   */\r\n  Logger.log(\r\n    `🚀 Application is running on PORT: ${port} URIs:- ${globalPrefix}`\r\n  );\r\n}\r\nbootstrap();"],"names":[],"sourceRoot":""}